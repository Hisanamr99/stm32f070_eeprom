
EEPROM_F070_TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b28  08003b28  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003b28  08003b28  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b28  08003b28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08003b98  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003b98  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a5a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdd  00000000  00000000  00028b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0002a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000604  00000000  00000000  0002af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010e7a  00000000  00000000  0002b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a625  00000000  00000000  0003c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fcca  00000000  00000000  000469a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000235c  00000000  00000000  000a6670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a89cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003988 	.word	0x08003988

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003988 	.word	0x08003988

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <GetPage>:
#include <string.h>
#include <stdio.h>

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e01a      	b.n	8000288 <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <GetPage+0x54>)
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d20f      	bcs.n	8000282 <GetPage+0x3e>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	0292      	lsls	r2, r2, #10
 8000268:	4694      	mov	ip, r2
 800026a:	4463      	add	r3, ip
 800026c:	029b      	lsls	r3, r3, #10
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	429a      	cmp	r2, r3
 8000272:	d306      	bcc.n	8000282 <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	0292      	lsls	r2, r2, #10
 800027a:	4694      	mov	ip, r2
 800027c:	4463      	add	r3, ip
 800027e:	029b      	lsls	r3, r3, #10
 8000280:	e006      	b.n	8000290 <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3301      	adds	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b7f      	cmp	r3, #127	; 0x7f
 800028c:	dde1      	ble.n	8000252 <GetPage+0xe>
	  }
  }

  return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	0018      	movs	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	b004      	add	sp, #16
 8000296:	bd80      	pop	{r7, pc}
 8000298:	00020001 	.word	0x00020001

0800029c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	1dbb      	adds	r3, r7, #6
 80002a8:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80002ae:	f000 fd21 	bl	8000cf4 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffc5 	bl	8000244 <GetPage>
 80002ba:	0003      	movs	r3, r0
 80002bc:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80002be:	1dbb      	adds	r3, r7, #6
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	001a      	movs	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	189b      	adds	r3, r3, r2
 80002ca:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	0018      	movs	r0, r3
 80002d0:	f7ff ffb8 	bl	8000244 <GetPage>
 80002d4:	0003      	movs	r3, r0
 80002d6:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <Flash_Write_Data+0xc0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <Flash_Write_Data+0xc0>)
 80002e0:	6a3a      	ldr	r2, [r7, #32]
 80002e2:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80002e4:	69ba      	ldr	r2, [r7, #24]
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	0a9b      	lsrs	r3, r3, #10
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <Flash_Write_Data+0xc0>)
 80002f0:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80002f2:	2314      	movs	r3, #20
 80002f4:	18fa      	adds	r2, r7, r3
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <Flash_Write_Data+0xc0>)
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fdc4 	bl	8000e88 <HAL_FLASHEx_Erase>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d01e      	beq.n	8000342 <Flash_Write_Data+0xa6>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000304:	f000 fd2a 	bl	8000d5c <HAL_FLASH_GetError>
 8000308:	0003      	movs	r3, r0
 800030a:	e022      	b.n	8000352 <Flash_Write_Data+0xb6>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	001c      	movs	r4, r3
 8000318:	2300      	movs	r3, #0
 800031a:	001d      	movs	r5, r3
 800031c:	68f9      	ldr	r1, [r7, #12]
 800031e:	0022      	movs	r2, r4
 8000320:	002b      	movs	r3, r5
 8000322:	2002      	movs	r0, #2
 8000324:	f000 fc50 	bl	8000bc8 <HAL_FLASH_Program>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d106      	bne.n	800033a <Flash_Write_Data+0x9e>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3304      	adds	r3, #4
 8000330:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	3301      	adds	r3, #1
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
 8000338:	e003      	b.n	8000342 <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800033a:	f000 fd0f 	bl	8000d5c <HAL_FLASH_GetError>
 800033e:	0003      	movs	r3, r0
 8000340:	e007      	b.n	8000352 <Flash_Write_Data+0xb6>
	   while (sofar<numberofwords)
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000348:	429a      	cmp	r2, r3
 800034a:	dbdf      	blt.n	800030c <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800034c:	f000 fcf8 	bl	8000d40 <HAL_FLASH_Lock>

	   return 0;
 8000350:	2300      	movs	r3, #0
}
 8000352:	0018      	movs	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	b00a      	add	sp, #40	; 0x28
 8000358:	bdb0      	pop	{r4, r5, r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	20000084 	.word	0x20000084

08000360 <Flash_Read_Data>:


void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3304      	adds	r3, #4
 800037a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3304      	adds	r3, #4
 8000380:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	1dba      	adds	r2, r7, #6
 8000388:	1e59      	subs	r1, r3, #1
 800038a:	8011      	strh	r1, [r2, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d000      	beq.n	8000392 <Flash_Read_Data+0x32>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000390:	e7ed      	b.n	800036e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000392:	46c0      	nop			; (mov r8, r8)
	}
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b004      	add	sp, #16
 800039a:	bd80      	pop	{r7, pc}

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fad5 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f8a1 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 f927 	bl	80005fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003ae:	f000 f8f5 	bl	800059c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t data1 = 100;
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Print the data to be written using UART
    printf("Data to be written to EEPROM:\r\n");
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <main+0x118>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f002 fa71 	bl	80028a0 <puts>
    printf("Data1: %lu\r\n", data1);
 80003be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80003c0:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <main+0x11c>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f002 fa05 	bl	80027d4 <iprintf>

    if (Flash_Write_Data(DATA1_ADDR, &data1, sizeof(data1) / 4) == HAL_OK) {
 80003ca:	236c      	movs	r3, #108	; 0x6c
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	483b      	ldr	r0, [pc, #236]	; (80004bc <main+0x120>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	0019      	movs	r1, r3
 80003d4:	f7ff ff62 	bl	800029c <Flash_Write_Data>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d10f      	bne.n	80003fc <main+0x60>

    	  flag = 1;
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <main+0x124>)
 80003de:	2201      	movs	r2, #1
 80003e0:	801a      	strh	r2, [r3, #0]
    	  printf("flag = %d\r",flag);
 80003e2:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <main+0x124>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	001a      	movs	r2, r3
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <main+0x128>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f9f1 	bl	80027d4 <iprintf>
          printf("Data written to EEPROM successfully.\r\n");
 80003f2:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <main+0x12c>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 fa53 	bl	80028a0 <puts>
 80003fa:	e00e      	b.n	800041a <main+0x7e>
        } else {
          flag = 2;
 80003fc:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <main+0x124>)
 80003fe:	2202      	movs	r2, #2
 8000400:	801a      	strh	r2, [r3, #0]
          printf("flag2 = %d\r",flag);
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <main+0x124>)
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	001a      	movs	r2, r3
 8000408:	4b30      	ldr	r3, [pc, #192]	; (80004cc <main+0x130>)
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f002 f9e1 	bl	80027d4 <iprintf>
          printf("Error writing data to EEPROM.\r\n");
 8000412:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <main+0x134>)
 8000414:	0018      	movs	r0, r3
 8000416:	f002 fa43 	bl	80028a0 <puts>
        }


    HAL_Delay(1000);
 800041a:	23fa      	movs	r3, #250	; 0xfa
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fafa 	bl	8000a18 <HAL_Delay>


      uint32_t readData1;
       Flash_Read_Data(DATA1_ADDR, &readData1, sizeof(readData1) / 4);
 8000424:	2368      	movs	r3, #104	; 0x68
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	4824      	ldr	r0, [pc, #144]	; (80004bc <main+0x120>)
 800042a:	2201      	movs	r2, #1
 800042c:	0019      	movs	r1, r3
 800042e:	f7ff ff97 	bl	8000360 <Flash_Read_Data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (readData1 == data1) {
 8000432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000436:	429a      	cmp	r2, r3
 8000438:	d11a      	bne.n	8000470 <main+0xd4>
	   flag = 3;
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <main+0x124>)
 800043c:	2203      	movs	r2, #3
 800043e:	801a      	strh	r2, [r3, #0]
	   printf("flag3 = %d\r",flag);
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <main+0x124>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	001a      	movs	r2, r3
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <main+0x138>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f002 f9c2 	bl	80027d4 <iprintf>
	   printf("Data read from EEPROM successfully.\r\n");
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <main+0x13c>)
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fa24 	bl	80028a0 <puts>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000458:	2390      	movs	r3, #144	; 0x90
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2102      	movs	r1, #2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 ff4b 	bl	80012fa <HAL_GPIO_TogglePin>
	   HAL_Delay(1000);
 8000464:	23fa      	movs	r3, #250	; 0xfa
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fad5 	bl	8000a18 <HAL_Delay>
 800046e:	e00e      	b.n	800048e <main+0xf2>

	 } else {
	   flag = 4;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <main+0x124>)
 8000472:	2204      	movs	r2, #4
 8000474:	801a      	strh	r2, [r3, #0]
	   printf("flag4 = %d\r",flag);
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <main+0x124>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	001a      	movs	r2, r3
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <main+0x140>)
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f002 f9a7 	bl	80027d4 <iprintf>
	   printf("Error reading data from EEPROM.\r\n");
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <main+0x144>)
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fa09 	bl	80028a0 <puts>
	 }

	 // Use sprintf to format the data and store it in a character array
	char buffer[100];
	sprintf(buffer, "Data read from EEPROM:\r\nData1: %lu\r\n", readData1);
 800048e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000490:	4914      	ldr	r1, [pc, #80]	; (80004e4 <main+0x148>)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	f002 fa0d 	bl	80028b4 <siprintf>

	// Transmit the data over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fe33 	bl	8000108 <strlen>
 80004a2:	0003      	movs	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2301      	movs	r3, #1
 80004a8:	425b      	negs	r3, r3
 80004aa:	1d39      	adds	r1, r7, #4
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <main+0x14c>)
 80004ae:	f001 fcd5 	bl	8001e5c <HAL_UART_Transmit>
  {
 80004b2:	e7be      	b.n	8000432 <main+0x96>
 80004b4:	080039a0 	.word	0x080039a0
 80004b8:	080039c0 	.word	0x080039c0
 80004bc:	08007000 	.word	0x08007000
 80004c0:	20000118 	.word	0x20000118
 80004c4:	080039d0 	.word	0x080039d0
 80004c8:	080039dc 	.word	0x080039dc
 80004cc:	08003a04 	.word	0x08003a04
 80004d0:	08003a10 	.word	0x08003a10
 80004d4:	08003a30 	.word	0x08003a30
 80004d8:	08003a3c 	.word	0x08003a3c
 80004dc:	08003a64 	.word	0x08003a64
 80004e0:	08003a70 	.word	0x08003a70
 80004e4:	08003a94 	.word	0x08003a94
 80004e8:	20000090 	.word	0x20000090

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b097      	sub	sp, #92	; 0x5c
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2428      	movs	r4, #40	; 0x28
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2330      	movs	r3, #48	; 0x30
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 faeb 	bl	8002ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2318      	movs	r3, #24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fae3 	bl	8002ad8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	0018      	movs	r0, r3
 8000516:	2314      	movs	r3, #20
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f002 fadc 	bl	8002ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	0021      	movs	r1, r4
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2202      	movs	r2, #2
 8000526:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2201      	movs	r2, #1
 800052c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2210      	movs	r2, #16
 8000532:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	187b      	adds	r3, r7, r1
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fef7 	bl	8001330 <HAL_RCC_OscConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000546:	f000 f891 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	2118      	movs	r1, #24
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2207      	movs	r2, #7
 8000550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2100      	movs	r1, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f9ff 	bl	800196c <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000572:	f000 f87b 	bl	800066c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fb37 	bl	8001bf8 <HAL_RCCEx_PeriphCLKConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800058e:	f000 f86d 	bl	800066c <Error_Handler>
  }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b017      	add	sp, #92	; 0x5c
 8000598:	bd90      	pop	{r4, r7, pc}
	...

0800059c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART1_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a8:	2296      	movs	r2, #150	; 0x96
 80005aa:	0192      	lsls	r2, r2, #6
 80005ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_USART1_UART_Init+0x58>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fbe7 	bl	8001db4 <HAL_UART_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f83f 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000090 	.word	0x20000090
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fa64 	bl	8002ad8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_GPIO_Init+0x6c>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_GPIO_Init+0x6c>)
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0289      	lsls	r1, r1, #10
 800061a:	430a      	orrs	r2, r1
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_GPIO_Init+0x6c>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	029b      	lsls	r3, r3, #10
 8000626:	4013      	ands	r3, r2
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2200      	movs	r2, #0
 8000632:	2102      	movs	r1, #2
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fe43 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2202      	movs	r2, #2
 800063e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2201      	movs	r2, #1
 8000644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fcc0 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b006      	add	sp, #24
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	e7fe      	b.n	8000674 <Error_Handler+0x8>
	...

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	619a      	str	r2, [r3, #24]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	69da      	ldr	r2, [r3, #28]
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0549      	lsls	r1, r1, #21
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_MspInit+0x44>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	055b      	lsls	r3, r3, #21
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	2414      	movs	r4, #20
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 fa00 	bl	8002ad8 <memset>
  if(huart->Instance==USART1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <HAL_UART_MspInit+0x94>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d133      	bne.n	800074a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	01c9      	lsls	r1, r1, #7
 80006ec:	430a      	orrs	r2, r1
 80006ee:	619a      	str	r2, [r3, #24]
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4013      	ands	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0x98>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x98>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0289      	lsls	r1, r1, #10
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_UART_MspInit+0x98>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	029b      	lsls	r3, r3, #10
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	22c0      	movs	r2, #192	; 0xc0
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2202      	movs	r2, #2
 8000728:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2203      	movs	r2, #3
 8000734:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	187a      	adds	r2, r7, r1
 800073e:	2390      	movs	r3, #144	; 0x90
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fc4b 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b00b      	add	sp, #44	; 0x2c
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f92e 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e00a      	b.n	80007b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800079c:	e000      	b.n	80007a0 <_read+0x16>
 800079e:	bf00      	nop
 80007a0:	0001      	movs	r1, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	60ba      	str	r2, [r7, #8]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbf0      	blt.n	800079c <_read+0x12>
  }

  return len;
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b006      	add	sp, #24
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e009      	b.n	80007ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	e000      	b.n	80007e4 <_write+0x20>
 80007e2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbf1      	blt.n	80007d6 <_write+0x12>
  }
  return len;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b006      	add	sp, #24
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_close>:

int _close(int file)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000804:	2301      	movs	r3, #1
 8000806:	425b      	negs	r3, r3
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0192      	lsls	r2, r2, #6
 8000820:	605a      	str	r2, [r3, #4]
  return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}

0800082c <_isatty>:

int _isatty(int file)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000834:	2301      	movs	r3, #1
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}

0800083e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b004      	add	sp, #16
 8000852:	bd80      	pop	{r7, pc}

08000854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <_sbrk+0x5c>)
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <_sbrk+0x60>)
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <_sbrk+0x64>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <_sbrk+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	429a      	cmp	r2, r3
 8000882:	d207      	bcs.n	8000894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000884:	f002 f97e 	bl	8002b84 <__errno>
 8000888:	0003      	movs	r3, r0
 800088a:	220c      	movs	r2, #12
 800088c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088e:	2301      	movs	r3, #1
 8000890:	425b      	negs	r3, r3
 8000892:	e009      	b.n	80008a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	18d2      	adds	r2, r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <_sbrk+0x64>)
 80008a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b006      	add	sp, #24
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20001800 	.word	0x20001800
 80008b4:	00000400 	.word	0x00000400
 80008b8:	2000011c 	.word	0x2000011c
 80008bc:	20000298 	.word	0x20000298

080008c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d0:	f7ff fff6 	bl	80008c0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <LoopForever+0x6>)
    LDR R1, [R0]
 80008d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <LoopForever+0xa>)
    CMP R1, R2
 80008dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008de:	d105      	bne.n	80008ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008e2:	4912      	ldr	r1, [pc, #72]	; (800092c <LoopForever+0x12>)
    STR R1, [R0]
 80008e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008e8:	4912      	ldr	r1, [pc, #72]	; (8000934 <LoopForever+0x1a>)
    STR R1, [R0]
 80008ea:	6001      	str	r1, [r0, #0]

080008ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <LoopForever+0x1e>)
  ldr r1, =_edata
 80008ee:	4913      	ldr	r1, [pc, #76]	; (800093c <LoopForever+0x22>)
  ldr r2, =_sidata
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <LoopForever+0x26>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000904:	4c10      	ldr	r4, [pc, #64]	; (8000948 <LoopForever+0x2e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000912:	f002 f93d 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fd41 	bl	800039c <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000920:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000924:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000928:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800092c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000930:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000934:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000940:	08003b30 	.word	0x08003b30
  ldr r2, =_sbss
 8000944:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000948:	20000294 	.word	0x20000294

0800094c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_IRQHandler>
	...

08000950 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_Init+0x24>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_Init+0x24>)
 800095a:	2110      	movs	r1, #16
 800095c:	430a      	orrs	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f809 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000966:	f7ff fe87 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_InitTick+0x5c>)
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_InitTick+0x60>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	23fa      	movs	r3, #250	; 0xfa
 800098c:	0098      	lsls	r0, r3, #2
 800098e:	f7ff fbcd 	bl	800012c <__udivsi3>
 8000992:	0003      	movs	r3, r0
 8000994:	0019      	movs	r1, r3
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff fbc8 	bl	800012c <__udivsi3>
 800099c:	0003      	movs	r3, r0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f905 	bl	8000bae <HAL_SYSTICK_Config>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e00f      	b.n	80009cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d80b      	bhi.n	80009ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	2301      	movs	r3, #1
 80009b6:	425b      	negs	r3, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f8e2 	bl	8000b84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_InitTick+0x64>)
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b003      	add	sp, #12
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x1c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	001a      	movs	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x20>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	18d2      	adds	r2, r2, r3
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_IncTick+0x20>)
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000120 	.word	0x20000120

08000a04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <HAL_GetTick+0x10>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000120 	.word	0x20000120

08000a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a20:	f7ff fff0 	bl	8000a04 <HAL_GetTick>
 8000a24:	0003      	movs	r3, r0
 8000a26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	d005      	beq.n	8000a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_Delay+0x44>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	001a      	movs	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	f7ff ffe0 	bl	8000a04 <HAL_GetTick>
 8000a44:	0002      	movs	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8f7      	bhi.n	8000a40 <HAL_Delay+0x28>
  {
  }
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000008 	.word	0x20000008

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b7f      	cmp	r3, #127	; 0x7f
 8000a74:	d828      	bhi.n	8000ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	589b      	ldr	r3, [r3, r2]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	; 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ac6:	e031      	b.n	8000b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0019      	movs	r1, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3306      	adds	r3, #6
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	3304      	adds	r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1dfa      	adds	r2, r7, #7
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	2203      	movs	r2, #3
 8000aea:	400a      	ands	r2, r1
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	21ff      	movs	r1, #255	; 0xff
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	401a      	ands	r2, r3
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	2303      	movs	r3, #3
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001c      	movs	r4, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4023      	ands	r3, r4
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	3306      	adds	r3, #6
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	3304      	adds	r3, #4
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	045b      	lsls	r3, r3, #17
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d301      	bcc.n	8000b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b50:	2301      	movs	r3, #1
 8000b52:	e010      	b.n	8000b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SysTick_Config+0x44>)
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2103      	movs	r1, #3
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff7c 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x44>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	210f      	movs	r1, #15
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ffbf 	bl	8000b3c <SysTick_Config>
 8000bbe:	0003      	movs	r3, r0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	603a      	str	r2, [r7, #0]
 8000bd4:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bd6:	2317      	movs	r3, #23
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000bde:	2316      	movs	r3, #22
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000be6:	2315      	movs	r3, #21
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_FLASH_Program+0x120>)
 8000bf0:	7e1b      	ldrb	r3, [r3, #24]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_FLASH_Program+0x32>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e072      	b.n	8000ce0 <HAL_FLASH_Program+0x118>
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HAL_FLASH_Program+0x120>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c00:	2317      	movs	r3, #23
 8000c02:	18fe      	adds	r6, r7, r3
 8000c04:	4b39      	ldr	r3, [pc, #228]	; (8000cec <HAL_FLASH_Program+0x124>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f8ce 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000c10:	2317      	movs	r3, #23
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d15c      	bne.n	8000cd4 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d104      	bne.n	8000c2a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c20:	2315      	movs	r3, #21
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e00b      	b.n	8000c42 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d104      	bne.n	8000c3a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c30:	2315      	movs	r3, #21
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2202      	movs	r2, #2
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e003      	b.n	8000c42 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c3a:	2315      	movs	r3, #21
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c42:	2316      	movs	r3, #22
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e039      	b.n	8000cc0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c4c:	2116      	movs	r1, #22
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	005a      	lsls	r2, r3, #1
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	18d0      	adds	r0, r2, r3
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	001a      	movs	r2, r3
 8000c60:	3a20      	subs	r2, #32
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	db03      	blt.n	8000c6e <HAL_FLASH_Program+0xa6>
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	40d1      	lsrs	r1, r2
 8000c6a:	000c      	movs	r4, r1
 8000c6c:	e008      	b.n	8000c80 <HAL_FLASH_Program+0xb8>
 8000c6e:	2220      	movs	r2, #32
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	40d9      	lsrs	r1, r3
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	4314      	orrs	r4, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	40da      	lsrs	r2, r3
 8000c84:	0015      	movs	r5, r2
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	0019      	movs	r1, r3
 8000c8a:	f000 f871 	bl	8000d70 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c8e:	2317      	movs	r3, #23
 8000c90:	18fe      	adds	r6, r7, r3
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_FLASH_Program+0x124>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 f887 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_FLASH_Program+0x128>)
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_FLASH_Program+0x128>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000caa:	2317      	movs	r3, #23
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10e      	bne.n	8000cd2 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000cb4:	2116      	movs	r1, #22
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	2316      	movs	r3, #22
 8000cc2:	18fa      	adds	r2, r7, r3
 8000cc4:	2315      	movs	r3, #21
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3bd      	bcc.n	8000c4c <HAL_FLASH_Program+0x84>
 8000cd0:	e000      	b.n	8000cd4 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000cd2:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <HAL_FLASH_Program+0x120>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	761a      	strb	r2, [r3, #24]

  return status;
 8000cda:	2317      	movs	r3, #23
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	781b      	ldrb	r3, [r3, #0]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b007      	add	sp, #28
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	20000128 	.word	0x20000128
 8000cec:	0000c350 	.word	0x0000c350
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4013      	ands	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_FLASH_Unlock+0x44>)
 8000d0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_FLASH_Unlock+0x48>)
 8000d14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d002      	beq.n	8000d26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40022000 	.word	0x40022000
 8000d38:	45670123 	.word	0x45670123
 8000d3c:	cdef89ab 	.word	0xcdef89ab

08000d40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_FLASH_Lock+0x18>)
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_FLASH_Lock+0x18>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_FLASH_GetError+0x10>)
 8000d62:	69db      	ldr	r3, [r3, #28]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000128 	.word	0x20000128

08000d70 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	000a      	movs	r2, r1
 8000d7a:	1cbb      	adds	r3, r7, #2
 8000d7c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <FLASH_Program_HalfWord+0x30>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <FLASH_Program_HalfWord+0x34>)
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <FLASH_Program_HalfWord+0x34>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	1cba      	adds	r2, r7, #2
 8000d94:	8812      	ldrh	r2, [r2, #0]
 8000d96:	801a      	strh	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000128 	.word	0x20000128
 8000da4:	40022000 	.word	0x40022000

08000da8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fe28 	bl	8000a04 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000db8:	e00f      	b.n	8000dda <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	d00c      	beq.n	8000dda <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <FLASH_WaitForLastOperation+0x2e>
 8000dc6:	f7ff fe1d 	bl	8000a04 <HAL_GetTick>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d201      	bcs.n	8000dda <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e01f      	b.n	8000e1a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <FLASH_WaitForLastOperation+0x7c>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d0e9      	beq.n	8000dba <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <FLASH_WaitForLastOperation+0x7c>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2220      	movs	r2, #32
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b20      	cmp	r3, #32
 8000df0:	d102      	bne.n	8000df8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <FLASH_WaitForLastOperation+0x7c>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <FLASH_WaitForLastOperation+0x7c>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d005      	beq.n	8000e10 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <FLASH_WaitForLastOperation+0x7c>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d103      	bne.n	8000e18 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e10:	f000 f80a 	bl	8000e28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40022000 	.word	0x40022000

08000e28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <FLASH_SetErrorCode+0x58>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2210      	movs	r2, #16
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d109      	bne.n	8000e52 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <FLASH_SetErrorCode+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	2202      	movs	r2, #2
 8000e44:	431a      	orrs	r2, r3
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <FLASH_SetErrorCode+0x5c>)
 8000e48:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <FLASH_SetErrorCode+0x58>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2204      	movs	r2, #4
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d109      	bne.n	8000e72 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <FLASH_SetErrorCode+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2201      	movs	r2, #1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <FLASH_SetErrorCode+0x5c>)
 8000e68:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <FLASH_SetErrorCode+0x58>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
}  
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40022000 	.word	0x40022000
 8000e84:	20000128 	.word	0x20000128

08000e88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_FLASHEx_Erase+0xe0>)
 8000ea0:	7e1b      	ldrb	r3, [r3, #24]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d101      	bne.n	8000eaa <HAL_FLASHEx_Erase+0x22>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e05a      	b.n	8000f60 <HAL_FLASHEx_Erase+0xd8>
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_FLASHEx_Erase+0xe0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d116      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_FLASHEx_Erase+0xe4>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff ff74 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d147      	bne.n	8000f54 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000ec4:	f000 f856 	bl	8000f74 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fc      	adds	r4, r7, r3
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <HAL_FLASHEx_Erase+0xe4>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff ff6a 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_FLASHEx_Erase+0xe8>)
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_FLASHEx_Erase+0xe8>)
 8000ede:	2104      	movs	r1, #4
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	e036      	b.n	8000f54 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_FLASHEx_Erase+0xe4>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d130      	bne.n	8000f54 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	e01f      	b.n	8000f42 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f84d 	bl	8000fa4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f0a:	250f      	movs	r5, #15
 8000f0c:	197c      	adds	r4, r7, r5
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_FLASHEx_Erase+0xe4>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff49 	bl	8000da8 <FLASH_WaitForLastOperation>
 8000f16:	0003      	movs	r3, r0
 8000f18:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_FLASHEx_Erase+0xe8>)
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_FLASHEx_Erase+0xe8>)
 8000f20:	2102      	movs	r1, #2
 8000f22:	438a      	bics	r2, r1
 8000f24:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000f26:	197b      	adds	r3, r7, r5
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	601a      	str	r2, [r3, #0]
            break;
 8000f34:	e00e      	b.n	8000f54 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	4463      	add	r3, ip
 8000f40:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	029a      	lsls	r2, r3, #10
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3d6      	bcc.n	8000f02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_FLASHEx_Erase+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]

  return status;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	0000c350 	.word	0x0000c350
 8000f70:	40022000 	.word	0x40022000

08000f74 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <FLASH_MassErase+0x28>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <FLASH_MassErase+0x2c>)
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <FLASH_MassErase+0x2c>)
 8000f84:	2104      	movs	r1, #4
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <FLASH_MassErase+0x2c>)
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <FLASH_MassErase+0x2c>)
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	430a      	orrs	r2, r1
 8000f94:	611a      	str	r2, [r3, #16]
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <FLASH_PageErase+0x34>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <FLASH_PageErase+0x38>)
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <FLASH_PageErase+0x38>)
 8000fb8:	2102      	movs	r1, #2
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <FLASH_PageErase+0x38>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <FLASH_PageErase+0x38>)
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <FLASH_PageErase+0x38>)
 8000fca:	2140      	movs	r1, #64	; 0x40
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	611a      	str	r2, [r3, #16]
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000128 	.word	0x20000128
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e14f      	b.n	8001290 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x28>
 8001006:	e140      	b.n	800128a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	2201      	movs	r2, #1
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2207      	movs	r2, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2107      	movs	r1, #7
 80010f6:	400b      	ands	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	6939      	ldr	r1, [r7, #16]
 8001110:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x174>
 8001152:	e09a      	b.n	800128a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	589b      	ldr	r3, [r3, r2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	2390      	movs	r3, #144	; 0x90
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	429a      	cmp	r2, r3
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x1e2>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x1de>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x1da>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011c2:	2300      	movs	r3, #0
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	2103      	movs	r1, #3
 80011c8:	400a      	ands	r2, r1
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	035b      	lsls	r3, r3, #13
 80011fa:	4013      	ands	r3, r2
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	039b      	lsls	r3, r3, #14
 8001224:	4013      	ands	r3, r2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	4013      	ands	r3, r2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e13      	subs	r3, r2, #0
 800129a:	d000      	beq.n	800129e <HAL_GPIO_Init+0x2be>
 800129c:	e6a8      	b.n	8000ff0 <HAL_GPIO_Init+0x10>
  } 
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b006      	add	sp, #24
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	0008      	movs	r0, r1
 80012ca:	0011      	movs	r1, r2
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	1c02      	adds	r2, r0, #0
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	1c7b      	adds	r3, r7, #1
 80012d4:	1c0a      	adds	r2, r1, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	1c7b      	adds	r3, r7, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	000a      	movs	r2, r1
 8001304:	1cbb      	adds	r3, r7, #2
 8001306:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	1cb9      	adds	r1, r7, #2
 800131e:	8809      	ldrh	r1, [r1, #0]
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b004      	add	sp, #16
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e305      	b.n	800194e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	4013      	ands	r3, r2
 800134a:	d100      	bne.n	800134e <HAL_RCC_OscConfig+0x1e>
 800134c:	e08d      	b.n	800146a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800134e:	4bc5      	ldr	r3, [pc, #788]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	4013      	ands	r3, r2
 8001356:	2b04      	cmp	r3, #4
 8001358:	d00e      	beq.n	8001378 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800135a:	4bc2      	ldr	r3, [pc, #776]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	220c      	movs	r2, #12
 8001360:	4013      	ands	r3, r2
 8001362:	2b08      	cmp	r3, #8
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x64>
 8001366:	4bbf      	ldr	r3, [pc, #764]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	401a      	ands	r2, r3
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	429a      	cmp	r2, r3
 8001376:	d10d      	bne.n	8001394 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4bba      	ldr	r3, [pc, #744]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x56>
 8001384:	e070      	b.n	8001468 <HAL_RCC_OscConfig+0x138>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d000      	beq.n	8001390 <HAL_RCC_OscConfig+0x60>
 800138e:	e06b      	b.n	8001468 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e2dc      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x7c>
 800139c:	4bb1      	ldr	r3, [pc, #708]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4bb0      	ldr	r3, [pc, #704]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0249      	lsls	r1, r1, #9
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e02f      	b.n	800140c <HAL_RCC_OscConfig+0xdc>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x9e>
 80013b4:	4bab      	ldr	r3, [pc, #684]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4baa      	ldr	r3, [pc, #680]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013ba:	49ab      	ldr	r1, [pc, #684]	; (8001668 <HAL_RCC_OscConfig+0x338>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4ba8      	ldr	r3, [pc, #672]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4ba7      	ldr	r3, [pc, #668]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013c6:	49a9      	ldr	r1, [pc, #676]	; (800166c <HAL_RCC_OscConfig+0x33c>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e01e      	b.n	800140c <HAL_RCC_OscConfig+0xdc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d10e      	bne.n	80013f4 <HAL_RCC_OscConfig+0xc4>
 80013d6:	4ba3      	ldr	r3, [pc, #652]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	02c9      	lsls	r1, r1, #11
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4b9f      	ldr	r3, [pc, #636]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0249      	lsls	r1, r1, #9
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xdc>
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80013fa:	499b      	ldr	r1, [pc, #620]	; (8001668 <HAL_RCC_OscConfig+0x338>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	4b98      	ldr	r3, [pc, #608]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001406:	4999      	ldr	r1, [pc, #612]	; (800166c <HAL_RCC_OscConfig+0x33c>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d014      	beq.n	800143e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff faf6 	bl	8000a04 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141e:	f7ff faf1 	bl	8000a04 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e28e      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0xee>
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fae1 	bl	8000a04 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fadc 	bl	8000a04 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e279      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x118>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x146>
 8001474:	e06c      	b.n	8001550 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	220c      	movs	r2, #12
 800147c:	4013      	ands	r3, r2
 800147e:	d00e      	beq.n	800149e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	220c      	movs	r2, #12
 8001486:	4013      	ands	r3, r2
 8001488:	2b08      	cmp	r3, #8
 800148a:	d11f      	bne.n	80014cc <HAL_RCC_OscConfig+0x19c>
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	401a      	ands	r2, r3
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	429a      	cmp	r2, r3
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x184>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e24c      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22f8      	movs	r2, #248	; 0xf8
 80014ba:	4393      	bics	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e041      	b.n	8001550 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d024      	beq.n	800151e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b62      	ldr	r3, [pc, #392]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014da:	2101      	movs	r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa90 	bl	8000a04 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fa8b 	bl	8000a04 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e228      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d0f1      	beq.n	80014ea <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	22f8      	movs	r2, #248	; 0xf8
 800150c:	4393      	bics	r3, r2
 800150e:	0019      	movs	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	00da      	lsls	r2, r3, #3
 8001516:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001524:	2101      	movs	r1, #1
 8001526:	438a      	bics	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fa6b 	bl	8000a04 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fa66 	bl	8000a04 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e203      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d1f1      	bne.n	8001534 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2208      	movs	r2, #8
 8001556:	4013      	ands	r3, r2
 8001558:	d036      	beq.n	80015c8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fa49 	bl	8000a04 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fa44 	bl	8000a04 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1e1      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d0f1      	beq.n	8001578 <HAL_RCC_OscConfig+0x248>
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800159c:	2101      	movs	r1, #1
 800159e:	438a      	bics	r2, r1
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa2f 	bl	8000a04 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fa2a 	bl	8000a04 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1c7      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f1      	bne.n	80015ac <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2204      	movs	r2, #4
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2a4>
 80015d2:	e0b5      	b.n	8001740 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d4:	201f      	movs	r0, #31
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	055b      	lsls	r3, r3, #21
 80015e4:	4013      	ands	r3, r2
 80015e6:	d110      	bne.n	800160a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0549      	lsls	r1, r1, #21
 80015f2:	430a      	orrs	r2, r1
 80015f4:	61da      	str	r2, [r3, #28]
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	055b      	lsls	r3, r3, #21
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001604:	183b      	adds	r3, r7, r0
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_OscConfig+0x340>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4013      	ands	r3, r2
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_RCC_OscConfig+0x340>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_RCC_OscConfig+0x340>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0049      	lsls	r1, r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff f9ee 	bl	8000a04 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff f9e9 	bl	8000a04 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e186      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x340>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10f      	bne.n	8001674 <HAL_RCC_OscConfig+0x344>
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_RCC_OscConfig+0x334>)
 800165a:	2101      	movs	r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	621a      	str	r2, [r3, #32]
 8001660:	e036      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a0>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	fffeffff 	.word	0xfffeffff
 800166c:	fffbffff 	.word	0xfffbffff
 8001670:	40007000 	.word	0x40007000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x366>
 800167c:	4bb6      	ldr	r3, [pc, #728]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	4bb5      	ldr	r3, [pc, #724]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	621a      	str	r2, [r3, #32]
 8001688:	4bb3      	ldr	r3, [pc, #716]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	4bb2      	ldr	r3, [pc, #712]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800168e:	2104      	movs	r1, #4
 8001690:	438a      	bics	r2, r1
 8001692:	621a      	str	r2, [r3, #32]
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a0>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x388>
 800169e:	4bae      	ldr	r3, [pc, #696]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	4bad      	ldr	r3, [pc, #692]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016a4:	2104      	movs	r1, #4
 80016a6:	430a      	orrs	r2, r1
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	4bab      	ldr	r3, [pc, #684]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	4baa      	ldr	r3, [pc, #680]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	621a      	str	r2, [r3, #32]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a0>
 80016b8:	4ba7      	ldr	r3, [pc, #668]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4ba6      	ldr	r3, [pc, #664]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	4ba4      	ldr	r3, [pc, #656]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	438a      	bics	r2, r1
 80016ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff f994 	bl	8000a04 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e009      	b.n	80016f6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f98f 	bl	8000a04 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a9b      	ldr	r2, [pc, #620]	; (800195c <HAL_RCC_OscConfig+0x62c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e12b      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	4b98      	ldr	r3, [pc, #608]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2202      	movs	r2, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3b2>
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f97f 	bl	8000a04 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170a:	e009      	b.n	8001720 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff f97a 	bl	8000a04 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	4a91      	ldr	r2, [pc, #580]	; (800195c <HAL_RCC_OscConfig+0x62c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e116      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b8d      	ldr	r3, [pc, #564]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172a:	231f      	movs	r3, #31
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	4b87      	ldr	r3, [pc, #540]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800173a:	4989      	ldr	r1, [pc, #548]	; (8001960 <HAL_RCC_OscConfig+0x630>)
 800173c:	400a      	ands	r2, r1
 800173e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	4013      	ands	r3, r2
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d12a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001752:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001756:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001758:	2104      	movs	r1, #4
 800175a:	430a      	orrs	r2, r1
 800175c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800175e:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f94b 	bl	8000a04 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001774:	f7ff f946 	bl	8000a04 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0e3      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2202      	movs	r2, #2
 800178c:	4013      	ands	r3, r2
 800178e:	d0f1      	beq.n	8001774 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001790:	4b71      	ldr	r3, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	22f8      	movs	r2, #248	; 0xf8
 8001796:	4393      	bics	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	00da      	lsls	r2, r3, #3
 80017a0:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
 80017a6:	e034      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	3305      	adds	r3, #5
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017b0:	4b69      	ldr	r3, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017b6:	2104      	movs	r1, #4
 80017b8:	438a      	bics	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	22f8      	movs	r2, #248	; 0xf8
 80017c2:	4393      	bics	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	00da      	lsls	r2, r3, #3
 80017cc:	4b62      	ldr	r3, [pc, #392]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	e01e      	b.n	8001812 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d8:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017da:	2104      	movs	r1, #4
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017e0:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e4:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f90a 	bl	8000a04 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017f6:	f7ff f905 	bl	8000a04 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0a2      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f1      	bne.n	80017f6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x4ec>
 800181a:	e097      	b.n	800194c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b08      	cmp	r3, #8
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x4fa>
 8001828:	e06b      	b.n	8001902 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d14c      	bne.n	80018cc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b48      	ldr	r3, [pc, #288]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001838:	494a      	ldr	r1, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x634>)
 800183a:	400a      	ands	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff f8e1 	bl	8000a04 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f8dc 	bl	8000a04 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e079      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	4013      	ands	r3, r2
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001866:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	220f      	movs	r2, #15
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001876:	430a      	orrs	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_RCC_OscConfig+0x638>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	431a      	orrs	r2, r3
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0449      	lsls	r1, r1, #17
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f8af 	bl	8000a04 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f8aa 	bl	8000a04 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e047      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x57c>
 80018ca:	e03f      	b.n	800194c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80018d2:	4924      	ldr	r1, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x634>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f894 	bl	8000a04 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff f88f 	bl	8000a04 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e02c      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	049b      	lsls	r3, r3, #18
 80018fc:	4013      	ands	r3, r2
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5b2>
 8001900:	e024      	b.n	800194c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e01f      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x628>)
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	23c0      	movs	r3, #192	; 0xc0
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	401a      	ands	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	429a      	cmp	r2, r3
 8001928:	d10e      	bne.n	8001948 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	220f      	movs	r2, #15
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	23f0      	movs	r3, #240	; 0xf0
 800193c:	039b      	lsls	r3, r3, #14
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b008      	add	sp, #32
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40021000 	.word	0x40021000
 800195c:	00001388 	.word	0x00001388
 8001960:	efffffff 	.word	0xefffffff
 8001964:	feffffff 	.word	0xfeffffff
 8001968:	ffc27fff 	.word	0xffc27fff

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b3      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d911      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e09a      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d015      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2204      	movs	r2, #4
 80019c2:	4013      	ands	r3, r2
 80019c4:	d006      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 80019cc:	21e0      	movs	r1, #224	; 0xe0
 80019ce:	00c9      	lsls	r1, r1, #3
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	22f0      	movs	r2, #240	; 0xf0
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	d040      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d114      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06e      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	049b      	lsls	r3, r3, #18
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e062      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e05b      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2203      	movs	r2, #3
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7fe ffde 	bl	8000a04 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7fe ffd9 	bl	8000a04 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_RCC_ClockConfig+0x18c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e042      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	220c      	movs	r2, #12
 8001a68:	401a      	ands	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1ec      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d211      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x184>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e020      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_RCC_ClockConfig+0x190>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ac4:	f000 f820 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac8:	0001      	movs	r1, r0
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x188>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_RCC_ClockConfig+0x194>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	000a      	movs	r2, r1
 8001ada:	40da      	lsrs	r2, r3
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x198>)
 8001ade:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f7fe ff49 	bl	8000978 <HAL_InitTick>
  
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b004      	add	sp, #16
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	00001388 	.word	0x00001388
 8001afc:	fffff8ff 	.word	0xfffff8ff
 8001b00:	08003abc 	.word	0x08003abc
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x30>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x36>
 8001b36:	e02e      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b3a:	613b      	str	r3, [r7, #16]
      break;
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	220f      	movs	r2, #15
 8001b44:	4013      	ands	r3, r2
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	220f      	movs	r2, #15
 8001b52:	4013      	ands	r3, r2
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	401a      	ands	r2, r3
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b6e:	f7fe fadd 	bl	800012c <__udivsi3>
 8001b72:	0003      	movs	r3, r0
 8001b74:	001a      	movs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4353      	muls	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b82:	f7fe fad3 	bl	800012c <__udivsi3>
 8001b86:	0003      	movs	r3, r0
 8001b88:	001a      	movs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4353      	muls	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b98:	613b      	str	r3, [r7, #16]
      break;
 8001b9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9c:	693b      	ldr	r3, [r7, #16]
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b006      	add	sp, #24
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	08003ad4 	.word	0x08003ad4
 8001bb4:	08003ae4 	.word	0x08003ae4

08001bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bd0:	f7ff fff2 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	000b      	movs	r3, r1
}    
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003acc 	.word	0x08003acc

08001bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	4013      	ands	r3, r2
 8001c12:	d100      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c14:	e08e      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2017      	movs	r0, #23
 8001c18:	183b      	adds	r3, r7, r0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	055b      	lsls	r3, r3, #21
 8001c26:	4013      	ands	r3, r2
 8001c28:	d110      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0549      	lsls	r1, r1, #21
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	183b      	adds	r3, r7, r0
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	d11a      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c58:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	0049      	lsls	r1, r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c66:	f7fe fecd 	bl	8000a04 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	e008      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7fe fec8 	bl	8000a04 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e087      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c90:	6a1a      	ldr	r2, [r3, #32]
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d034      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d02c      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0249      	lsls	r1, r1, #9
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cce:	4936      	ldr	r1, [pc, #216]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fe8f 	bl	8000a04 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	e009      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7fe fe8a 	bl	8000a04 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e048      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d1e:	2317      	movs	r3, #23
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d2e:	4920      	ldr	r1, [pc, #128]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	2203      	movs	r2, #3
 8001d44:	4393      	bics	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	2210      	movs	r2, #16
 8001d62:	4393      	bics	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b006      	add	sp, #24
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	fffffcff 	.word	0xfffffcff
 8001da8:	fffeffff 	.word	0xfffeffff
 8001dac:	00001388 	.word	0x00001388
 8001db0:	efffffff 	.word	0xefffffff

08001db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e044      	b.n	8001e50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2278      	movs	r2, #120	; 0x78
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7fe fc71 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2224      	movs	r2, #36	; 0x24
 8001de2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8d0 	bl	8001f9c <UART_SetConfig>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e024      	b.n	8001e50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 fa03 	bl	800221c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	490d      	ldr	r1, [pc, #52]	; (8001e58 <HAL_UART_Init+0xa4>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2108      	movs	r1, #8
 8001e32:	438a      	bics	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 fa9b 	bl	8002384 <UART_CheckIdleState>
 8001e4e:	0003      	movs	r3, r0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	fffff7ff 	.word	0xfffff7ff

08001e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	1dbb      	adds	r3, r7, #6
 8001e6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d000      	beq.n	8001e76 <HAL_UART_Transmit+0x1a>
 8001e74:	e08d      	b.n	8001f92 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_UART_Transmit+0x28>
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e085      	b.n	8001f94 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d109      	bne.n	8001ea8 <HAL_UART_Transmit+0x4c>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e075      	b.n	8001f94 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2284      	movs	r2, #132	; 0x84
 8001eac:	2100      	movs	r1, #0
 8001eae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fda5 	bl	8000a04 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1dba      	adds	r2, r7, #6
 8001ec2:	2150      	movs	r1, #80	; 0x50
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1dba      	adds	r2, r7, #6
 8001ecc:	2152      	movs	r1, #82	; 0x52
 8001ece:	8812      	ldrh	r2, [r2, #0]
 8001ed0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d108      	bne.n	8001ef0 <HAL_UART_Transmit+0x94>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e003      	b.n	8001ef8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ef8:	e030      	b.n	8001f5c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	0013      	movs	r3, r2
 8001f04:	2200      	movs	r2, #0
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	f000 fae4 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e03c      	b.n	8001f94 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	881a      	ldrh	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	05d2      	lsls	r2, r2, #23
 8001f2a:	0dd2      	lsrs	r2, r2, #23
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	3302      	adds	r3, #2
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e008      	b.n	8001f4a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b292      	uxth	r2, r2
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2252      	movs	r2, #82	; 0x52
 8001f4e:	5a9b      	ldrh	r3, [r3, r2]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b299      	uxth	r1, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2252      	movs	r2, #82	; 0x52
 8001f5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2252      	movs	r2, #82	; 0x52
 8001f60:	5a9b      	ldrh	r3, [r3, r2]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1c8      	bne.n	8001efa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	0013      	movs	r3, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	f000 faad 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e005      	b.n	8001f94 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b008      	add	sp, #32
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa4:	231e      	movs	r3, #30
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a8d      	ldr	r2, [pc, #564]	; (8002200 <UART_SetConfig+0x264>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a88      	ldr	r2, [pc, #544]	; (8002204 <UART_SetConfig+0x268>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a7f      	ldr	r2, [pc, #508]	; (8002208 <UART_SetConfig+0x26c>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7b      	ldr	r2, [pc, #492]	; (800220c <UART_SetConfig+0x270>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d127      	bne.n	8002072 <UART_SetConfig+0xd6>
 8002022:	4b7b      	ldr	r3, [pc, #492]	; (8002210 <UART_SetConfig+0x274>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	2203      	movs	r2, #3
 8002028:	4013      	ands	r3, r2
 800202a:	2b03      	cmp	r3, #3
 800202c:	d00d      	beq.n	800204a <UART_SetConfig+0xae>
 800202e:	d81b      	bhi.n	8002068 <UART_SetConfig+0xcc>
 8002030:	2b02      	cmp	r3, #2
 8002032:	d014      	beq.n	800205e <UART_SetConfig+0xc2>
 8002034:	d818      	bhi.n	8002068 <UART_SetConfig+0xcc>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <UART_SetConfig+0xa4>
 800203a:	2b01      	cmp	r3, #1
 800203c:	d00a      	beq.n	8002054 <UART_SetConfig+0xb8>
 800203e:	e013      	b.n	8002068 <UART_SetConfig+0xcc>
 8002040:	231f      	movs	r3, #31
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e021      	b.n	800208e <UART_SetConfig+0xf2>
 800204a:	231f      	movs	r3, #31
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e01c      	b.n	800208e <UART_SetConfig+0xf2>
 8002054:	231f      	movs	r3, #31
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2204      	movs	r2, #4
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e017      	b.n	800208e <UART_SetConfig+0xf2>
 800205e:	231f      	movs	r3, #31
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2208      	movs	r2, #8
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e012      	b.n	800208e <UART_SetConfig+0xf2>
 8002068:	231f      	movs	r3, #31
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2210      	movs	r2, #16
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e00d      	b.n	800208e <UART_SetConfig+0xf2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a67      	ldr	r2, [pc, #412]	; (8002214 <UART_SetConfig+0x278>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d104      	bne.n	8002086 <UART_SetConfig+0xea>
 800207c:	231f      	movs	r3, #31
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e003      	b.n	800208e <UART_SetConfig+0xf2>
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2210      	movs	r2, #16
 800208c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	429a      	cmp	r2, r3
 8002098:	d15c      	bne.n	8002154 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800209a:	231f      	movs	r3, #31
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d015      	beq.n	80020d0 <UART_SetConfig+0x134>
 80020a4:	dc18      	bgt.n	80020d8 <UART_SetConfig+0x13c>
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00d      	beq.n	80020c6 <UART_SetConfig+0x12a>
 80020aa:	dc15      	bgt.n	80020d8 <UART_SetConfig+0x13c>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <UART_SetConfig+0x11a>
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d005      	beq.n	80020c0 <UART_SetConfig+0x124>
 80020b4:	e010      	b.n	80020d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020b6:	f7ff fd89 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80020ba:	0003      	movs	r3, r0
 80020bc:	61bb      	str	r3, [r7, #24]
        break;
 80020be:	e012      	b.n	80020e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <UART_SetConfig+0x27c>)
 80020c2:	61bb      	str	r3, [r7, #24]
        break;
 80020c4:	e00f      	b.n	80020e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020c6:	f7ff fd1f 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
        break;
 80020ce:	e00a      	b.n	80020e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	61bb      	str	r3, [r7, #24]
        break;
 80020d6:	e006      	b.n	80020e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020dc:	231e      	movs	r3, #30
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
        break;
 80020e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d100      	bne.n	80020ee <UART_SetConfig+0x152>
 80020ec:	e07a      	b.n	80021e4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	005a      	lsls	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	18d2      	adds	r2, r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0019      	movs	r1, r3
 8002100:	0010      	movs	r0, r2
 8002102:	f7fe f813 	bl	800012c <__udivsi3>
 8002106:	0003      	movs	r3, r0
 8002108:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d91c      	bls.n	800214a <UART_SetConfig+0x1ae>
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	429a      	cmp	r2, r3
 8002118:	d217      	bcs.n	800214a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	b29a      	uxth	r2, r3
 800211e:	200e      	movs	r0, #14
 8002120:	183b      	adds	r3, r7, r0
 8002122:	210f      	movs	r1, #15
 8002124:	438a      	bics	r2, r1
 8002126:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	2207      	movs	r2, #7
 8002130:	4013      	ands	r3, r2
 8002132:	b299      	uxth	r1, r3
 8002134:	183b      	adds	r3, r7, r0
 8002136:	183a      	adds	r2, r7, r0
 8002138:	8812      	ldrh	r2, [r2, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	183a      	adds	r2, r7, r0
 8002144:	8812      	ldrh	r2, [r2, #0]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	e04c      	b.n	80021e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800214a:	231e      	movs	r3, #30
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e047      	b.n	80021e4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b08      	cmp	r3, #8
 800215c:	d015      	beq.n	800218a <UART_SetConfig+0x1ee>
 800215e:	dc18      	bgt.n	8002192 <UART_SetConfig+0x1f6>
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00d      	beq.n	8002180 <UART_SetConfig+0x1e4>
 8002164:	dc15      	bgt.n	8002192 <UART_SetConfig+0x1f6>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <UART_SetConfig+0x1d4>
 800216a:	2b02      	cmp	r3, #2
 800216c:	d005      	beq.n	800217a <UART_SetConfig+0x1de>
 800216e:	e010      	b.n	8002192 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002170:	f7ff fd2c 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
        break;
 8002178:	e012      	b.n	80021a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <UART_SetConfig+0x27c>)
 800217c:	61bb      	str	r3, [r7, #24]
        break;
 800217e:	e00f      	b.n	80021a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002180:	f7ff fcc2 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8002184:	0003      	movs	r3, r0
 8002186:	61bb      	str	r3, [r7, #24]
        break;
 8002188:	e00a      	b.n	80021a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	61bb      	str	r3, [r7, #24]
        break;
 8002190:	e006      	b.n	80021a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002196:	231e      	movs	r3, #30
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
        break;
 800219e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01e      	beq.n	80021e4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	085a      	lsrs	r2, r3, #1
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	18d2      	adds	r2, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0019      	movs	r1, r3
 80021b6:	0010      	movs	r0, r2
 80021b8:	f7fd ffb8 	bl	800012c <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	d90a      	bls.n	80021dc <UART_SetConfig+0x240>
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	025b      	lsls	r3, r3, #9
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d205      	bcs.n	80021dc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	e003      	b.n	80021e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80021dc:	231e      	movs	r3, #30
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80021f0:	231e      	movs	r3, #30
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b008      	add	sp, #32
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	efff69f3 	.word	0xefff69f3
 8002204:	ffffcfff 	.word	0xffffcfff
 8002208:	fffff4ff 	.word	0xfffff4ff
 800220c:	40013800 	.word	0x40013800
 8002210:	40021000 	.word	0x40021000
 8002214:	40004400 	.word	0x40004400
 8002218:	007a1200 	.word	0x007a1200

0800221c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d00b      	beq.n	8002246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <UART_AdvFeatureConfig+0x144>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d00b      	beq.n	8002268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a43      	ldr	r2, [pc, #268]	; (8002364 <UART_AdvFeatureConfig+0x148>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2204      	movs	r2, #4
 800226e:	4013      	ands	r3, r2
 8002270:	d00b      	beq.n	800228a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <UART_AdvFeatureConfig+0x14c>)
 800227a:	4013      	ands	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2208      	movs	r2, #8
 8002290:	4013      	ands	r3, r2
 8002292:	d00b      	beq.n	80022ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a34      	ldr	r2, [pc, #208]	; (800236c <UART_AdvFeatureConfig+0x150>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d00b      	beq.n	80022ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <UART_AdvFeatureConfig+0x154>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2220      	movs	r2, #32
 80022d4:	4013      	ands	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a25      	ldr	r2, [pc, #148]	; (8002374 <UART_AdvFeatureConfig+0x158>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	4013      	ands	r3, r2
 80022f8:	d01d      	beq.n	8002336 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <UART_AdvFeatureConfig+0x15c>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	035b      	lsls	r3, r3, #13
 800231a:	429a      	cmp	r2, r3
 800231c:	d10b      	bne.n	8002336 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <UART_AdvFeatureConfig+0x160>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	4013      	ands	r3, r2
 800233e:	d00b      	beq.n	8002358 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <UART_AdvFeatureConfig+0x164>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]
  }
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffdffff 	.word	0xfffdffff
 8002364:	fffeffff 	.word	0xfffeffff
 8002368:	fffbffff 	.word	0xfffbffff
 800236c:	ffff7fff 	.word	0xffff7fff
 8002370:	ffffefff 	.word	0xffffefff
 8002374:	ffffdfff 	.word	0xffffdfff
 8002378:	ffefffff 	.word	0xffefffff
 800237c:	ff9fffff 	.word	0xff9fffff
 8002380:	fff7ffff 	.word	0xfff7ffff

08002384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b092      	sub	sp, #72	; 0x48
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2284      	movs	r2, #132	; 0x84
 8002390:	2100      	movs	r1, #0
 8002392:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002394:	f7fe fb36 	bl	8000a04 <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2208      	movs	r2, #8
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d12c      	bne.n	8002404 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	0391      	lsls	r1, r2, #14
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4a46      	ldr	r2, [pc, #280]	; (80024cc <UART_CheckIdleState+0x148>)
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f000 f88c 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d021      	beq.n	8002404 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c0:	f3ef 8310 	mrs	r3, PRIMASK
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ca:	2301      	movs	r3, #1
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	f383 8810 	msr	PRIMASK, r3
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	438a      	bics	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2278      	movs	r2, #120	; 0x78
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e05f      	b.n	80024c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2204      	movs	r2, #4
 800240c:	4013      	ands	r3, r2
 800240e:	2b04      	cmp	r3, #4
 8002410:	d146      	bne.n	80024a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	03d1      	lsls	r1, r2, #15
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <UART_CheckIdleState+0x148>)
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	f000 f858 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d03b      	beq.n	80024a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002428:	f3ef 8310 	mrs	r3, PRIMASK
 800242c:	60fb      	str	r3, [r7, #12]
  return(result);
 800242e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f383 8810 	msr	PRIMASK, r3
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4921      	ldr	r1, [pc, #132]	; (80024d0 <UART_CheckIdleState+0x14c>)
 800244a:	400a      	ands	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245a:	f3ef 8310 	mrs	r3, PRIMASK
 800245e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002460:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
 8002464:	2301      	movs	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f383 8810 	msr	PRIMASK, r3
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	438a      	bics	r2, r1
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f383 8810 	msr	PRIMASK, r3
}
 800248a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	2120      	movs	r1, #32
 8002492:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2278      	movs	r2, #120	; 0x78
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e011      	b.n	80024c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	2120      	movs	r1, #32
 80024ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2278      	movs	r2, #120	; 0x78
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b010      	add	sp, #64	; 0x40
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	01ffffff 	.word	0x01ffffff
 80024d0:	fffffedf 	.word	0xfffffedf

080024d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e4:	e04b      	b.n	800257e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3301      	adds	r3, #1
 80024ea:	d048      	beq.n	800257e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7fe fa8a 	bl	8000a04 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <UART_WaitOnFlagUntilTimeout+0x2e>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04b      	b.n	800259e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2204      	movs	r2, #4
 800250e:	4013      	ands	r3, r2
 8002510:	d035      	beq.n	800257e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2208      	movs	r2, #8
 800251a:	4013      	ands	r3, r2
 800251c:	2b08      	cmp	r3, #8
 800251e:	d111      	bne.n	8002544 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 f83c 	bl	80025a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2284      	movs	r2, #132	; 0x84
 8002534:	2108      	movs	r1, #8
 8002536:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2278      	movs	r2, #120	; 0x78
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e02c      	b.n	800259e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	401a      	ands	r2, r3
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	429a      	cmp	r2, r3
 8002556:	d112      	bne.n	800257e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f81f 	bl	80025a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2284      	movs	r2, #132	; 0x84
 800256e:	2120      	movs	r1, #32
 8002570:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2278      	movs	r2, #120	; 0x78
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e00f      	b.n	800259e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	425a      	negs	r2, r3
 800258e:	4153      	adcs	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	001a      	movs	r2, r3
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d0a4      	beq.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	617b      	str	r3, [r7, #20]
  return(result);
 80025b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4926      	ldr	r1, [pc, #152]	; (800266c <UART_EndRxTransfer+0xc4>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8310 	mrs	r3, PRIMASK
 80025e6:	623b      	str	r3, [r7, #32]
  return(result);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f383 8810 	msr	PRIMASK, r3
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	f383 8810 	msr	PRIMASK, r3
}
 8002612:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002618:	2b01      	cmp	r3, #1
 800261a:	d118      	bne.n	800264e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8310 	mrs	r3, PRIMASK
 8002620:	60bb      	str	r3, [r7, #8]
  return(result);
 8002622:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	2301      	movs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2110      	movs	r1, #16
 800263e:	438a      	bics	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	2120      	movs	r1, #32
 8002654:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b00e      	add	sp, #56	; 0x38
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	fffffedf 	.word	0xfffffedf

08002670 <std>:
 8002670:	2300      	movs	r3, #0
 8002672:	b510      	push	{r4, lr}
 8002674:	0004      	movs	r4, r0
 8002676:	6003      	str	r3, [r0, #0]
 8002678:	6043      	str	r3, [r0, #4]
 800267a:	6083      	str	r3, [r0, #8]
 800267c:	8181      	strh	r1, [r0, #12]
 800267e:	6643      	str	r3, [r0, #100]	; 0x64
 8002680:	0019      	movs	r1, r3
 8002682:	81c2      	strh	r2, [r0, #14]
 8002684:	6103      	str	r3, [r0, #16]
 8002686:	6143      	str	r3, [r0, #20]
 8002688:	6183      	str	r3, [r0, #24]
 800268a:	2208      	movs	r2, #8
 800268c:	305c      	adds	r0, #92	; 0x5c
 800268e:	f000 fa23 	bl	8002ad8 <memset>
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <std+0x38>)
 8002694:	6224      	str	r4, [r4, #32]
 8002696:	6263      	str	r3, [r4, #36]	; 0x24
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <std+0x3c>)
 800269a:	62a3      	str	r3, [r4, #40]	; 0x28
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <std+0x40>)
 800269e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <std+0x44>)
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	080028f5 	.word	0x080028f5
 80026ac:	0800291d 	.word	0x0800291d
 80026b0:	08002955 	.word	0x08002955
 80026b4:	08002981 	.word	0x08002981

080026b8 <stdio_exit_handler>:
 80026b8:	b510      	push	{r4, lr}
 80026ba:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <stdio_exit_handler+0x10>)
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <stdio_exit_handler+0x14>)
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <stdio_exit_handler+0x18>)
 80026c0:	f000 f86c 	bl	800279c <_fwalk_sglue>
 80026c4:	bd10      	pop	{r4, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	08003739 	.word	0x08003739
 80026d0:	20000018 	.word	0x20000018

080026d4 <cleanup_stdio>:
 80026d4:	6841      	ldr	r1, [r0, #4]
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <cleanup_stdio+0x30>)
 80026d8:	b510      	push	{r4, lr}
 80026da:	0004      	movs	r4, r0
 80026dc:	4299      	cmp	r1, r3
 80026de:	d001      	beq.n	80026e4 <cleanup_stdio+0x10>
 80026e0:	f001 f82a 	bl	8003738 <_fflush_r>
 80026e4:	68a1      	ldr	r1, [r4, #8]
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <cleanup_stdio+0x34>)
 80026e8:	4299      	cmp	r1, r3
 80026ea:	d002      	beq.n	80026f2 <cleanup_stdio+0x1e>
 80026ec:	0020      	movs	r0, r4
 80026ee:	f001 f823 	bl	8003738 <_fflush_r>
 80026f2:	68e1      	ldr	r1, [r4, #12]
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <cleanup_stdio+0x38>)
 80026f6:	4299      	cmp	r1, r3
 80026f8:	d002      	beq.n	8002700 <cleanup_stdio+0x2c>
 80026fa:	0020      	movs	r0, r4
 80026fc:	f001 f81c 	bl	8003738 <_fflush_r>
 8002700:	bd10      	pop	{r4, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	20000148 	.word	0x20000148
 8002708:	200001b0 	.word	0x200001b0
 800270c:	20000218 	.word	0x20000218

08002710 <global_stdio_init.part.0>:
 8002710:	b510      	push	{r4, lr}
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <global_stdio_init.part.0+0x28>)
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <global_stdio_init.part.0+0x2c>)
 8002716:	2104      	movs	r1, #4
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <global_stdio_init.part.0+0x30>)
 800271c:	2200      	movs	r2, #0
 800271e:	f7ff ffa7 	bl	8002670 <std>
 8002722:	2201      	movs	r2, #1
 8002724:	2109      	movs	r1, #9
 8002726:	4807      	ldr	r0, [pc, #28]	; (8002744 <global_stdio_init.part.0+0x34>)
 8002728:	f7ff ffa2 	bl	8002670 <std>
 800272c:	2202      	movs	r2, #2
 800272e:	2112      	movs	r1, #18
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <global_stdio_init.part.0+0x38>)
 8002732:	f7ff ff9d 	bl	8002670 <std>
 8002736:	bd10      	pop	{r4, pc}
 8002738:	20000280 	.word	0x20000280
 800273c:	080026b9 	.word	0x080026b9
 8002740:	20000148 	.word	0x20000148
 8002744:	200001b0 	.word	0x200001b0
 8002748:	20000218 	.word	0x20000218

0800274c <__sfp_lock_acquire>:
 800274c:	b510      	push	{r4, lr}
 800274e:	4802      	ldr	r0, [pc, #8]	; (8002758 <__sfp_lock_acquire+0xc>)
 8002750:	f000 fa42 	bl	8002bd8 <__retarget_lock_acquire_recursive>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20000289 	.word	0x20000289

0800275c <__sfp_lock_release>:
 800275c:	b510      	push	{r4, lr}
 800275e:	4802      	ldr	r0, [pc, #8]	; (8002768 <__sfp_lock_release+0xc>)
 8002760:	f000 fa3b 	bl	8002bda <__retarget_lock_release_recursive>
 8002764:	bd10      	pop	{r4, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000289 	.word	0x20000289

0800276c <__sinit>:
 800276c:	b510      	push	{r4, lr}
 800276e:	0004      	movs	r4, r0
 8002770:	f7ff ffec 	bl	800274c <__sfp_lock_acquire>
 8002774:	6a23      	ldr	r3, [r4, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <__sinit+0x14>
 800277a:	f7ff ffef 	bl	800275c <__sfp_lock_release>
 800277e:	bd10      	pop	{r4, pc}
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__sinit+0x28>)
 8002782:	6223      	str	r3, [r4, #32]
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__sinit+0x2c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f6      	bne.n	800277a <__sinit+0xe>
 800278c:	f7ff ffc0 	bl	8002710 <global_stdio_init.part.0>
 8002790:	e7f3      	b.n	800277a <__sinit+0xe>
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	080026d5 	.word	0x080026d5
 8002798:	20000280 	.word	0x20000280

0800279c <_fwalk_sglue>:
 800279c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800279e:	0014      	movs	r4, r2
 80027a0:	2600      	movs	r6, #0
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	9101      	str	r1, [sp, #4]
 80027a6:	68a5      	ldr	r5, [r4, #8]
 80027a8:	6867      	ldr	r7, [r4, #4]
 80027aa:	3f01      	subs	r7, #1
 80027ac:	d504      	bpl.n	80027b8 <_fwalk_sglue+0x1c>
 80027ae:	6824      	ldr	r4, [r4, #0]
 80027b0:	2c00      	cmp	r4, #0
 80027b2:	d1f8      	bne.n	80027a6 <_fwalk_sglue+0xa>
 80027b4:	0030      	movs	r0, r6
 80027b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027b8:	89ab      	ldrh	r3, [r5, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d908      	bls.n	80027d0 <_fwalk_sglue+0x34>
 80027be:	220e      	movs	r2, #14
 80027c0:	5eab      	ldrsh	r3, [r5, r2]
 80027c2:	3301      	adds	r3, #1
 80027c4:	d004      	beq.n	80027d0 <_fwalk_sglue+0x34>
 80027c6:	0029      	movs	r1, r5
 80027c8:	9800      	ldr	r0, [sp, #0]
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	4798      	blx	r3
 80027ce:	4306      	orrs	r6, r0
 80027d0:	3568      	adds	r5, #104	; 0x68
 80027d2:	e7ea      	b.n	80027aa <_fwalk_sglue+0xe>

080027d4 <iprintf>:
 80027d4:	b40f      	push	{r0, r1, r2, r3}
 80027d6:	b507      	push	{r0, r1, r2, lr}
 80027d8:	4905      	ldr	r1, [pc, #20]	; (80027f0 <iprintf+0x1c>)
 80027da:	ab04      	add	r3, sp, #16
 80027dc:	6808      	ldr	r0, [r1, #0]
 80027de:	cb04      	ldmia	r3!, {r2}
 80027e0:	6881      	ldr	r1, [r0, #8]
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	f000 fc82 	bl	80030ec <_vfiprintf_r>
 80027e8:	b003      	add	sp, #12
 80027ea:	bc08      	pop	{r3}
 80027ec:	b004      	add	sp, #16
 80027ee:	4718      	bx	r3
 80027f0:	20000064 	.word	0x20000064

080027f4 <_puts_r>:
 80027f4:	6a03      	ldr	r3, [r0, #32]
 80027f6:	b570      	push	{r4, r5, r6, lr}
 80027f8:	0005      	movs	r5, r0
 80027fa:	000e      	movs	r6, r1
 80027fc:	6884      	ldr	r4, [r0, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <_puts_r+0x12>
 8002802:	f7ff ffb3 	bl	800276c <__sinit>
 8002806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002808:	07db      	lsls	r3, r3, #31
 800280a:	d405      	bmi.n	8002818 <_puts_r+0x24>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	059b      	lsls	r3, r3, #22
 8002810:	d402      	bmi.n	8002818 <_puts_r+0x24>
 8002812:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002814:	f000 f9e0 	bl	8002bd8 <__retarget_lock_acquire_recursive>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	071b      	lsls	r3, r3, #28
 800281c:	d502      	bpl.n	8002824 <_puts_r+0x30>
 800281e:	6923      	ldr	r3, [r4, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11f      	bne.n	8002864 <_puts_r+0x70>
 8002824:	0021      	movs	r1, r4
 8002826:	0028      	movs	r0, r5
 8002828:	f000 f8f2 	bl	8002a10 <__swsetup_r>
 800282c:	2800      	cmp	r0, #0
 800282e:	d019      	beq.n	8002864 <_puts_r+0x70>
 8002830:	2501      	movs	r5, #1
 8002832:	426d      	negs	r5, r5
 8002834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002836:	07db      	lsls	r3, r3, #31
 8002838:	d405      	bmi.n	8002846 <_puts_r+0x52>
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	059b      	lsls	r3, r3, #22
 800283e:	d402      	bmi.n	8002846 <_puts_r+0x52>
 8002840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002842:	f000 f9ca 	bl	8002bda <__retarget_lock_release_recursive>
 8002846:	0028      	movs	r0, r5
 8002848:	bd70      	pop	{r4, r5, r6, pc}
 800284a:	3601      	adds	r6, #1
 800284c:	60a3      	str	r3, [r4, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da04      	bge.n	800285c <_puts_r+0x68>
 8002852:	69a2      	ldr	r2, [r4, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	dc16      	bgt.n	8002886 <_puts_r+0x92>
 8002858:	290a      	cmp	r1, #10
 800285a:	d014      	beq.n	8002886 <_puts_r+0x92>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	6022      	str	r2, [r4, #0]
 8002862:	7019      	strb	r1, [r3, #0]
 8002864:	68a3      	ldr	r3, [r4, #8]
 8002866:	7831      	ldrb	r1, [r6, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	2900      	cmp	r1, #0
 800286c:	d1ed      	bne.n	800284a <_puts_r+0x56>
 800286e:	60a3      	str	r3, [r4, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	da0f      	bge.n	8002894 <_puts_r+0xa0>
 8002874:	0028      	movs	r0, r5
 8002876:	0022      	movs	r2, r4
 8002878:	310a      	adds	r1, #10
 800287a:	f000 f887 	bl	800298c <__swbuf_r>
 800287e:	250a      	movs	r5, #10
 8002880:	3001      	adds	r0, #1
 8002882:	d1d7      	bne.n	8002834 <_puts_r+0x40>
 8002884:	e7d4      	b.n	8002830 <_puts_r+0x3c>
 8002886:	0022      	movs	r2, r4
 8002888:	0028      	movs	r0, r5
 800288a:	f000 f87f 	bl	800298c <__swbuf_r>
 800288e:	3001      	adds	r0, #1
 8002890:	d1e8      	bne.n	8002864 <_puts_r+0x70>
 8002892:	e7cd      	b.n	8002830 <_puts_r+0x3c>
 8002894:	250a      	movs	r5, #10
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	6022      	str	r2, [r4, #0]
 800289c:	701d      	strb	r5, [r3, #0]
 800289e:	e7c9      	b.n	8002834 <_puts_r+0x40>

080028a0 <puts>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <puts+0x10>)
 80028a4:	0001      	movs	r1, r0
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f7ff ffa4 	bl	80027f4 <_puts_r>
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	20000064 	.word	0x20000064

080028b4 <siprintf>:
 80028b4:	b40e      	push	{r1, r2, r3}
 80028b6:	b500      	push	{lr}
 80028b8:	490b      	ldr	r1, [pc, #44]	; (80028e8 <siprintf+0x34>)
 80028ba:	b09c      	sub	sp, #112	; 0x70
 80028bc:	ab1d      	add	r3, sp, #116	; 0x74
 80028be:	9002      	str	r0, [sp, #8]
 80028c0:	9006      	str	r0, [sp, #24]
 80028c2:	9107      	str	r1, [sp, #28]
 80028c4:	9104      	str	r1, [sp, #16]
 80028c6:	4809      	ldr	r0, [pc, #36]	; (80028ec <siprintf+0x38>)
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <siprintf+0x3c>)
 80028ca:	cb04      	ldmia	r3!, {r2}
 80028cc:	9105      	str	r1, [sp, #20]
 80028ce:	6800      	ldr	r0, [r0, #0]
 80028d0:	a902      	add	r1, sp, #8
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	f000 fae2 	bl	8002e9c <_svfiprintf_r>
 80028d8:	2200      	movs	r2, #0
 80028da:	9b02      	ldr	r3, [sp, #8]
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	b01c      	add	sp, #112	; 0x70
 80028e0:	bc08      	pop	{r3}
 80028e2:	b003      	add	sp, #12
 80028e4:	4718      	bx	r3
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	7fffffff 	.word	0x7fffffff
 80028ec:	20000064 	.word	0x20000064
 80028f0:	ffff0208 	.word	0xffff0208

080028f4 <__sread>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	000c      	movs	r4, r1
 80028f8:	250e      	movs	r5, #14
 80028fa:	5f49      	ldrsh	r1, [r1, r5]
 80028fc:	f000 f91a 	bl	8002b34 <_read_r>
 8002900:	2800      	cmp	r0, #0
 8002902:	db03      	blt.n	800290c <__sread+0x18>
 8002904:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002906:	181b      	adds	r3, r3, r0
 8002908:	6563      	str	r3, [r4, #84]	; 0x54
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	4a02      	ldr	r2, [pc, #8]	; (8002918 <__sread+0x24>)
 8002910:	4013      	ands	r3, r2
 8002912:	81a3      	strh	r3, [r4, #12]
 8002914:	e7f9      	b.n	800290a <__sread+0x16>
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	ffffefff 	.word	0xffffefff

0800291c <__swrite>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	001f      	movs	r7, r3
 8002920:	898b      	ldrh	r3, [r1, #12]
 8002922:	0005      	movs	r5, r0
 8002924:	000c      	movs	r4, r1
 8002926:	0016      	movs	r6, r2
 8002928:	05db      	lsls	r3, r3, #23
 800292a:	d505      	bpl.n	8002938 <__swrite+0x1c>
 800292c:	230e      	movs	r3, #14
 800292e:	5ec9      	ldrsh	r1, [r1, r3]
 8002930:	2200      	movs	r2, #0
 8002932:	2302      	movs	r3, #2
 8002934:	f000 f8ea 	bl	8002b0c <_lseek_r>
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <__swrite+0x34>)
 800293c:	0028      	movs	r0, r5
 800293e:	4013      	ands	r3, r2
 8002940:	81a3      	strh	r3, [r4, #12]
 8002942:	0032      	movs	r2, r6
 8002944:	230e      	movs	r3, #14
 8002946:	5ee1      	ldrsh	r1, [r4, r3]
 8002948:	003b      	movs	r3, r7
 800294a:	f000 f907 	bl	8002b5c <_write_r>
 800294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002950:	ffffefff 	.word	0xffffefff

08002954 <__sseek>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	000c      	movs	r4, r1
 8002958:	250e      	movs	r5, #14
 800295a:	5f49      	ldrsh	r1, [r1, r5]
 800295c:	f000 f8d6 	bl	8002b0c <_lseek_r>
 8002960:	89a3      	ldrh	r3, [r4, #12]
 8002962:	1c42      	adds	r2, r0, #1
 8002964:	d103      	bne.n	800296e <__sseek+0x1a>
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <__sseek+0x28>)
 8002968:	4013      	ands	r3, r2
 800296a:	81a3      	strh	r3, [r4, #12]
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	0152      	lsls	r2, r2, #5
 8002972:	4313      	orrs	r3, r2
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	6560      	str	r0, [r4, #84]	; 0x54
 8002978:	e7f8      	b.n	800296c <__sseek+0x18>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	ffffefff 	.word	0xffffefff

08002980 <__sclose>:
 8002980:	b510      	push	{r4, lr}
 8002982:	230e      	movs	r3, #14
 8002984:	5ec9      	ldrsh	r1, [r1, r3]
 8002986:	f000 f8af 	bl	8002ae8 <_close_r>
 800298a:	bd10      	pop	{r4, pc}

0800298c <__swbuf_r>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	0006      	movs	r6, r0
 8002990:	000d      	movs	r5, r1
 8002992:	0014      	movs	r4, r2
 8002994:	2800      	cmp	r0, #0
 8002996:	d004      	beq.n	80029a2 <__swbuf_r+0x16>
 8002998:	6a03      	ldr	r3, [r0, #32]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <__swbuf_r+0x16>
 800299e:	f7ff fee5 	bl	800276c <__sinit>
 80029a2:	69a3      	ldr	r3, [r4, #24]
 80029a4:	60a3      	str	r3, [r4, #8]
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	d528      	bpl.n	80029fe <__swbuf_r+0x72>
 80029ac:	6923      	ldr	r3, [r4, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d025      	beq.n	80029fe <__swbuf_r+0x72>
 80029b2:	6923      	ldr	r3, [r4, #16]
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	b2ef      	uxtb	r7, r5
 80029b8:	1ac0      	subs	r0, r0, r3
 80029ba:	6963      	ldr	r3, [r4, #20]
 80029bc:	b2ed      	uxtb	r5, r5
 80029be:	4283      	cmp	r3, r0
 80029c0:	dc05      	bgt.n	80029ce <__swbuf_r+0x42>
 80029c2:	0021      	movs	r1, r4
 80029c4:	0030      	movs	r0, r6
 80029c6:	f000 feb7 	bl	8003738 <_fflush_r>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d11d      	bne.n	8002a0a <__swbuf_r+0x7e>
 80029ce:	68a3      	ldr	r3, [r4, #8]
 80029d0:	3001      	adds	r0, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	60a3      	str	r3, [r4, #8]
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	6022      	str	r2, [r4, #0]
 80029dc:	701f      	strb	r7, [r3, #0]
 80029de:	6963      	ldr	r3, [r4, #20]
 80029e0:	4283      	cmp	r3, r0
 80029e2:	d004      	beq.n	80029ee <__swbuf_r+0x62>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	07db      	lsls	r3, r3, #31
 80029e8:	d507      	bpl.n	80029fa <__swbuf_r+0x6e>
 80029ea:	2d0a      	cmp	r5, #10
 80029ec:	d105      	bne.n	80029fa <__swbuf_r+0x6e>
 80029ee:	0021      	movs	r1, r4
 80029f0:	0030      	movs	r0, r6
 80029f2:	f000 fea1 	bl	8003738 <_fflush_r>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d107      	bne.n	8002a0a <__swbuf_r+0x7e>
 80029fa:	0028      	movs	r0, r5
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fe:	0021      	movs	r1, r4
 8002a00:	0030      	movs	r0, r6
 8002a02:	f000 f805 	bl	8002a10 <__swsetup_r>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d0d3      	beq.n	80029b2 <__swbuf_r+0x26>
 8002a0a:	2501      	movs	r5, #1
 8002a0c:	426d      	negs	r5, r5
 8002a0e:	e7f4      	b.n	80029fa <__swbuf_r+0x6e>

08002a10 <__swsetup_r>:
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <__swsetup_r+0xc4>)
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	0005      	movs	r5, r0
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	000c      	movs	r4, r1
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d004      	beq.n	8002a28 <__swsetup_r+0x18>
 8002a1e:	6a03      	ldr	r3, [r0, #32]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <__swsetup_r+0x18>
 8002a24:	f7ff fea2 	bl	800276c <__sinit>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	5ee2      	ldrsh	r2, [r4, r3]
 8002a2c:	b293      	uxth	r3, r2
 8002a2e:	0711      	lsls	r1, r2, #28
 8002a30:	d423      	bmi.n	8002a7a <__swsetup_r+0x6a>
 8002a32:	06d9      	lsls	r1, r3, #27
 8002a34:	d407      	bmi.n	8002a46 <__swsetup_r+0x36>
 8002a36:	2309      	movs	r3, #9
 8002a38:	2001      	movs	r0, #1
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	3337      	adds	r3, #55	; 0x37
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	81a3      	strh	r3, [r4, #12]
 8002a42:	4240      	negs	r0, r0
 8002a44:	bd70      	pop	{r4, r5, r6, pc}
 8002a46:	075b      	lsls	r3, r3, #29
 8002a48:	d513      	bpl.n	8002a72 <__swsetup_r+0x62>
 8002a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d008      	beq.n	8002a62 <__swsetup_r+0x52>
 8002a50:	0023      	movs	r3, r4
 8002a52:	3344      	adds	r3, #68	; 0x44
 8002a54:	4299      	cmp	r1, r3
 8002a56:	d002      	beq.n	8002a5e <__swsetup_r+0x4e>
 8002a58:	0028      	movs	r0, r5
 8002a5a:	f000 f8bf 	bl	8002bdc <_free_r>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	6363      	str	r3, [r4, #52]	; 0x34
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	4393      	bics	r3, r2
 8002a68:	81a3      	strh	r3, [r4, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6063      	str	r3, [r4, #4]
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	2308      	movs	r3, #8
 8002a74:	89a2      	ldrh	r2, [r4, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	81a3      	strh	r3, [r4, #12]
 8002a7a:	6923      	ldr	r3, [r4, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <__swsetup_r+0x88>
 8002a80:	21a0      	movs	r1, #160	; 0xa0
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	0089      	lsls	r1, r1, #2
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <__swsetup_r+0x88>
 8002a90:	0021      	movs	r1, r4
 8002a92:	0028      	movs	r0, r5
 8002a94:	f000 fea4 	bl	80037e0 <__smakebuf_r>
 8002a98:	220c      	movs	r2, #12
 8002a9a:	5ea3      	ldrsh	r3, [r4, r2]
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	b299      	uxth	r1, r3
 8002aa2:	4002      	ands	r2, r0
 8002aa4:	4203      	tst	r3, r0
 8002aa6:	d00f      	beq.n	8002ac8 <__swsetup_r+0xb8>
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60a2      	str	r2, [r4, #8]
 8002aac:	6962      	ldr	r2, [r4, #20]
 8002aae:	4252      	negs	r2, r2
 8002ab0:	61a2      	str	r2, [r4, #24]
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	6922      	ldr	r2, [r4, #16]
 8002ab6:	4282      	cmp	r2, r0
 8002ab8:	d1c4      	bne.n	8002a44 <__swsetup_r+0x34>
 8002aba:	0609      	lsls	r1, r1, #24
 8002abc:	d5c2      	bpl.n	8002a44 <__swsetup_r+0x34>
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	3801      	subs	r0, #1
 8002ac6:	e7bd      	b.n	8002a44 <__swsetup_r+0x34>
 8002ac8:	0788      	lsls	r0, r1, #30
 8002aca:	d400      	bmi.n	8002ace <__swsetup_r+0xbe>
 8002acc:	6962      	ldr	r2, [r4, #20]
 8002ace:	60a2      	str	r2, [r4, #8]
 8002ad0:	e7ef      	b.n	8002ab2 <__swsetup_r+0xa2>
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	20000064 	.word	0x20000064

08002ad8 <memset>:
 8002ad8:	0003      	movs	r3, r0
 8002ada:	1882      	adds	r2, r0, r2
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <memset+0xa>
 8002ae0:	4770      	bx	lr
 8002ae2:	7019      	strb	r1, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	e7f9      	b.n	8002adc <memset+0x4>

08002ae8 <_close_r>:
 8002ae8:	2300      	movs	r3, #0
 8002aea:	b570      	push	{r4, r5, r6, lr}
 8002aec:	4d06      	ldr	r5, [pc, #24]	; (8002b08 <_close_r+0x20>)
 8002aee:	0004      	movs	r4, r0
 8002af0:	0008      	movs	r0, r1
 8002af2:	602b      	str	r3, [r5, #0]
 8002af4:	f7fd fe82 	bl	80007fc <_close>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d103      	bne.n	8002b04 <_close_r+0x1c>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d000      	beq.n	8002b04 <_close_r+0x1c>
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000284 	.word	0x20000284

08002b0c <_lseek_r>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	0004      	movs	r4, r0
 8002b10:	0008      	movs	r0, r1
 8002b12:	0011      	movs	r1, r2
 8002b14:	001a      	movs	r2, r3
 8002b16:	2300      	movs	r3, #0
 8002b18:	4d05      	ldr	r5, [pc, #20]	; (8002b30 <_lseek_r+0x24>)
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	f7fd fe8f 	bl	800083e <_lseek>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d103      	bne.n	8002b2c <_lseek_r+0x20>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d000      	beq.n	8002b2c <_lseek_r+0x20>
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000284 	.word	0x20000284

08002b34 <_read_r>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	0004      	movs	r4, r0
 8002b38:	0008      	movs	r0, r1
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	4d05      	ldr	r5, [pc, #20]	; (8002b58 <_read_r+0x24>)
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	f7fd fe21 	bl	800078a <_read>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d103      	bne.n	8002b54 <_read_r+0x20>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d000      	beq.n	8002b54 <_read_r+0x20>
 8002b52:	6023      	str	r3, [r4, #0]
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	20000284 	.word	0x20000284

08002b5c <_write_r>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	0004      	movs	r4, r0
 8002b60:	0008      	movs	r0, r1
 8002b62:	0011      	movs	r1, r2
 8002b64:	001a      	movs	r2, r3
 8002b66:	2300      	movs	r3, #0
 8002b68:	4d05      	ldr	r5, [pc, #20]	; (8002b80 <_write_r+0x24>)
 8002b6a:	602b      	str	r3, [r5, #0]
 8002b6c:	f7fd fe2a 	bl	80007c4 <_write>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d103      	bne.n	8002b7c <_write_r+0x20>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d000      	beq.n	8002b7c <_write_r+0x20>
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000284 	.word	0x20000284

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000064 	.word	0x20000064

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	2600      	movs	r6, #0
 8002b94:	4c0c      	ldr	r4, [pc, #48]	; (8002bc8 <__libc_init_array+0x38>)
 8002b96:	4d0d      	ldr	r5, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b98:	1b64      	subs	r4, r4, r5
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	f000 fef1 	bl	8003988 <_init>
 8002ba6:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba8:	4d0a      	ldr	r5, [pc, #40]	; (8002bd4 <__libc_init_array+0x44>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	00b3      	lsls	r3, r6, #2
 8002bb6:	58eb      	ldr	r3, [r5, r3]
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	00b3      	lsls	r3, r6, #2
 8002bc0:	58eb      	ldr	r3, [r5, r3]
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	08003b28 	.word	0x08003b28
 8002bcc:	08003b28 	.word	0x08003b28
 8002bd0:	08003b2c 	.word	0x08003b2c
 8002bd4:	08003b28 	.word	0x08003b28

08002bd8 <__retarget_lock_acquire_recursive>:
 8002bd8:	4770      	bx	lr

08002bda <__retarget_lock_release_recursive>:
 8002bda:	4770      	bx	lr

08002bdc <_free_r>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	0005      	movs	r5, r0
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d010      	beq.n	8002c06 <_free_r+0x2a>
 8002be4:	1f0c      	subs	r4, r1, #4
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da00      	bge.n	8002bee <_free_r+0x12>
 8002bec:	18e4      	adds	r4, r4, r3
 8002bee:	0028      	movs	r0, r5
 8002bf0:	f000 f8e2 	bl	8002db8 <__malloc_lock>
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <_free_r+0x90>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <_free_r+0x2c>
 8002bfc:	6063      	str	r3, [r4, #4]
 8002bfe:	6014      	str	r4, [r2, #0]
 8002c00:	0028      	movs	r0, r5
 8002c02:	f000 f8e1 	bl	8002dc8 <__malloc_unlock>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d908      	bls.n	8002c1e <_free_r+0x42>
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	1821      	adds	r1, r4, r0
 8002c10:	428b      	cmp	r3, r1
 8002c12:	d1f3      	bne.n	8002bfc <_free_r+0x20>
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	1809      	adds	r1, r1, r0
 8002c1a:	6021      	str	r1, [r4, #0]
 8002c1c:	e7ee      	b.n	8002bfc <_free_r+0x20>
 8002c1e:	001a      	movs	r2, r3
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <_free_r+0x4e>
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	d9f9      	bls.n	8002c1e <_free_r+0x42>
 8002c2a:	6811      	ldr	r1, [r2, #0]
 8002c2c:	1850      	adds	r0, r2, r1
 8002c2e:	42a0      	cmp	r0, r4
 8002c30:	d10b      	bne.n	8002c4a <_free_r+0x6e>
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1809      	adds	r1, r1, r0
 8002c36:	1850      	adds	r0, r2, r1
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	d1e0      	bne.n	8002c00 <_free_r+0x24>
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	1841      	adds	r1, r0, r1
 8002c44:	6011      	str	r1, [r2, #0]
 8002c46:	6053      	str	r3, [r2, #4]
 8002c48:	e7da      	b.n	8002c00 <_free_r+0x24>
 8002c4a:	42a0      	cmp	r0, r4
 8002c4c:	d902      	bls.n	8002c54 <_free_r+0x78>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	e7d5      	b.n	8002c00 <_free_r+0x24>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	1821      	adds	r1, r4, r0
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	d103      	bne.n	8002c64 <_free_r+0x88>
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	1809      	adds	r1, r1, r0
 8002c62:	6021      	str	r1, [r4, #0]
 8002c64:	6063      	str	r3, [r4, #4]
 8002c66:	6054      	str	r4, [r2, #4]
 8002c68:	e7ca      	b.n	8002c00 <_free_r+0x24>
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	2000028c 	.word	0x2000028c

08002c70 <sbrk_aligned>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	4e0f      	ldr	r6, [pc, #60]	; (8002cb0 <sbrk_aligned+0x40>)
 8002c74:	000d      	movs	r5, r1
 8002c76:	6831      	ldr	r1, [r6, #0]
 8002c78:	0004      	movs	r4, r0
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	d102      	bne.n	8002c84 <sbrk_aligned+0x14>
 8002c7e:	f000 fe25 	bl	80038cc <_sbrk_r>
 8002c82:	6030      	str	r0, [r6, #0]
 8002c84:	0029      	movs	r1, r5
 8002c86:	0020      	movs	r0, r4
 8002c88:	f000 fe20 	bl	80038cc <_sbrk_r>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d00a      	beq.n	8002ca6 <sbrk_aligned+0x36>
 8002c90:	2303      	movs	r3, #3
 8002c92:	1cc5      	adds	r5, r0, #3
 8002c94:	439d      	bics	r5, r3
 8002c96:	42a8      	cmp	r0, r5
 8002c98:	d007      	beq.n	8002caa <sbrk_aligned+0x3a>
 8002c9a:	1a29      	subs	r1, r5, r0
 8002c9c:	0020      	movs	r0, r4
 8002c9e:	f000 fe15 	bl	80038cc <_sbrk_r>
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d101      	bne.n	8002caa <sbrk_aligned+0x3a>
 8002ca6:	2501      	movs	r5, #1
 8002ca8:	426d      	negs	r5, r5
 8002caa:	0028      	movs	r0, r5
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000290 	.word	0x20000290

08002cb4 <_malloc_r>:
 8002cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	1ccb      	adds	r3, r1, #3
 8002cba:	4393      	bics	r3, r2
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	0006      	movs	r6, r0
 8002cc0:	001f      	movs	r7, r3
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d238      	bcs.n	8002d38 <_malloc_r+0x84>
 8002cc6:	270c      	movs	r7, #12
 8002cc8:	42b9      	cmp	r1, r7
 8002cca:	d837      	bhi.n	8002d3c <_malloc_r+0x88>
 8002ccc:	0030      	movs	r0, r6
 8002cce:	f000 f873 	bl	8002db8 <__malloc_lock>
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <_malloc_r+0x100>)
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	001c      	movs	r4, r3
 8002cda:	2c00      	cmp	r4, #0
 8002cdc:	d133      	bne.n	8002d46 <_malloc_r+0x92>
 8002cde:	0039      	movs	r1, r7
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	f7ff ffc5 	bl	8002c70 <sbrk_aligned>
 8002ce6:	0004      	movs	r4, r0
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d15e      	bne.n	8002daa <_malloc_r+0xf6>
 8002cec:	9b00      	ldr	r3, [sp, #0]
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	0025      	movs	r5, r4
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	d14e      	bne.n	8002d94 <_malloc_r+0xe0>
 8002cf6:	2c00      	cmp	r4, #0
 8002cf8:	d051      	beq.n	8002d9e <_malloc_r+0xea>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	0029      	movs	r1, r5
 8002cfe:	18e3      	adds	r3, r4, r3
 8002d00:	0030      	movs	r0, r6
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	f000 fde2 	bl	80038cc <_sbrk_r>
 8002d08:	9b01      	ldr	r3, [sp, #4]
 8002d0a:	4283      	cmp	r3, r0
 8002d0c:	d147      	bne.n	8002d9e <_malloc_r+0xea>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	0030      	movs	r0, r6
 8002d12:	1aff      	subs	r7, r7, r3
 8002d14:	0039      	movs	r1, r7
 8002d16:	f7ff ffab 	bl	8002c70 <sbrk_aligned>
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d03f      	beq.n	8002d9e <_malloc_r+0xea>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	19db      	adds	r3, r3, r7
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	9b00      	ldr	r3, [sp, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d040      	beq.n	8002dae <_malloc_r+0xfa>
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	42a2      	cmp	r2, r4
 8002d30:	d133      	bne.n	8002d9a <_malloc_r+0xe6>
 8002d32:	2200      	movs	r2, #0
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	e014      	b.n	8002d62 <_malloc_r+0xae>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dac5      	bge.n	8002cc8 <_malloc_r+0x14>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	2500      	movs	r5, #0
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	0028      	movs	r0, r5
 8002d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	1bc9      	subs	r1, r1, r7
 8002d4a:	d420      	bmi.n	8002d8e <_malloc_r+0xda>
 8002d4c:	290b      	cmp	r1, #11
 8002d4e:	d918      	bls.n	8002d82 <_malloc_r+0xce>
 8002d50:	19e2      	adds	r2, r4, r7
 8002d52:	6027      	str	r7, [r4, #0]
 8002d54:	42a3      	cmp	r3, r4
 8002d56:	d112      	bne.n	8002d7e <_malloc_r+0xca>
 8002d58:	9b00      	ldr	r3, [sp, #0]
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	6863      	ldr	r3, [r4, #4]
 8002d5e:	6011      	str	r1, [r2, #0]
 8002d60:	6053      	str	r3, [r2, #4]
 8002d62:	0030      	movs	r0, r6
 8002d64:	0025      	movs	r5, r4
 8002d66:	f000 f82f 	bl	8002dc8 <__malloc_unlock>
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	350b      	adds	r5, #11
 8002d6e:	1d23      	adds	r3, r4, #4
 8002d70:	4395      	bics	r5, r2
 8002d72:	1aea      	subs	r2, r5, r3
 8002d74:	429d      	cmp	r5, r3
 8002d76:	d0e4      	beq.n	8002d42 <_malloc_r+0x8e>
 8002d78:	1b5b      	subs	r3, r3, r5
 8002d7a:	50a3      	str	r3, [r4, r2]
 8002d7c:	e7e1      	b.n	8002d42 <_malloc_r+0x8e>
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e7ec      	b.n	8002d5c <_malloc_r+0xa8>
 8002d82:	6862      	ldr	r2, [r4, #4]
 8002d84:	42a3      	cmp	r3, r4
 8002d86:	d1d5      	bne.n	8002d34 <_malloc_r+0x80>
 8002d88:	9b00      	ldr	r3, [sp, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e7e9      	b.n	8002d62 <_malloc_r+0xae>
 8002d8e:	0023      	movs	r3, r4
 8002d90:	6864      	ldr	r4, [r4, #4]
 8002d92:	e7a2      	b.n	8002cda <_malloc_r+0x26>
 8002d94:	002c      	movs	r4, r5
 8002d96:	686d      	ldr	r5, [r5, #4]
 8002d98:	e7ab      	b.n	8002cf2 <_malloc_r+0x3e>
 8002d9a:	0013      	movs	r3, r2
 8002d9c:	e7c4      	b.n	8002d28 <_malloc_r+0x74>
 8002d9e:	230c      	movs	r3, #12
 8002da0:	0030      	movs	r0, r6
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	f000 f810 	bl	8002dc8 <__malloc_unlock>
 8002da8:	e7cb      	b.n	8002d42 <_malloc_r+0x8e>
 8002daa:	6027      	str	r7, [r4, #0]
 8002dac:	e7d9      	b.n	8002d62 <_malloc_r+0xae>
 8002dae:	605b      	str	r3, [r3, #4]
 8002db0:	deff      	udf	#255	; 0xff
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	2000028c 	.word	0x2000028c

08002db8 <__malloc_lock>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <__malloc_lock+0xc>)
 8002dbc:	f7ff ff0c 	bl	8002bd8 <__retarget_lock_acquire_recursive>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000288 	.word	0x20000288

08002dc8 <__malloc_unlock>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <__malloc_unlock+0xc>)
 8002dcc:	f7ff ff05 	bl	8002bda <__retarget_lock_release_recursive>
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000288 	.word	0x20000288

08002dd8 <__ssputs_r>:
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	9203      	str	r2, [sp, #12]
 8002de0:	688e      	ldr	r6, [r1, #8]
 8002de2:	9a01      	ldr	r2, [sp, #4]
 8002de4:	0007      	movs	r7, r0
 8002de6:	000c      	movs	r4, r1
 8002de8:	680b      	ldr	r3, [r1, #0]
 8002dea:	4296      	cmp	r6, r2
 8002dec:	d831      	bhi.n	8002e52 <__ssputs_r+0x7a>
 8002dee:	898a      	ldrh	r2, [r1, #12]
 8002df0:	2190      	movs	r1, #144	; 0x90
 8002df2:	00c9      	lsls	r1, r1, #3
 8002df4:	420a      	tst	r2, r1
 8002df6:	d029      	beq.n	8002e4c <__ssputs_r+0x74>
 8002df8:	2003      	movs	r0, #3
 8002dfa:	6921      	ldr	r1, [r4, #16]
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	6963      	ldr	r3, [r4, #20]
 8002e02:	4343      	muls	r3, r0
 8002e04:	0fdd      	lsrs	r5, r3, #31
 8002e06:	18ed      	adds	r5, r5, r3
 8002e08:	9b01      	ldr	r3, [sp, #4]
 8002e0a:	9802      	ldr	r0, [sp, #8]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	181b      	adds	r3, r3, r0
 8002e10:	106d      	asrs	r5, r5, #1
 8002e12:	42ab      	cmp	r3, r5
 8002e14:	d900      	bls.n	8002e18 <__ssputs_r+0x40>
 8002e16:	001d      	movs	r5, r3
 8002e18:	0552      	lsls	r2, r2, #21
 8002e1a:	d529      	bpl.n	8002e70 <__ssputs_r+0x98>
 8002e1c:	0029      	movs	r1, r5
 8002e1e:	0038      	movs	r0, r7
 8002e20:	f7ff ff48 	bl	8002cb4 <_malloc_r>
 8002e24:	1e06      	subs	r6, r0, #0
 8002e26:	d02d      	beq.n	8002e84 <__ssputs_r+0xac>
 8002e28:	9a02      	ldr	r2, [sp, #8]
 8002e2a:	6921      	ldr	r1, [r4, #16]
 8002e2c:	f000 fd6b 	bl	8003906 <memcpy>
 8002e30:	89a2      	ldrh	r2, [r4, #12]
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <__ssputs_r+0xc0>)
 8002e34:	401a      	ands	r2, r3
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	81a3      	strh	r3, [r4, #12]
 8002e3c:	9b02      	ldr	r3, [sp, #8]
 8002e3e:	6126      	str	r6, [r4, #16]
 8002e40:	18f6      	adds	r6, r6, r3
 8002e42:	6026      	str	r6, [r4, #0]
 8002e44:	6165      	str	r5, [r4, #20]
 8002e46:	9e01      	ldr	r6, [sp, #4]
 8002e48:	1aed      	subs	r5, r5, r3
 8002e4a:	60a5      	str	r5, [r4, #8]
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	429e      	cmp	r6, r3
 8002e50:	d900      	bls.n	8002e54 <__ssputs_r+0x7c>
 8002e52:	9e01      	ldr	r6, [sp, #4]
 8002e54:	0032      	movs	r2, r6
 8002e56:	9903      	ldr	r1, [sp, #12]
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	f000 fcff 	bl	800385c <memmove>
 8002e5e:	2000      	movs	r0, #0
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	1b9b      	subs	r3, r3, r6
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	199b      	adds	r3, r3, r6
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	b005      	add	sp, #20
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	002a      	movs	r2, r5
 8002e72:	0038      	movs	r0, r7
 8002e74:	f000 fd50 	bl	8003918 <_realloc_r>
 8002e78:	1e06      	subs	r6, r0, #0
 8002e7a:	d1df      	bne.n	8002e3c <__ssputs_r+0x64>
 8002e7c:	0038      	movs	r0, r7
 8002e7e:	6921      	ldr	r1, [r4, #16]
 8002e80:	f7ff feac 	bl	8002bdc <_free_r>
 8002e84:	230c      	movs	r3, #12
 8002e86:	2001      	movs	r0, #1
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	89a2      	ldrh	r2, [r4, #12]
 8002e8c:	3334      	adds	r3, #52	; 0x34
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	4240      	negs	r0, r0
 8002e94:	e7ea      	b.n	8002e6c <__ssputs_r+0x94>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	fffffb7f 	.word	0xfffffb7f

08002e9c <_svfiprintf_r>:
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b0a1      	sub	sp, #132	; 0x84
 8002ea0:	9003      	str	r0, [sp, #12]
 8002ea2:	001d      	movs	r5, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	000f      	movs	r7, r1
 8002ea8:	0016      	movs	r6, r2
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	d511      	bpl.n	8002ed2 <_svfiprintf_r+0x36>
 8002eae:	690b      	ldr	r3, [r1, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <_svfiprintf_r+0x36>
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	f7ff fefd 	bl	8002cb4 <_malloc_r>
 8002eba:	6038      	str	r0, [r7, #0]
 8002ebc:	6138      	str	r0, [r7, #16]
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d105      	bne.n	8002ece <_svfiprintf_r+0x32>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	9a03      	ldr	r2, [sp, #12]
 8002ec6:	3801      	subs	r0, #1
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	b021      	add	sp, #132	; 0x84
 8002ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ece:	2340      	movs	r3, #64	; 0x40
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	ac08      	add	r4, sp, #32
 8002ed6:	6163      	str	r3, [r4, #20]
 8002ed8:	3320      	adds	r3, #32
 8002eda:	7663      	strb	r3, [r4, #25]
 8002edc:	3310      	adds	r3, #16
 8002ede:	76a3      	strb	r3, [r4, #26]
 8002ee0:	9507      	str	r5, [sp, #28]
 8002ee2:	0035      	movs	r5, r6
 8002ee4:	782b      	ldrb	r3, [r5, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <_svfiprintf_r+0x52>
 8002eea:	2b25      	cmp	r3, #37	; 0x25
 8002eec:	d148      	bne.n	8002f80 <_svfiprintf_r+0xe4>
 8002eee:	1bab      	subs	r3, r5, r6
 8002ef0:	9305      	str	r3, [sp, #20]
 8002ef2:	42b5      	cmp	r5, r6
 8002ef4:	d00b      	beq.n	8002f0e <_svfiprintf_r+0x72>
 8002ef6:	0032      	movs	r2, r6
 8002ef8:	0039      	movs	r1, r7
 8002efa:	9803      	ldr	r0, [sp, #12]
 8002efc:	f7ff ff6c 	bl	8002dd8 <__ssputs_r>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d100      	bne.n	8002f06 <_svfiprintf_r+0x6a>
 8002f04:	e0af      	b.n	8003066 <_svfiprintf_r+0x1ca>
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	9a05      	ldr	r2, [sp, #20]
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	6163      	str	r3, [r4, #20]
 8002f0e:	782b      	ldrb	r3, [r5, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d100      	bne.n	8002f16 <_svfiprintf_r+0x7a>
 8002f14:	e0a7      	b.n	8003066 <_svfiprintf_r+0x1ca>
 8002f16:	2201      	movs	r2, #1
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4252      	negs	r2, r2
 8002f1c:	6062      	str	r2, [r4, #4]
 8002f1e:	a904      	add	r1, sp, #16
 8002f20:	3254      	adds	r2, #84	; 0x54
 8002f22:	1852      	adds	r2, r2, r1
 8002f24:	1c6e      	adds	r6, r5, #1
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	60e3      	str	r3, [r4, #12]
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	7013      	strb	r3, [r2, #0]
 8002f2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f30:	4b55      	ldr	r3, [pc, #340]	; (8003088 <_svfiprintf_r+0x1ec>)
 8002f32:	2205      	movs	r2, #5
 8002f34:	0018      	movs	r0, r3
 8002f36:	7831      	ldrb	r1, [r6, #0]
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	f000 fcd9 	bl	80038f0 <memchr>
 8002f3e:	1c75      	adds	r5, r6, #1
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d11f      	bne.n	8002f84 <_svfiprintf_r+0xe8>
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	06d3      	lsls	r3, r2, #27
 8002f48:	d504      	bpl.n	8002f54 <_svfiprintf_r+0xb8>
 8002f4a:	2353      	movs	r3, #83	; 0x53
 8002f4c:	a904      	add	r1, sp, #16
 8002f4e:	185b      	adds	r3, r3, r1
 8002f50:	2120      	movs	r1, #32
 8002f52:	7019      	strb	r1, [r3, #0]
 8002f54:	0713      	lsls	r3, r2, #28
 8002f56:	d504      	bpl.n	8002f62 <_svfiprintf_r+0xc6>
 8002f58:	2353      	movs	r3, #83	; 0x53
 8002f5a:	a904      	add	r1, sp, #16
 8002f5c:	185b      	adds	r3, r3, r1
 8002f5e:	212b      	movs	r1, #43	; 0x2b
 8002f60:	7019      	strb	r1, [r3, #0]
 8002f62:	7833      	ldrb	r3, [r6, #0]
 8002f64:	2b2a      	cmp	r3, #42	; 0x2a
 8002f66:	d016      	beq.n	8002f96 <_svfiprintf_r+0xfa>
 8002f68:	0035      	movs	r5, r6
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	68e3      	ldr	r3, [r4, #12]
 8002f70:	782a      	ldrb	r2, [r5, #0]
 8002f72:	1c6e      	adds	r6, r5, #1
 8002f74:	3a30      	subs	r2, #48	; 0x30
 8002f76:	2a09      	cmp	r2, #9
 8002f78:	d94e      	bls.n	8003018 <_svfiprintf_r+0x17c>
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d111      	bne.n	8002fa2 <_svfiprintf_r+0x106>
 8002f7e:	e017      	b.n	8002fb0 <_svfiprintf_r+0x114>
 8002f80:	3501      	adds	r5, #1
 8002f82:	e7af      	b.n	8002ee4 <_svfiprintf_r+0x48>
 8002f84:	9b05      	ldr	r3, [sp, #20]
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	1ac0      	subs	r0, r0, r3
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4083      	lsls	r3, r0
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	002e      	movs	r6, r5
 8002f92:	6023      	str	r3, [r4, #0]
 8002f94:	e7cc      	b.n	8002f30 <_svfiprintf_r+0x94>
 8002f96:	9b07      	ldr	r3, [sp, #28]
 8002f98:	1d19      	adds	r1, r3, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	9107      	str	r1, [sp, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db01      	blt.n	8002fa6 <_svfiprintf_r+0x10a>
 8002fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fa4:	e004      	b.n	8002fb0 <_svfiprintf_r+0x114>
 8002fa6:	425b      	negs	r3, r3
 8002fa8:	60e3      	str	r3, [r4, #12]
 8002faa:	2302      	movs	r3, #2
 8002fac:	4313      	orrs	r3, r2
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	782b      	ldrb	r3, [r5, #0]
 8002fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb4:	d10a      	bne.n	8002fcc <_svfiprintf_r+0x130>
 8002fb6:	786b      	ldrb	r3, [r5, #1]
 8002fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fba:	d135      	bne.n	8003028 <_svfiprintf_r+0x18c>
 8002fbc:	9b07      	ldr	r3, [sp, #28]
 8002fbe:	3502      	adds	r5, #2
 8002fc0:	1d1a      	adds	r2, r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	9207      	str	r2, [sp, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db2b      	blt.n	8003022 <_svfiprintf_r+0x186>
 8002fca:	9309      	str	r3, [sp, #36]	; 0x24
 8002fcc:	4e2f      	ldr	r6, [pc, #188]	; (800308c <_svfiprintf_r+0x1f0>)
 8002fce:	2203      	movs	r2, #3
 8002fd0:	0030      	movs	r0, r6
 8002fd2:	7829      	ldrb	r1, [r5, #0]
 8002fd4:	f000 fc8c 	bl	80038f0 <memchr>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d006      	beq.n	8002fea <_svfiprintf_r+0x14e>
 8002fdc:	2340      	movs	r3, #64	; 0x40
 8002fde:	1b80      	subs	r0, r0, r6
 8002fe0:	4083      	lsls	r3, r0
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	7829      	ldrb	r1, [r5, #0]
 8002fec:	2206      	movs	r2, #6
 8002fee:	4828      	ldr	r0, [pc, #160]	; (8003090 <_svfiprintf_r+0x1f4>)
 8002ff0:	1c6e      	adds	r6, r5, #1
 8002ff2:	7621      	strb	r1, [r4, #24]
 8002ff4:	f000 fc7c 	bl	80038f0 <memchr>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d03c      	beq.n	8003076 <_svfiprintf_r+0x1da>
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <_svfiprintf_r+0x1f8>)
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d125      	bne.n	800304e <_svfiprintf_r+0x1b2>
 8003002:	2207      	movs	r2, #7
 8003004:	9b07      	ldr	r3, [sp, #28]
 8003006:	3307      	adds	r3, #7
 8003008:	4393      	bics	r3, r2
 800300a:	3308      	adds	r3, #8
 800300c:	9307      	str	r3, [sp, #28]
 800300e:	6963      	ldr	r3, [r4, #20]
 8003010:	9a04      	ldr	r2, [sp, #16]
 8003012:	189b      	adds	r3, r3, r2
 8003014:	6163      	str	r3, [r4, #20]
 8003016:	e764      	b.n	8002ee2 <_svfiprintf_r+0x46>
 8003018:	4343      	muls	r3, r0
 800301a:	0035      	movs	r5, r6
 800301c:	2101      	movs	r1, #1
 800301e:	189b      	adds	r3, r3, r2
 8003020:	e7a6      	b.n	8002f70 <_svfiprintf_r+0xd4>
 8003022:	2301      	movs	r3, #1
 8003024:	425b      	negs	r3, r3
 8003026:	e7d0      	b.n	8002fca <_svfiprintf_r+0x12e>
 8003028:	2300      	movs	r3, #0
 800302a:	200a      	movs	r0, #10
 800302c:	001a      	movs	r2, r3
 800302e:	3501      	adds	r5, #1
 8003030:	6063      	str	r3, [r4, #4]
 8003032:	7829      	ldrb	r1, [r5, #0]
 8003034:	1c6e      	adds	r6, r5, #1
 8003036:	3930      	subs	r1, #48	; 0x30
 8003038:	2909      	cmp	r1, #9
 800303a:	d903      	bls.n	8003044 <_svfiprintf_r+0x1a8>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0c5      	beq.n	8002fcc <_svfiprintf_r+0x130>
 8003040:	9209      	str	r2, [sp, #36]	; 0x24
 8003042:	e7c3      	b.n	8002fcc <_svfiprintf_r+0x130>
 8003044:	4342      	muls	r2, r0
 8003046:	0035      	movs	r5, r6
 8003048:	2301      	movs	r3, #1
 800304a:	1852      	adds	r2, r2, r1
 800304c:	e7f1      	b.n	8003032 <_svfiprintf_r+0x196>
 800304e:	aa07      	add	r2, sp, #28
 8003050:	9200      	str	r2, [sp, #0]
 8003052:	0021      	movs	r1, r4
 8003054:	003a      	movs	r2, r7
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_svfiprintf_r+0x1fc>)
 8003058:	9803      	ldr	r0, [sp, #12]
 800305a:	e000      	b.n	800305e <_svfiprintf_r+0x1c2>
 800305c:	bf00      	nop
 800305e:	9004      	str	r0, [sp, #16]
 8003060:	9b04      	ldr	r3, [sp, #16]
 8003062:	3301      	adds	r3, #1
 8003064:	d1d3      	bne.n	800300e <_svfiprintf_r+0x172>
 8003066:	89bb      	ldrh	r3, [r7, #12]
 8003068:	980d      	ldr	r0, [sp, #52]	; 0x34
 800306a:	065b      	lsls	r3, r3, #25
 800306c:	d400      	bmi.n	8003070 <_svfiprintf_r+0x1d4>
 800306e:	e72c      	b.n	8002eca <_svfiprintf_r+0x2e>
 8003070:	2001      	movs	r0, #1
 8003072:	4240      	negs	r0, r0
 8003074:	e729      	b.n	8002eca <_svfiprintf_r+0x2e>
 8003076:	aa07      	add	r2, sp, #28
 8003078:	9200      	str	r2, [sp, #0]
 800307a:	0021      	movs	r1, r4
 800307c:	003a      	movs	r2, r7
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <_svfiprintf_r+0x1fc>)
 8003080:	9803      	ldr	r0, [sp, #12]
 8003082:	f000 f9bf 	bl	8003404 <_printf_i>
 8003086:	e7ea      	b.n	800305e <_svfiprintf_r+0x1c2>
 8003088:	08003af4 	.word	0x08003af4
 800308c:	08003afa 	.word	0x08003afa
 8003090:	08003afe 	.word	0x08003afe
 8003094:	00000000 	.word	0x00000000
 8003098:	08002dd9 	.word	0x08002dd9

0800309c <__sfputc_r>:
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	b510      	push	{r4, lr}
 80030a0:	3b01      	subs	r3, #1
 80030a2:	6093      	str	r3, [r2, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da04      	bge.n	80030b2 <__sfputc_r+0x16>
 80030a8:	6994      	ldr	r4, [r2, #24]
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	db07      	blt.n	80030be <__sfputc_r+0x22>
 80030ae:	290a      	cmp	r1, #10
 80030b0:	d005      	beq.n	80030be <__sfputc_r+0x22>
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	1c58      	adds	r0, r3, #1
 80030b6:	6010      	str	r0, [r2, #0]
 80030b8:	7019      	strb	r1, [r3, #0]
 80030ba:	0008      	movs	r0, r1
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	f7ff fc65 	bl	800298c <__swbuf_r>
 80030c2:	0001      	movs	r1, r0
 80030c4:	e7f9      	b.n	80030ba <__sfputc_r+0x1e>

080030c6 <__sfputs_r>:
 80030c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c8:	0006      	movs	r6, r0
 80030ca:	000f      	movs	r7, r1
 80030cc:	0014      	movs	r4, r2
 80030ce:	18d5      	adds	r5, r2, r3
 80030d0:	42ac      	cmp	r4, r5
 80030d2:	d101      	bne.n	80030d8 <__sfputs_r+0x12>
 80030d4:	2000      	movs	r0, #0
 80030d6:	e007      	b.n	80030e8 <__sfputs_r+0x22>
 80030d8:	7821      	ldrb	r1, [r4, #0]
 80030da:	003a      	movs	r2, r7
 80030dc:	0030      	movs	r0, r6
 80030de:	f7ff ffdd 	bl	800309c <__sfputc_r>
 80030e2:	3401      	adds	r4, #1
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d1f3      	bne.n	80030d0 <__sfputs_r+0xa>
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030ec <_vfiprintf_r>:
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b0a1      	sub	sp, #132	; 0x84
 80030f0:	000f      	movs	r7, r1
 80030f2:	0015      	movs	r5, r2
 80030f4:	001e      	movs	r6, r3
 80030f6:	9003      	str	r0, [sp, #12]
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d004      	beq.n	8003106 <_vfiprintf_r+0x1a>
 80030fc:	6a03      	ldr	r3, [r0, #32]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <_vfiprintf_r+0x1a>
 8003102:	f7ff fb33 	bl	800276c <__sinit>
 8003106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003108:	07db      	lsls	r3, r3, #31
 800310a:	d405      	bmi.n	8003118 <_vfiprintf_r+0x2c>
 800310c:	89bb      	ldrh	r3, [r7, #12]
 800310e:	059b      	lsls	r3, r3, #22
 8003110:	d402      	bmi.n	8003118 <_vfiprintf_r+0x2c>
 8003112:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003114:	f7ff fd60 	bl	8002bd8 <__retarget_lock_acquire_recursive>
 8003118:	89bb      	ldrh	r3, [r7, #12]
 800311a:	071b      	lsls	r3, r3, #28
 800311c:	d502      	bpl.n	8003124 <_vfiprintf_r+0x38>
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d113      	bne.n	800314c <_vfiprintf_r+0x60>
 8003124:	0039      	movs	r1, r7
 8003126:	9803      	ldr	r0, [sp, #12]
 8003128:	f7ff fc72 	bl	8002a10 <__swsetup_r>
 800312c:	2800      	cmp	r0, #0
 800312e:	d00d      	beq.n	800314c <_vfiprintf_r+0x60>
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d503      	bpl.n	800313e <_vfiprintf_r+0x52>
 8003136:	2001      	movs	r0, #1
 8003138:	4240      	negs	r0, r0
 800313a:	b021      	add	sp, #132	; 0x84
 800313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313e:	89bb      	ldrh	r3, [r7, #12]
 8003140:	059b      	lsls	r3, r3, #22
 8003142:	d4f8      	bmi.n	8003136 <_vfiprintf_r+0x4a>
 8003144:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003146:	f7ff fd48 	bl	8002bda <__retarget_lock_release_recursive>
 800314a:	e7f4      	b.n	8003136 <_vfiprintf_r+0x4a>
 800314c:	2300      	movs	r3, #0
 800314e:	ac08      	add	r4, sp, #32
 8003150:	6163      	str	r3, [r4, #20]
 8003152:	3320      	adds	r3, #32
 8003154:	7663      	strb	r3, [r4, #25]
 8003156:	3310      	adds	r3, #16
 8003158:	76a3      	strb	r3, [r4, #26]
 800315a:	9607      	str	r6, [sp, #28]
 800315c:	002e      	movs	r6, r5
 800315e:	7833      	ldrb	r3, [r6, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_vfiprintf_r+0x7c>
 8003164:	2b25      	cmp	r3, #37	; 0x25
 8003166:	d148      	bne.n	80031fa <_vfiprintf_r+0x10e>
 8003168:	1b73      	subs	r3, r6, r5
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	42ae      	cmp	r6, r5
 800316e:	d00b      	beq.n	8003188 <_vfiprintf_r+0x9c>
 8003170:	002a      	movs	r2, r5
 8003172:	0039      	movs	r1, r7
 8003174:	9803      	ldr	r0, [sp, #12]
 8003176:	f7ff ffa6 	bl	80030c6 <__sfputs_r>
 800317a:	3001      	adds	r0, #1
 800317c:	d100      	bne.n	8003180 <_vfiprintf_r+0x94>
 800317e:	e0af      	b.n	80032e0 <_vfiprintf_r+0x1f4>
 8003180:	6963      	ldr	r3, [r4, #20]
 8003182:	9a05      	ldr	r2, [sp, #20]
 8003184:	189b      	adds	r3, r3, r2
 8003186:	6163      	str	r3, [r4, #20]
 8003188:	7833      	ldrb	r3, [r6, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <_vfiprintf_r+0xa4>
 800318e:	e0a7      	b.n	80032e0 <_vfiprintf_r+0x1f4>
 8003190:	2201      	movs	r2, #1
 8003192:	2300      	movs	r3, #0
 8003194:	4252      	negs	r2, r2
 8003196:	6062      	str	r2, [r4, #4]
 8003198:	a904      	add	r1, sp, #16
 800319a:	3254      	adds	r2, #84	; 0x54
 800319c:	1852      	adds	r2, r2, r1
 800319e:	1c75      	adds	r5, r6, #1
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	60e3      	str	r3, [r4, #12]
 80031a4:	60a3      	str	r3, [r4, #8]
 80031a6:	7013      	strb	r3, [r2, #0]
 80031a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80031aa:	4b59      	ldr	r3, [pc, #356]	; (8003310 <_vfiprintf_r+0x224>)
 80031ac:	2205      	movs	r2, #5
 80031ae:	0018      	movs	r0, r3
 80031b0:	7829      	ldrb	r1, [r5, #0]
 80031b2:	9305      	str	r3, [sp, #20]
 80031b4:	f000 fb9c 	bl	80038f0 <memchr>
 80031b8:	1c6e      	adds	r6, r5, #1
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d11f      	bne.n	80031fe <_vfiprintf_r+0x112>
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	06d3      	lsls	r3, r2, #27
 80031c2:	d504      	bpl.n	80031ce <_vfiprintf_r+0xe2>
 80031c4:	2353      	movs	r3, #83	; 0x53
 80031c6:	a904      	add	r1, sp, #16
 80031c8:	185b      	adds	r3, r3, r1
 80031ca:	2120      	movs	r1, #32
 80031cc:	7019      	strb	r1, [r3, #0]
 80031ce:	0713      	lsls	r3, r2, #28
 80031d0:	d504      	bpl.n	80031dc <_vfiprintf_r+0xf0>
 80031d2:	2353      	movs	r3, #83	; 0x53
 80031d4:	a904      	add	r1, sp, #16
 80031d6:	185b      	adds	r3, r3, r1
 80031d8:	212b      	movs	r1, #43	; 0x2b
 80031da:	7019      	strb	r1, [r3, #0]
 80031dc:	782b      	ldrb	r3, [r5, #0]
 80031de:	2b2a      	cmp	r3, #42	; 0x2a
 80031e0:	d016      	beq.n	8003210 <_vfiprintf_r+0x124>
 80031e2:	002e      	movs	r6, r5
 80031e4:	2100      	movs	r1, #0
 80031e6:	200a      	movs	r0, #10
 80031e8:	68e3      	ldr	r3, [r4, #12]
 80031ea:	7832      	ldrb	r2, [r6, #0]
 80031ec:	1c75      	adds	r5, r6, #1
 80031ee:	3a30      	subs	r2, #48	; 0x30
 80031f0:	2a09      	cmp	r2, #9
 80031f2:	d94e      	bls.n	8003292 <_vfiprintf_r+0x1a6>
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d111      	bne.n	800321c <_vfiprintf_r+0x130>
 80031f8:	e017      	b.n	800322a <_vfiprintf_r+0x13e>
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7af      	b.n	800315e <_vfiprintf_r+0x72>
 80031fe:	9b05      	ldr	r3, [sp, #20]
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	1ac0      	subs	r0, r0, r3
 8003204:	2301      	movs	r3, #1
 8003206:	4083      	lsls	r3, r0
 8003208:	4313      	orrs	r3, r2
 800320a:	0035      	movs	r5, r6
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	e7cc      	b.n	80031aa <_vfiprintf_r+0xbe>
 8003210:	9b07      	ldr	r3, [sp, #28]
 8003212:	1d19      	adds	r1, r3, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	9107      	str	r1, [sp, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db01      	blt.n	8003220 <_vfiprintf_r+0x134>
 800321c:	930b      	str	r3, [sp, #44]	; 0x2c
 800321e:	e004      	b.n	800322a <_vfiprintf_r+0x13e>
 8003220:	425b      	negs	r3, r3
 8003222:	60e3      	str	r3, [r4, #12]
 8003224:	2302      	movs	r3, #2
 8003226:	4313      	orrs	r3, r2
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	7833      	ldrb	r3, [r6, #0]
 800322c:	2b2e      	cmp	r3, #46	; 0x2e
 800322e:	d10a      	bne.n	8003246 <_vfiprintf_r+0x15a>
 8003230:	7873      	ldrb	r3, [r6, #1]
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d135      	bne.n	80032a2 <_vfiprintf_r+0x1b6>
 8003236:	9b07      	ldr	r3, [sp, #28]
 8003238:	3602      	adds	r6, #2
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9207      	str	r2, [sp, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db2b      	blt.n	800329c <_vfiprintf_r+0x1b0>
 8003244:	9309      	str	r3, [sp, #36]	; 0x24
 8003246:	4d33      	ldr	r5, [pc, #204]	; (8003314 <_vfiprintf_r+0x228>)
 8003248:	2203      	movs	r2, #3
 800324a:	0028      	movs	r0, r5
 800324c:	7831      	ldrb	r1, [r6, #0]
 800324e:	f000 fb4f 	bl	80038f0 <memchr>
 8003252:	2800      	cmp	r0, #0
 8003254:	d006      	beq.n	8003264 <_vfiprintf_r+0x178>
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	1b40      	subs	r0, r0, r5
 800325a:	4083      	lsls	r3, r0
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	3601      	adds	r6, #1
 8003260:	4313      	orrs	r3, r2
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	7831      	ldrb	r1, [r6, #0]
 8003266:	2206      	movs	r2, #6
 8003268:	482b      	ldr	r0, [pc, #172]	; (8003318 <_vfiprintf_r+0x22c>)
 800326a:	1c75      	adds	r5, r6, #1
 800326c:	7621      	strb	r1, [r4, #24]
 800326e:	f000 fb3f 	bl	80038f0 <memchr>
 8003272:	2800      	cmp	r0, #0
 8003274:	d043      	beq.n	80032fe <_vfiprintf_r+0x212>
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <_vfiprintf_r+0x230>)
 8003278:	2b00      	cmp	r3, #0
 800327a:	d125      	bne.n	80032c8 <_vfiprintf_r+0x1dc>
 800327c:	2207      	movs	r2, #7
 800327e:	9b07      	ldr	r3, [sp, #28]
 8003280:	3307      	adds	r3, #7
 8003282:	4393      	bics	r3, r2
 8003284:	3308      	adds	r3, #8
 8003286:	9307      	str	r3, [sp, #28]
 8003288:	6963      	ldr	r3, [r4, #20]
 800328a:	9a04      	ldr	r2, [sp, #16]
 800328c:	189b      	adds	r3, r3, r2
 800328e:	6163      	str	r3, [r4, #20]
 8003290:	e764      	b.n	800315c <_vfiprintf_r+0x70>
 8003292:	4343      	muls	r3, r0
 8003294:	002e      	movs	r6, r5
 8003296:	2101      	movs	r1, #1
 8003298:	189b      	adds	r3, r3, r2
 800329a:	e7a6      	b.n	80031ea <_vfiprintf_r+0xfe>
 800329c:	2301      	movs	r3, #1
 800329e:	425b      	negs	r3, r3
 80032a0:	e7d0      	b.n	8003244 <_vfiprintf_r+0x158>
 80032a2:	2300      	movs	r3, #0
 80032a4:	200a      	movs	r0, #10
 80032a6:	001a      	movs	r2, r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	7831      	ldrb	r1, [r6, #0]
 80032ae:	1c75      	adds	r5, r6, #1
 80032b0:	3930      	subs	r1, #48	; 0x30
 80032b2:	2909      	cmp	r1, #9
 80032b4:	d903      	bls.n	80032be <_vfiprintf_r+0x1d2>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0c5      	beq.n	8003246 <_vfiprintf_r+0x15a>
 80032ba:	9209      	str	r2, [sp, #36]	; 0x24
 80032bc:	e7c3      	b.n	8003246 <_vfiprintf_r+0x15a>
 80032be:	4342      	muls	r2, r0
 80032c0:	002e      	movs	r6, r5
 80032c2:	2301      	movs	r3, #1
 80032c4:	1852      	adds	r2, r2, r1
 80032c6:	e7f1      	b.n	80032ac <_vfiprintf_r+0x1c0>
 80032c8:	aa07      	add	r2, sp, #28
 80032ca:	9200      	str	r2, [sp, #0]
 80032cc:	0021      	movs	r1, r4
 80032ce:	003a      	movs	r2, r7
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_vfiprintf_r+0x234>)
 80032d2:	9803      	ldr	r0, [sp, #12]
 80032d4:	e000      	b.n	80032d8 <_vfiprintf_r+0x1ec>
 80032d6:	bf00      	nop
 80032d8:	9004      	str	r0, [sp, #16]
 80032da:	9b04      	ldr	r3, [sp, #16]
 80032dc:	3301      	adds	r3, #1
 80032de:	d1d3      	bne.n	8003288 <_vfiprintf_r+0x19c>
 80032e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e2:	07db      	lsls	r3, r3, #31
 80032e4:	d405      	bmi.n	80032f2 <_vfiprintf_r+0x206>
 80032e6:	89bb      	ldrh	r3, [r7, #12]
 80032e8:	059b      	lsls	r3, r3, #22
 80032ea:	d402      	bmi.n	80032f2 <_vfiprintf_r+0x206>
 80032ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80032ee:	f7ff fc74 	bl	8002bda <__retarget_lock_release_recursive>
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	065b      	lsls	r3, r3, #25
 80032f6:	d500      	bpl.n	80032fa <_vfiprintf_r+0x20e>
 80032f8:	e71d      	b.n	8003136 <_vfiprintf_r+0x4a>
 80032fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032fc:	e71d      	b.n	800313a <_vfiprintf_r+0x4e>
 80032fe:	aa07      	add	r2, sp, #28
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	0021      	movs	r1, r4
 8003304:	003a      	movs	r2, r7
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <_vfiprintf_r+0x234>)
 8003308:	9803      	ldr	r0, [sp, #12]
 800330a:	f000 f87b 	bl	8003404 <_printf_i>
 800330e:	e7e3      	b.n	80032d8 <_vfiprintf_r+0x1ec>
 8003310:	08003af4 	.word	0x08003af4
 8003314:	08003afa 	.word	0x08003afa
 8003318:	08003afe 	.word	0x08003afe
 800331c:	00000000 	.word	0x00000000
 8003320:	080030c7 	.word	0x080030c7

08003324 <_printf_common>:
 8003324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003326:	0016      	movs	r6, r2
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	688a      	ldr	r2, [r1, #8]
 800332c:	690b      	ldr	r3, [r1, #16]
 800332e:	000c      	movs	r4, r1
 8003330:	9000      	str	r0, [sp, #0]
 8003332:	4293      	cmp	r3, r2
 8003334:	da00      	bge.n	8003338 <_printf_common+0x14>
 8003336:	0013      	movs	r3, r2
 8003338:	0022      	movs	r2, r4
 800333a:	6033      	str	r3, [r6, #0]
 800333c:	3243      	adds	r2, #67	; 0x43
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	2a00      	cmp	r2, #0
 8003342:	d001      	beq.n	8003348 <_printf_common+0x24>
 8003344:	3301      	adds	r3, #1
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	069b      	lsls	r3, r3, #26
 800334c:	d502      	bpl.n	8003354 <_printf_common+0x30>
 800334e:	6833      	ldr	r3, [r6, #0]
 8003350:	3302      	adds	r3, #2
 8003352:	6033      	str	r3, [r6, #0]
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	2306      	movs	r3, #6
 8003358:	0015      	movs	r5, r2
 800335a:	401d      	ands	r5, r3
 800335c:	421a      	tst	r2, r3
 800335e:	d027      	beq.n	80033b0 <_printf_common+0x8c>
 8003360:	0023      	movs	r3, r4
 8003362:	3343      	adds	r3, #67	; 0x43
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	4193      	sbcs	r3, r2
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	0692      	lsls	r2, r2, #26
 800336e:	d430      	bmi.n	80033d2 <_printf_common+0xae>
 8003370:	0022      	movs	r2, r4
 8003372:	9901      	ldr	r1, [sp, #4]
 8003374:	9800      	ldr	r0, [sp, #0]
 8003376:	9d08      	ldr	r5, [sp, #32]
 8003378:	3243      	adds	r2, #67	; 0x43
 800337a:	47a8      	blx	r5
 800337c:	3001      	adds	r0, #1
 800337e:	d025      	beq.n	80033cc <_printf_common+0xa8>
 8003380:	2206      	movs	r2, #6
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	2500      	movs	r5, #0
 8003386:	4013      	ands	r3, r2
 8003388:	2b04      	cmp	r3, #4
 800338a:	d105      	bne.n	8003398 <_printf_common+0x74>
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	68e5      	ldr	r5, [r4, #12]
 8003390:	1aed      	subs	r5, r5, r3
 8003392:	43eb      	mvns	r3, r5
 8003394:	17db      	asrs	r3, r3, #31
 8003396:	401d      	ands	r5, r3
 8003398:	68a3      	ldr	r3, [r4, #8]
 800339a:	6922      	ldr	r2, [r4, #16]
 800339c:	4293      	cmp	r3, r2
 800339e:	dd01      	ble.n	80033a4 <_printf_common+0x80>
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	18ed      	adds	r5, r5, r3
 80033a4:	2600      	movs	r6, #0
 80033a6:	42b5      	cmp	r5, r6
 80033a8:	d120      	bne.n	80033ec <_printf_common+0xc8>
 80033aa:	2000      	movs	r0, #0
 80033ac:	e010      	b.n	80033d0 <_printf_common+0xac>
 80033ae:	3501      	adds	r5, #1
 80033b0:	68e3      	ldr	r3, [r4, #12]
 80033b2:	6832      	ldr	r2, [r6, #0]
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	42ab      	cmp	r3, r5
 80033b8:	ddd2      	ble.n	8003360 <_printf_common+0x3c>
 80033ba:	0022      	movs	r2, r4
 80033bc:	2301      	movs	r3, #1
 80033be:	9901      	ldr	r1, [sp, #4]
 80033c0:	9800      	ldr	r0, [sp, #0]
 80033c2:	9f08      	ldr	r7, [sp, #32]
 80033c4:	3219      	adds	r2, #25
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	d1f0      	bne.n	80033ae <_printf_common+0x8a>
 80033cc:	2001      	movs	r0, #1
 80033ce:	4240      	negs	r0, r0
 80033d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033d2:	2030      	movs	r0, #48	; 0x30
 80033d4:	18e1      	adds	r1, r4, r3
 80033d6:	3143      	adds	r1, #67	; 0x43
 80033d8:	7008      	strb	r0, [r1, #0]
 80033da:	0021      	movs	r1, r4
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	3145      	adds	r1, #69	; 0x45
 80033e0:	7809      	ldrb	r1, [r1, #0]
 80033e2:	18a2      	adds	r2, r4, r2
 80033e4:	3243      	adds	r2, #67	; 0x43
 80033e6:	3302      	adds	r3, #2
 80033e8:	7011      	strb	r1, [r2, #0]
 80033ea:	e7c1      	b.n	8003370 <_printf_common+0x4c>
 80033ec:	0022      	movs	r2, r4
 80033ee:	2301      	movs	r3, #1
 80033f0:	9901      	ldr	r1, [sp, #4]
 80033f2:	9800      	ldr	r0, [sp, #0]
 80033f4:	9f08      	ldr	r7, [sp, #32]
 80033f6:	321a      	adds	r2, #26
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	d0e6      	beq.n	80033cc <_printf_common+0xa8>
 80033fe:	3601      	adds	r6, #1
 8003400:	e7d1      	b.n	80033a6 <_printf_common+0x82>
	...

08003404 <_printf_i>:
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b08b      	sub	sp, #44	; 0x2c
 8003408:	9206      	str	r2, [sp, #24]
 800340a:	000a      	movs	r2, r1
 800340c:	3243      	adds	r2, #67	; 0x43
 800340e:	9307      	str	r3, [sp, #28]
 8003410:	9005      	str	r0, [sp, #20]
 8003412:	9204      	str	r2, [sp, #16]
 8003414:	7e0a      	ldrb	r2, [r1, #24]
 8003416:	000c      	movs	r4, r1
 8003418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800341a:	2a78      	cmp	r2, #120	; 0x78
 800341c:	d809      	bhi.n	8003432 <_printf_i+0x2e>
 800341e:	2a62      	cmp	r2, #98	; 0x62
 8003420:	d80b      	bhi.n	800343a <_printf_i+0x36>
 8003422:	2a00      	cmp	r2, #0
 8003424:	d100      	bne.n	8003428 <_printf_i+0x24>
 8003426:	e0be      	b.n	80035a6 <_printf_i+0x1a2>
 8003428:	497c      	ldr	r1, [pc, #496]	; (800361c <_printf_i+0x218>)
 800342a:	9103      	str	r1, [sp, #12]
 800342c:	2a58      	cmp	r2, #88	; 0x58
 800342e:	d100      	bne.n	8003432 <_printf_i+0x2e>
 8003430:	e093      	b.n	800355a <_printf_i+0x156>
 8003432:	0026      	movs	r6, r4
 8003434:	3642      	adds	r6, #66	; 0x42
 8003436:	7032      	strb	r2, [r6, #0]
 8003438:	e022      	b.n	8003480 <_printf_i+0x7c>
 800343a:	0010      	movs	r0, r2
 800343c:	3863      	subs	r0, #99	; 0x63
 800343e:	2815      	cmp	r0, #21
 8003440:	d8f7      	bhi.n	8003432 <_printf_i+0x2e>
 8003442:	f7fc fe69 	bl	8000118 <__gnu_thumb1_case_shi>
 8003446:	0016      	.short	0x0016
 8003448:	fff6001f 	.word	0xfff6001f
 800344c:	fff6fff6 	.word	0xfff6fff6
 8003450:	001ffff6 	.word	0x001ffff6
 8003454:	fff6fff6 	.word	0xfff6fff6
 8003458:	fff6fff6 	.word	0xfff6fff6
 800345c:	003600a3 	.word	0x003600a3
 8003460:	fff60083 	.word	0xfff60083
 8003464:	00b4fff6 	.word	0x00b4fff6
 8003468:	0036fff6 	.word	0x0036fff6
 800346c:	fff6fff6 	.word	0xfff6fff6
 8003470:	0087      	.short	0x0087
 8003472:	0026      	movs	r6, r4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	3642      	adds	r6, #66	; 0x42
 8003478:	1d11      	adds	r1, r2, #4
 800347a:	6019      	str	r1, [r3, #0]
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	7033      	strb	r3, [r6, #0]
 8003480:	2301      	movs	r3, #1
 8003482:	e0a2      	b.n	80035ca <_printf_i+0x1c6>
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	1d02      	adds	r2, r0, #4
 800348a:	060d      	lsls	r5, r1, #24
 800348c:	d50b      	bpl.n	80034a6 <_printf_i+0xa2>
 800348e:	6805      	ldr	r5, [r0, #0]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	2d00      	cmp	r5, #0
 8003494:	da03      	bge.n	800349e <_printf_i+0x9a>
 8003496:	232d      	movs	r3, #45	; 0x2d
 8003498:	9a04      	ldr	r2, [sp, #16]
 800349a:	426d      	negs	r5, r5
 800349c:	7013      	strb	r3, [r2, #0]
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <_printf_i+0x218>)
 80034a0:	270a      	movs	r7, #10
 80034a2:	9303      	str	r3, [sp, #12]
 80034a4:	e01b      	b.n	80034de <_printf_i+0xda>
 80034a6:	6805      	ldr	r5, [r0, #0]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	0649      	lsls	r1, r1, #25
 80034ac:	d5f1      	bpl.n	8003492 <_printf_i+0x8e>
 80034ae:	b22d      	sxth	r5, r5
 80034b0:	e7ef      	b.n	8003492 <_printf_i+0x8e>
 80034b2:	680d      	ldr	r5, [r1, #0]
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	1d08      	adds	r0, r1, #4
 80034b8:	6018      	str	r0, [r3, #0]
 80034ba:	062e      	lsls	r6, r5, #24
 80034bc:	d501      	bpl.n	80034c2 <_printf_i+0xbe>
 80034be:	680d      	ldr	r5, [r1, #0]
 80034c0:	e003      	b.n	80034ca <_printf_i+0xc6>
 80034c2:	066d      	lsls	r5, r5, #25
 80034c4:	d5fb      	bpl.n	80034be <_printf_i+0xba>
 80034c6:	680d      	ldr	r5, [r1, #0]
 80034c8:	b2ad      	uxth	r5, r5
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <_printf_i+0x218>)
 80034cc:	2708      	movs	r7, #8
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	2a6f      	cmp	r2, #111	; 0x6f
 80034d2:	d000      	beq.n	80034d6 <_printf_i+0xd2>
 80034d4:	3702      	adds	r7, #2
 80034d6:	0023      	movs	r3, r4
 80034d8:	2200      	movs	r2, #0
 80034da:	3343      	adds	r3, #67	; 0x43
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	60a3      	str	r3, [r4, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db03      	blt.n	80034ee <_printf_i+0xea>
 80034e6:	2104      	movs	r1, #4
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	438a      	bics	r2, r1
 80034ec:	6022      	str	r2, [r4, #0]
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	d102      	bne.n	80034f8 <_printf_i+0xf4>
 80034f2:	9e04      	ldr	r6, [sp, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <_printf_i+0x10e>
 80034f8:	9e04      	ldr	r6, [sp, #16]
 80034fa:	0028      	movs	r0, r5
 80034fc:	0039      	movs	r1, r7
 80034fe:	f7fc fe9b 	bl	8000238 <__aeabi_uidivmod>
 8003502:	9b03      	ldr	r3, [sp, #12]
 8003504:	3e01      	subs	r6, #1
 8003506:	5c5b      	ldrb	r3, [r3, r1]
 8003508:	7033      	strb	r3, [r6, #0]
 800350a:	002b      	movs	r3, r5
 800350c:	0005      	movs	r5, r0
 800350e:	429f      	cmp	r7, r3
 8003510:	d9f3      	bls.n	80034fa <_printf_i+0xf6>
 8003512:	2f08      	cmp	r7, #8
 8003514:	d109      	bne.n	800352a <_printf_i+0x126>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07db      	lsls	r3, r3, #31
 800351a:	d506      	bpl.n	800352a <_printf_i+0x126>
 800351c:	6862      	ldr	r2, [r4, #4]
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	dc02      	bgt.n	800352a <_printf_i+0x126>
 8003524:	2330      	movs	r3, #48	; 0x30
 8003526:	3e01      	subs	r6, #1
 8003528:	7033      	strb	r3, [r6, #0]
 800352a:	9b04      	ldr	r3, [sp, #16]
 800352c:	1b9b      	subs	r3, r3, r6
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	9b07      	ldr	r3, [sp, #28]
 8003532:	0021      	movs	r1, r4
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	9805      	ldr	r0, [sp, #20]
 8003538:	9b06      	ldr	r3, [sp, #24]
 800353a:	aa09      	add	r2, sp, #36	; 0x24
 800353c:	f7ff fef2 	bl	8003324 <_printf_common>
 8003540:	3001      	adds	r0, #1
 8003542:	d147      	bne.n	80035d4 <_printf_i+0x1d0>
 8003544:	2001      	movs	r0, #1
 8003546:	4240      	negs	r0, r0
 8003548:	b00b      	add	sp, #44	; 0x2c
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354c:	2220      	movs	r2, #32
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	6022      	str	r2, [r4, #0]
 8003554:	2278      	movs	r2, #120	; 0x78
 8003556:	4932      	ldr	r1, [pc, #200]	; (8003620 <_printf_i+0x21c>)
 8003558:	9103      	str	r1, [sp, #12]
 800355a:	0021      	movs	r1, r4
 800355c:	3145      	adds	r1, #69	; 0x45
 800355e:	700a      	strb	r2, [r1, #0]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	c920      	ldmia	r1!, {r5}
 8003566:	0610      	lsls	r0, r2, #24
 8003568:	d402      	bmi.n	8003570 <_printf_i+0x16c>
 800356a:	0650      	lsls	r0, r2, #25
 800356c:	d500      	bpl.n	8003570 <_printf_i+0x16c>
 800356e:	b2ad      	uxth	r5, r5
 8003570:	6019      	str	r1, [r3, #0]
 8003572:	07d3      	lsls	r3, r2, #31
 8003574:	d502      	bpl.n	800357c <_printf_i+0x178>
 8003576:	2320      	movs	r3, #32
 8003578:	4313      	orrs	r3, r2
 800357a:	6023      	str	r3, [r4, #0]
 800357c:	2710      	movs	r7, #16
 800357e:	2d00      	cmp	r5, #0
 8003580:	d1a9      	bne.n	80034d6 <_printf_i+0xd2>
 8003582:	2220      	movs	r2, #32
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	4393      	bics	r3, r2
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	e7a4      	b.n	80034d6 <_printf_i+0xd2>
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	680d      	ldr	r5, [r1, #0]
 8003590:	1d10      	adds	r0, r2, #4
 8003592:	6949      	ldr	r1, [r1, #20]
 8003594:	6018      	str	r0, [r3, #0]
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	062e      	lsls	r6, r5, #24
 800359a:	d501      	bpl.n	80035a0 <_printf_i+0x19c>
 800359c:	6019      	str	r1, [r3, #0]
 800359e:	e002      	b.n	80035a6 <_printf_i+0x1a2>
 80035a0:	066d      	lsls	r5, r5, #25
 80035a2:	d5fb      	bpl.n	800359c <_printf_i+0x198>
 80035a4:	8019      	strh	r1, [r3, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9e04      	ldr	r6, [sp, #16]
 80035aa:	6123      	str	r3, [r4, #16]
 80035ac:	e7c0      	b.n	8003530 <_printf_i+0x12c>
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	1d11      	adds	r1, r2, #4
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	6816      	ldr	r6, [r2, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	0030      	movs	r0, r6
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	f000 f998 	bl	80038f0 <memchr>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d001      	beq.n	80035c8 <_printf_i+0x1c4>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	2300      	movs	r3, #0
 80035ce:	9a04      	ldr	r2, [sp, #16]
 80035d0:	7013      	strb	r3, [r2, #0]
 80035d2:	e7ad      	b.n	8003530 <_printf_i+0x12c>
 80035d4:	0032      	movs	r2, r6
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	9906      	ldr	r1, [sp, #24]
 80035da:	9805      	ldr	r0, [sp, #20]
 80035dc:	9d07      	ldr	r5, [sp, #28]
 80035de:	47a8      	blx	r5
 80035e0:	3001      	adds	r0, #1
 80035e2:	d0af      	beq.n	8003544 <_printf_i+0x140>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	079b      	lsls	r3, r3, #30
 80035e8:	d415      	bmi.n	8003616 <_printf_i+0x212>
 80035ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ec:	68e0      	ldr	r0, [r4, #12]
 80035ee:	4298      	cmp	r0, r3
 80035f0:	daaa      	bge.n	8003548 <_printf_i+0x144>
 80035f2:	0018      	movs	r0, r3
 80035f4:	e7a8      	b.n	8003548 <_printf_i+0x144>
 80035f6:	0022      	movs	r2, r4
 80035f8:	2301      	movs	r3, #1
 80035fa:	9906      	ldr	r1, [sp, #24]
 80035fc:	9805      	ldr	r0, [sp, #20]
 80035fe:	9e07      	ldr	r6, [sp, #28]
 8003600:	3219      	adds	r2, #25
 8003602:	47b0      	blx	r6
 8003604:	3001      	adds	r0, #1
 8003606:	d09d      	beq.n	8003544 <_printf_i+0x140>
 8003608:	3501      	adds	r5, #1
 800360a:	68e3      	ldr	r3, [r4, #12]
 800360c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	42ab      	cmp	r3, r5
 8003612:	dcf0      	bgt.n	80035f6 <_printf_i+0x1f2>
 8003614:	e7e9      	b.n	80035ea <_printf_i+0x1e6>
 8003616:	2500      	movs	r5, #0
 8003618:	e7f7      	b.n	800360a <_printf_i+0x206>
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	08003b05 	.word	0x08003b05
 8003620:	08003b16 	.word	0x08003b16

08003624 <__sflush_r>:
 8003624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003626:	898b      	ldrh	r3, [r1, #12]
 8003628:	0005      	movs	r5, r0
 800362a:	000c      	movs	r4, r1
 800362c:	071a      	lsls	r2, r3, #28
 800362e:	d45c      	bmi.n	80036ea <__sflush_r+0xc6>
 8003630:	684a      	ldr	r2, [r1, #4]
 8003632:	2a00      	cmp	r2, #0
 8003634:	dc04      	bgt.n	8003640 <__sflush_r+0x1c>
 8003636:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003638:	2a00      	cmp	r2, #0
 800363a:	dc01      	bgt.n	8003640 <__sflush_r+0x1c>
 800363c:	2000      	movs	r0, #0
 800363e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003640:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003642:	2f00      	cmp	r7, #0
 8003644:	d0fa      	beq.n	800363c <__sflush_r+0x18>
 8003646:	2200      	movs	r2, #0
 8003648:	2080      	movs	r0, #128	; 0x80
 800364a:	682e      	ldr	r6, [r5, #0]
 800364c:	602a      	str	r2, [r5, #0]
 800364e:	001a      	movs	r2, r3
 8003650:	0140      	lsls	r0, r0, #5
 8003652:	6a21      	ldr	r1, [r4, #32]
 8003654:	4002      	ands	r2, r0
 8003656:	4203      	tst	r3, r0
 8003658:	d034      	beq.n	80036c4 <__sflush_r+0xa0>
 800365a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	075b      	lsls	r3, r3, #29
 8003660:	d506      	bpl.n	8003670 <__sflush_r+0x4c>
 8003662:	6863      	ldr	r3, [r4, #4]
 8003664:	1ac0      	subs	r0, r0, r3
 8003666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <__sflush_r+0x4c>
 800366c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800366e:	1ac0      	subs	r0, r0, r3
 8003670:	0002      	movs	r2, r0
 8003672:	2300      	movs	r3, #0
 8003674:	0028      	movs	r0, r5
 8003676:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003678:	6a21      	ldr	r1, [r4, #32]
 800367a:	47b8      	blx	r7
 800367c:	89a2      	ldrh	r2, [r4, #12]
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d106      	bne.n	8003690 <__sflush_r+0x6c>
 8003682:	6829      	ldr	r1, [r5, #0]
 8003684:	291d      	cmp	r1, #29
 8003686:	d82c      	bhi.n	80036e2 <__sflush_r+0xbe>
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <__sflush_r+0x110>)
 800368a:	410b      	asrs	r3, r1
 800368c:	07db      	lsls	r3, r3, #31
 800368e:	d428      	bmi.n	80036e2 <__sflush_r+0xbe>
 8003690:	2300      	movs	r3, #0
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	04d2      	lsls	r2, r2, #19
 800369a:	d505      	bpl.n	80036a8 <__sflush_r+0x84>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <__sflush_r+0x82>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d100      	bne.n	80036a8 <__sflush_r+0x84>
 80036a6:	6560      	str	r0, [r4, #84]	; 0x54
 80036a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036aa:	602e      	str	r6, [r5, #0]
 80036ac:	2900      	cmp	r1, #0
 80036ae:	d0c5      	beq.n	800363c <__sflush_r+0x18>
 80036b0:	0023      	movs	r3, r4
 80036b2:	3344      	adds	r3, #68	; 0x44
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d002      	beq.n	80036be <__sflush_r+0x9a>
 80036b8:	0028      	movs	r0, r5
 80036ba:	f7ff fa8f 	bl	8002bdc <_free_r>
 80036be:	2000      	movs	r0, #0
 80036c0:	6360      	str	r0, [r4, #52]	; 0x34
 80036c2:	e7bc      	b.n	800363e <__sflush_r+0x1a>
 80036c4:	2301      	movs	r3, #1
 80036c6:	0028      	movs	r0, r5
 80036c8:	47b8      	blx	r7
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d1c6      	bne.n	800365c <__sflush_r+0x38>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0c3      	beq.n	800365c <__sflush_r+0x38>
 80036d4:	2b1d      	cmp	r3, #29
 80036d6:	d001      	beq.n	80036dc <__sflush_r+0xb8>
 80036d8:	2b16      	cmp	r3, #22
 80036da:	d101      	bne.n	80036e0 <__sflush_r+0xbc>
 80036dc:	602e      	str	r6, [r5, #0]
 80036de:	e7ad      	b.n	800363c <__sflush_r+0x18>
 80036e0:	89a2      	ldrh	r2, [r4, #12]
 80036e2:	2340      	movs	r3, #64	; 0x40
 80036e4:	4313      	orrs	r3, r2
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	e7a9      	b.n	800363e <__sflush_r+0x1a>
 80036ea:	690e      	ldr	r6, [r1, #16]
 80036ec:	2e00      	cmp	r6, #0
 80036ee:	d0a5      	beq.n	800363c <__sflush_r+0x18>
 80036f0:	680f      	ldr	r7, [r1, #0]
 80036f2:	600e      	str	r6, [r1, #0]
 80036f4:	1bba      	subs	r2, r7, r6
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	079b      	lsls	r3, r3, #30
 80036fc:	d100      	bne.n	8003700 <__sflush_r+0xdc>
 80036fe:	694a      	ldr	r2, [r1, #20]
 8003700:	60a2      	str	r2, [r4, #8]
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	dd99      	ble.n	800363c <__sflush_r+0x18>
 8003708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800370a:	0032      	movs	r2, r6
 800370c:	001f      	movs	r7, r3
 800370e:	0028      	movs	r0, r5
 8003710:	9b01      	ldr	r3, [sp, #4]
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	47b8      	blx	r7
 8003716:	2800      	cmp	r0, #0
 8003718:	dc06      	bgt.n	8003728 <__sflush_r+0x104>
 800371a:	2340      	movs	r3, #64	; 0x40
 800371c:	2001      	movs	r0, #1
 800371e:	89a2      	ldrh	r2, [r4, #12]
 8003720:	4240      	negs	r0, r0
 8003722:	4313      	orrs	r3, r2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	e78a      	b.n	800363e <__sflush_r+0x1a>
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	1836      	adds	r6, r6, r0
 800372c:	1a1b      	subs	r3, r3, r0
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	e7e7      	b.n	8003702 <__sflush_r+0xde>
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	dfbffffe 	.word	0xdfbffffe

08003738 <_fflush_r>:
 8003738:	690b      	ldr	r3, [r1, #16]
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	0005      	movs	r5, r0
 800373e:	000c      	movs	r4, r1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <_fflush_r+0x12>
 8003744:	2500      	movs	r5, #0
 8003746:	0028      	movs	r0, r5
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 800374a:	2800      	cmp	r0, #0
 800374c:	d004      	beq.n	8003758 <_fflush_r+0x20>
 800374e:	6a03      	ldr	r3, [r0, #32]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <_fflush_r+0x20>
 8003754:	f7ff f80a 	bl	800276c <__sinit>
 8003758:	220c      	movs	r2, #12
 800375a:	5ea3      	ldrsh	r3, [r4, r2]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f1      	beq.n	8003744 <_fflush_r+0xc>
 8003760:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003762:	07d2      	lsls	r2, r2, #31
 8003764:	d404      	bmi.n	8003770 <_fflush_r+0x38>
 8003766:	059b      	lsls	r3, r3, #22
 8003768:	d402      	bmi.n	8003770 <_fflush_r+0x38>
 800376a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376c:	f7ff fa34 	bl	8002bd8 <__retarget_lock_acquire_recursive>
 8003770:	0028      	movs	r0, r5
 8003772:	0021      	movs	r1, r4
 8003774:	f7ff ff56 	bl	8003624 <__sflush_r>
 8003778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800377a:	0005      	movs	r5, r0
 800377c:	07db      	lsls	r3, r3, #31
 800377e:	d4e2      	bmi.n	8003746 <_fflush_r+0xe>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	059b      	lsls	r3, r3, #22
 8003784:	d4df      	bmi.n	8003746 <_fflush_r+0xe>
 8003786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003788:	f7ff fa27 	bl	8002bda <__retarget_lock_release_recursive>
 800378c:	e7db      	b.n	8003746 <_fflush_r+0xe>
	...

08003790 <__swhatbuf_r>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	000e      	movs	r6, r1
 8003794:	001d      	movs	r5, r3
 8003796:	230e      	movs	r3, #14
 8003798:	5ec9      	ldrsh	r1, [r1, r3]
 800379a:	0014      	movs	r4, r2
 800379c:	b096      	sub	sp, #88	; 0x58
 800379e:	2900      	cmp	r1, #0
 80037a0:	da0c      	bge.n	80037bc <__swhatbuf_r+0x2c>
 80037a2:	89b2      	ldrh	r2, [r6, #12]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	0011      	movs	r1, r2
 80037a8:	4019      	ands	r1, r3
 80037aa:	421a      	tst	r2, r3
 80037ac:	d013      	beq.n	80037d6 <__swhatbuf_r+0x46>
 80037ae:	2100      	movs	r1, #0
 80037b0:	3b40      	subs	r3, #64	; 0x40
 80037b2:	2000      	movs	r0, #0
 80037b4:	6029      	str	r1, [r5, #0]
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	b016      	add	sp, #88	; 0x58
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	466a      	mov	r2, sp
 80037be:	f000 f861 	bl	8003884 <_fstat_r>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	dbed      	blt.n	80037a2 <__swhatbuf_r+0x12>
 80037c6:	23f0      	movs	r3, #240	; 0xf0
 80037c8:	9901      	ldr	r1, [sp, #4]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	4019      	ands	r1, r3
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <__swhatbuf_r+0x4c>)
 80037d0:	18c9      	adds	r1, r1, r3
 80037d2:	424b      	negs	r3, r1
 80037d4:	4159      	adcs	r1, r3
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	e7ea      	b.n	80037b2 <__swhatbuf_r+0x22>
 80037dc:	ffffe000 	.word	0xffffe000

080037e0 <__smakebuf_r>:
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	2602      	movs	r6, #2
 80037e4:	898b      	ldrh	r3, [r1, #12]
 80037e6:	0005      	movs	r5, r0
 80037e8:	000c      	movs	r4, r1
 80037ea:	4233      	tst	r3, r6
 80037ec:	d006      	beq.n	80037fc <__smakebuf_r+0x1c>
 80037ee:	0023      	movs	r3, r4
 80037f0:	3347      	adds	r3, #71	; 0x47
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2301      	movs	r3, #1
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80037fc:	466a      	mov	r2, sp
 80037fe:	ab01      	add	r3, sp, #4
 8003800:	f7ff ffc6 	bl	8003790 <__swhatbuf_r>
 8003804:	9900      	ldr	r1, [sp, #0]
 8003806:	0007      	movs	r7, r0
 8003808:	0028      	movs	r0, r5
 800380a:	f7ff fa53 	bl	8002cb4 <_malloc_r>
 800380e:	2800      	cmp	r0, #0
 8003810:	d108      	bne.n	8003824 <__smakebuf_r+0x44>
 8003812:	220c      	movs	r2, #12
 8003814:	5ea3      	ldrsh	r3, [r4, r2]
 8003816:	059a      	lsls	r2, r3, #22
 8003818:	d4ef      	bmi.n	80037fa <__smakebuf_r+0x1a>
 800381a:	2203      	movs	r2, #3
 800381c:	4393      	bics	r3, r2
 800381e:	431e      	orrs	r6, r3
 8003820:	81a6      	strh	r6, [r4, #12]
 8003822:	e7e4      	b.n	80037ee <__smakebuf_r+0xe>
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	89a2      	ldrh	r2, [r4, #12]
 8003828:	6020      	str	r0, [r4, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	9b00      	ldr	r3, [sp, #0]
 8003830:	6120      	str	r0, [r4, #16]
 8003832:	6163      	str	r3, [r4, #20]
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <__smakebuf_r+0x74>
 800383a:	0028      	movs	r0, r5
 800383c:	230e      	movs	r3, #14
 800383e:	5ee1      	ldrsh	r1, [r4, r3]
 8003840:	f000 f832 	bl	80038a8 <_isatty_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d005      	beq.n	8003854 <__smakebuf_r+0x74>
 8003848:	2303      	movs	r3, #3
 800384a:	89a2      	ldrh	r2, [r4, #12]
 800384c:	439a      	bics	r2, r3
 800384e:	3b02      	subs	r3, #2
 8003850:	4313      	orrs	r3, r2
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	433b      	orrs	r3, r7
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	e7ce      	b.n	80037fa <__smakebuf_r+0x1a>

0800385c <memmove>:
 800385c:	b510      	push	{r4, lr}
 800385e:	4288      	cmp	r0, r1
 8003860:	d902      	bls.n	8003868 <memmove+0xc>
 8003862:	188b      	adds	r3, r1, r2
 8003864:	4298      	cmp	r0, r3
 8003866:	d303      	bcc.n	8003870 <memmove+0x14>
 8003868:	2300      	movs	r3, #0
 800386a:	e007      	b.n	800387c <memmove+0x20>
 800386c:	5c8b      	ldrb	r3, [r1, r2]
 800386e:	5483      	strb	r3, [r0, r2]
 8003870:	3a01      	subs	r2, #1
 8003872:	d2fb      	bcs.n	800386c <memmove+0x10>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	5ccc      	ldrb	r4, [r1, r3]
 8003878:	54c4      	strb	r4, [r0, r3]
 800387a:	3301      	adds	r3, #1
 800387c:	429a      	cmp	r2, r3
 800387e:	d1fa      	bne.n	8003876 <memmove+0x1a>
 8003880:	e7f8      	b.n	8003874 <memmove+0x18>
	...

08003884 <_fstat_r>:
 8003884:	2300      	movs	r3, #0
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	4d06      	ldr	r5, [pc, #24]	; (80038a4 <_fstat_r+0x20>)
 800388a:	0004      	movs	r4, r0
 800388c:	0008      	movs	r0, r1
 800388e:	0011      	movs	r1, r2
 8003890:	602b      	str	r3, [r5, #0]
 8003892:	f7fc ffbd 	bl	8000810 <_fstat>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d103      	bne.n	80038a2 <_fstat_r+0x1e>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d000      	beq.n	80038a2 <_fstat_r+0x1e>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	20000284 	.word	0x20000284

080038a8 <_isatty_r>:
 80038a8:	2300      	movs	r3, #0
 80038aa:	b570      	push	{r4, r5, r6, lr}
 80038ac:	4d06      	ldr	r5, [pc, #24]	; (80038c8 <_isatty_r+0x20>)
 80038ae:	0004      	movs	r4, r0
 80038b0:	0008      	movs	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fc ffba 	bl	800082c <_isatty>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d103      	bne.n	80038c4 <_isatty_r+0x1c>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d000      	beq.n	80038c4 <_isatty_r+0x1c>
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	20000284 	.word	0x20000284

080038cc <_sbrk_r>:
 80038cc:	2300      	movs	r3, #0
 80038ce:	b570      	push	{r4, r5, r6, lr}
 80038d0:	4d06      	ldr	r5, [pc, #24]	; (80038ec <_sbrk_r+0x20>)
 80038d2:	0004      	movs	r4, r0
 80038d4:	0008      	movs	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fc ffbc 	bl	8000854 <_sbrk>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d103      	bne.n	80038e8 <_sbrk_r+0x1c>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d000      	beq.n	80038e8 <_sbrk_r+0x1c>
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	bd70      	pop	{r4, r5, r6, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	20000284 	.word	0x20000284

080038f0 <memchr>:
 80038f0:	b2c9      	uxtb	r1, r1
 80038f2:	1882      	adds	r2, r0, r2
 80038f4:	4290      	cmp	r0, r2
 80038f6:	d101      	bne.n	80038fc <memchr+0xc>
 80038f8:	2000      	movs	r0, #0
 80038fa:	4770      	bx	lr
 80038fc:	7803      	ldrb	r3, [r0, #0]
 80038fe:	428b      	cmp	r3, r1
 8003900:	d0fb      	beq.n	80038fa <memchr+0xa>
 8003902:	3001      	adds	r0, #1
 8003904:	e7f6      	b.n	80038f4 <memchr+0x4>

08003906 <memcpy>:
 8003906:	2300      	movs	r3, #0
 8003908:	b510      	push	{r4, lr}
 800390a:	429a      	cmp	r2, r3
 800390c:	d100      	bne.n	8003910 <memcpy+0xa>
 800390e:	bd10      	pop	{r4, pc}
 8003910:	5ccc      	ldrb	r4, [r1, r3]
 8003912:	54c4      	strb	r4, [r0, r3]
 8003914:	3301      	adds	r3, #1
 8003916:	e7f8      	b.n	800390a <memcpy+0x4>

08003918 <_realloc_r>:
 8003918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800391a:	0007      	movs	r7, r0
 800391c:	000e      	movs	r6, r1
 800391e:	0014      	movs	r4, r2
 8003920:	2900      	cmp	r1, #0
 8003922:	d105      	bne.n	8003930 <_realloc_r+0x18>
 8003924:	0011      	movs	r1, r2
 8003926:	f7ff f9c5 	bl	8002cb4 <_malloc_r>
 800392a:	0005      	movs	r5, r0
 800392c:	0028      	movs	r0, r5
 800392e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003930:	2a00      	cmp	r2, #0
 8003932:	d103      	bne.n	800393c <_realloc_r+0x24>
 8003934:	f7ff f952 	bl	8002bdc <_free_r>
 8003938:	0025      	movs	r5, r4
 800393a:	e7f7      	b.n	800392c <_realloc_r+0x14>
 800393c:	f000 f81b 	bl	8003976 <_malloc_usable_size_r>
 8003940:	9001      	str	r0, [sp, #4]
 8003942:	4284      	cmp	r4, r0
 8003944:	d803      	bhi.n	800394e <_realloc_r+0x36>
 8003946:	0035      	movs	r5, r6
 8003948:	0843      	lsrs	r3, r0, #1
 800394a:	42a3      	cmp	r3, r4
 800394c:	d3ee      	bcc.n	800392c <_realloc_r+0x14>
 800394e:	0021      	movs	r1, r4
 8003950:	0038      	movs	r0, r7
 8003952:	f7ff f9af 	bl	8002cb4 <_malloc_r>
 8003956:	1e05      	subs	r5, r0, #0
 8003958:	d0e8      	beq.n	800392c <_realloc_r+0x14>
 800395a:	9b01      	ldr	r3, [sp, #4]
 800395c:	0022      	movs	r2, r4
 800395e:	429c      	cmp	r4, r3
 8003960:	d900      	bls.n	8003964 <_realloc_r+0x4c>
 8003962:	001a      	movs	r2, r3
 8003964:	0031      	movs	r1, r6
 8003966:	0028      	movs	r0, r5
 8003968:	f7ff ffcd 	bl	8003906 <memcpy>
 800396c:	0031      	movs	r1, r6
 800396e:	0038      	movs	r0, r7
 8003970:	f7ff f934 	bl	8002bdc <_free_r>
 8003974:	e7da      	b.n	800392c <_realloc_r+0x14>

08003976 <_malloc_usable_size_r>:
 8003976:	1f0b      	subs	r3, r1, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	1f18      	subs	r0, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	da01      	bge.n	8003984 <_malloc_usable_size_r+0xe>
 8003980:	580b      	ldr	r3, [r1, r0]
 8003982:	18c0      	adds	r0, r0, r3
 8003984:	4770      	bx	lr
	...

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
