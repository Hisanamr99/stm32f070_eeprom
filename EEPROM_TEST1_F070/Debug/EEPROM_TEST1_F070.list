
EEPROM_TEST1_F070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f4  080037f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080037f4  080037f4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f4  080037f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080037fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08003864  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003864  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008630  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6c  00000000  00000000  00028703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e4  00000000  00000000  0002a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010ccc  00000000  00000000  0002af14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d46  00000000  00000000  0003bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fb91  00000000  00000000  00045926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022ec  00000000  00000000  000a54b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a77a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036e4 	.word	0x080036e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080036e4 	.word	0x080036e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <GetPage>:
#include <string.h>
#include <stdio.h>

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e01a      	b.n	8000288 <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <GetPage+0x54>)
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d20f      	bcs.n	8000282 <GetPage+0x3e>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	0292      	lsls	r2, r2, #10
 8000268:	4694      	mov	ip, r2
 800026a:	4463      	add	r3, ip
 800026c:	029b      	lsls	r3, r3, #10
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	429a      	cmp	r2, r3
 8000272:	d306      	bcc.n	8000282 <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	0292      	lsls	r2, r2, #10
 800027a:	4694      	mov	ip, r2
 800027c:	4463      	add	r3, ip
 800027e:	029b      	lsls	r3, r3, #10
 8000280:	e006      	b.n	8000290 <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3301      	adds	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b7f      	cmp	r3, #127	; 0x7f
 800028c:	dde1      	ble.n	8000252 <GetPage+0xe>
	  }
  }

  return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	0018      	movs	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	b004      	add	sp, #16
 8000296:	bd80      	pop	{r7, pc}
 8000298:	00020001 	.word	0x00020001

0800029c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	1dbb      	adds	r3, r7, #6
 80002a8:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80002ae:	f000 fcc7 	bl	8000c40 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffc5 	bl	8000244 <GetPage>
 80002ba:	0003      	movs	r3, r0
 80002bc:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80002be:	1dbb      	adds	r3, r7, #6
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	001a      	movs	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	189b      	adds	r3, r3, r2
 80002ca:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	0018      	movs	r0, r3
 80002d0:	f7ff ffb8 	bl	8000244 <GetPage>
 80002d4:	0003      	movs	r3, r0
 80002d6:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <Flash_Write_Data+0xc0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <Flash_Write_Data+0xc0>)
 80002e0:	6a3a      	ldr	r2, [r7, #32]
 80002e2:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80002e4:	69ba      	ldr	r2, [r7, #24]
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	0a9b      	lsrs	r3, r3, #10
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <Flash_Write_Data+0xc0>)
 80002f0:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80002f2:	2314      	movs	r3, #20
 80002f4:	18fa      	adds	r2, r7, r3
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <Flash_Write_Data+0xc0>)
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fd6a 	bl	8000dd4 <HAL_FLASHEx_Erase>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d01e      	beq.n	8000342 <Flash_Write_Data+0xa6>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000304:	f000 fcd0 	bl	8000ca8 <HAL_FLASH_GetError>
 8000308:	0003      	movs	r3, r0
 800030a:	e022      	b.n	8000352 <Flash_Write_Data+0xb6>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	001c      	movs	r4, r3
 8000318:	2300      	movs	r3, #0
 800031a:	001d      	movs	r5, r3
 800031c:	68f9      	ldr	r1, [r7, #12]
 800031e:	0022      	movs	r2, r4
 8000320:	002b      	movs	r3, r5
 8000322:	2002      	movs	r0, #2
 8000324:	f000 fbf6 	bl	8000b14 <HAL_FLASH_Program>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d106      	bne.n	800033a <Flash_Write_Data+0x9e>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3304      	adds	r3, #4
 8000330:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	3301      	adds	r3, #1
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
 8000338:	e003      	b.n	8000342 <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800033a:	f000 fcb5 	bl	8000ca8 <HAL_FLASH_GetError>
 800033e:	0003      	movs	r3, r0
 8000340:	e007      	b.n	8000352 <Flash_Write_Data+0xb6>
	   while (sofar<numberofwords)
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000348:	429a      	cmp	r2, r3
 800034a:	dbdf      	blt.n	800030c <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800034c:	f000 fc9e 	bl	8000c8c <HAL_FLASH_Lock>

	   return 0;
 8000350:	2300      	movs	r3, #0
}
 8000352:	0018      	movs	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	b00a      	add	sp, #40	; 0x28
 8000358:	bdb0      	pop	{r4, r5, r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	20000084 	.word	0x20000084

08000360 <Flash_Read_Data>:


void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3304      	adds	r3, #4
 800037a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3304      	adds	r3, #4
 8000380:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	1dba      	adds	r2, r7, #6
 8000388:	1e59      	subs	r1, r3, #1
 800038a:	8011      	strh	r1, [r2, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d000      	beq.n	8000392 <Flash_Read_Data+0x32>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000390:	e7ed      	b.n	800036e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000392:	46c0      	nop			; (mov r8, r8)
	}
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b004      	add	sp, #16
 800039a:	bd80      	pop	{r7, pc}

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fa7b 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f851 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 f8bf 	bl	800052c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ae:	f000 f88d 	bl	80004cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Data to be written
  uint32_t data1 = 100;
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 // uint32_t data2 = 50;

  // Print the data to be written using UART
  printf("Data to be written to EEPROM:\r\n");
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <main+0x94>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f002 f91f 	bl	80025fc <puts>
  printf("Data1: %lu\r\n", data1);
 80003be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0x98>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f002 f8b3 	bl	8002530 <iprintf>
  //printf("Data2: %lu\r\n", data2);

  // Write the first data to the emulated EEPROM
  Flash_Write_Data(DATA1_ADDR, &data1, sizeof(data1) / 4); // Divide by 4 to write in words
 80003ca:	236c      	movs	r3, #108	; 0x6c
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	481a      	ldr	r0, [pc, #104]	; (8000438 <main+0x9c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	0019      	movs	r1, r3
 80003d4:	f7ff ff62 	bl	800029c <Flash_Write_Data>
  printf("Data1 written to EEPROM.\r\n");
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <main+0xa0>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 f90e 	bl	80025fc <puts>
  // Write the second data to the emulated EEPROM
//  Flash_Write_Data(DATA2_ADDR, &data2, sizeof(data2) / 4); // Divide by 4 to write in words
//  printf("Data2 written to EEPROM.\r\n");


  HAL_Delay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fabf 	bl	8000964 <HAL_Delay>



  // Read the first data from the emulated EEPROM
  uint32_t readData1;
  Flash_Read_Data(DATA1_ADDR, &readData1, sizeof(readData1) / 4);
 80003e6:	2368      	movs	r3, #104	; 0x68
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	4813      	ldr	r0, [pc, #76]	; (8000438 <main+0x9c>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	0019      	movs	r1, r3
 80003f0:	f7ff ffb6 	bl	8000360 <Flash_Read_Data>
//  // Read the second data from the emulated EEPROM
////  uint32_t readData2;
////  Flash_Read_Data(DATA2_ADDR, &readData2, sizeof(readData2) / 4);
//
//  // Print the read data using UART
  printf("Data read from EEPROM:\r\n");
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <main+0xa4>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f002 f900 	bl	80025fc <puts>
  printf("Data1: %lu\r\n", readData1);
 80003fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <main+0x98>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f002 f894 	bl	8002530 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	char buffer[100];
	sprintf(buffer, "Data read from EEPROM:\r\nData1: %lu\r\n", readData1);
 8000408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800040a:	490e      	ldr	r1, [pc, #56]	; (8000444 <main+0xa8>)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	0018      	movs	r0, r3
 8000410:	f002 f8fe 	bl	8002610 <siprintf>

	// Transmit the data over UART
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff fe76 	bl	8000108 <strlen>
 800041c:	0003      	movs	r3, r0
 800041e:	b29a      	uxth	r2, r3
 8000420:	2301      	movs	r3, #1
 8000422:	425b      	negs	r3, r3
 8000424:	1d39      	adds	r1, r7, #4
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <main+0xac>)
 8000428:	f001 fbc6 	bl	8001bb8 <HAL_UART_Transmit>
  {
 800042c:	e7ec      	b.n	8000408 <main+0x6c>
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	080036fc 	.word	0x080036fc
 8000434:	0800371c 	.word	0x0800371c
 8000438:	08007000 	.word	0x08007000
 800043c:	0800372c 	.word	0x0800372c
 8000440:	08003748 	.word	0x08003748
 8000444:	08003760 	.word	0x08003760
 8000448:	20000090 	.word	0x20000090

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b091      	sub	sp, #68	; 0x44
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	2410      	movs	r4, #16
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2330      	movs	r3, #48	; 0x30
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 f9e9 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	003b      	movs	r3, r7
 8000464:	0018      	movs	r0, r3
 8000466:	2310      	movs	r3, #16
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f002 f9e2 	bl	8002834 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	0021      	movs	r1, r4
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2202      	movs	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2201      	movs	r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2210      	movs	r2, #16
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	187b      	adds	r3, r7, r1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fedb 	bl	8001248 <HAL_RCC_OscConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000496:	f000 f891 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	003b      	movs	r3, r7
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b2:	003b      	movs	r3, r7
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 f9e4 	bl	8001884 <HAL_RCC_ClockConfig>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004c0:	f000 f87c 	bl	80005bc <Error_Handler>
  }
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b011      	add	sp, #68	; 0x44
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <MX_USART2_UART_Init+0x5c>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004d8:	2296      	movs	r2, #150	; 0x96
 80004da:	0212      	lsls	r2, r2, #8
 80004dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART2_UART_Init+0x58>)
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fafd 	bl	8001b10 <HAL_UART_Init>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800051a:	f000 f84f 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000090 	.word	0x20000090
 8000528:	40004400 	.word	0x40004400

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	240c      	movs	r4, #12
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2314      	movs	r3, #20
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 f979 	bl	8002834 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_GPIO_Init+0x8c>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0x8c>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	03c9      	lsls	r1, r1, #15
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0x8c>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	03db      	lsls	r3, r3, #15
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_GPIO_Init+0x8c>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_GPIO_Init+0x8c>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_GPIO_Init+0x8c>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fe42 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000588:	0021      	movs	r1, r4
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2201      	movs	r2, #1
 8000594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fcbe 	bl	8000f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x44>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x44>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	619a      	str	r2, [r3, #24]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_MspInit+0x44>)
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x44>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0549      	lsls	r1, r1, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_MspInit+0x44>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	055b      	lsls	r3, r3, #21
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2414      	movs	r4, #20
 800061a:	193b      	adds	r3, r7, r4
 800061c:	0018      	movs	r0, r3
 800061e:	2314      	movs	r3, #20
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f002 f906 	bl	8002834 <memset>
  if(huart->Instance==USART2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <HAL_UART_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d132      	bne.n	8000698 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <HAL_UART_MspInit+0x94>)
 8000634:	69da      	ldr	r2, [r3, #28]
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_UART_MspInit+0x94>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0289      	lsls	r1, r1, #10
 800063c:	430a      	orrs	r2, r1
 800063e:	61da      	str	r2, [r3, #28]
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_UART_MspInit+0x94>)
 8000642:	69da      	ldr	r2, [r3, #28]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	029b      	lsls	r3, r3, #10
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_UART_MspInit+0x94>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_UART_MspInit+0x94>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0289      	lsls	r1, r1, #10
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_UART_MspInit+0x94>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	4013      	ands	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2202      	movs	r2, #2
 8000676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2203      	movs	r2, #3
 8000682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	187a      	adds	r2, r7, r1
 800068c:	2390      	movs	r3, #144	; 0x90
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fc4a 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b00b      	add	sp, #44	; 0x2c
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f92e 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	e00a      	b.n	80006fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006e8:	e000      	b.n	80006ec <_read+0x16>
 80006ea:	bf00      	nop
 80006ec:	0001      	movs	r1, r0
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	b2ca      	uxtb	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	429a      	cmp	r2, r3
 8000704:	dbf0      	blt.n	80006e8 <_read+0x12>
  }

  return len;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b006      	add	sp, #24
 800070e:	bd80      	pop	{r7, pc}

08000710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e009      	b.n	8000736 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	60ba      	str	r2, [r7, #8]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	e000      	b.n	8000730 <_write+0x20>
 800072e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	429a      	cmp	r2, r3
 800073c:	dbf1      	blt.n	8000722 <_write+0x12>
  }
  return len;
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b006      	add	sp, #24
 8000746:	bd80      	pop	{r7, pc}

08000748 <_close>:

int _close(int file)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000750:	2301      	movs	r3, #1
 8000752:	425b      	negs	r3, r3
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0192      	lsls	r2, r2, #6
 800076c:	605a      	str	r2, [r3, #4]
  return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <_isatty>:

int _isatty(int file)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000780:	2301      	movs	r3, #1
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}

0800078a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b004      	add	sp, #16
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f002 f886 	bl	80028e0 <__errno>
 80007d4:	0003      	movs	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	18d2      	adds	r2, r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b006      	add	sp, #24
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20001800 	.word	0x20001800
 8000800:	00000400 	.word	0x00000400
 8000804:	20000118 	.word	0x20000118
 8000808:	20000290 	.word	0x20000290

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f7ff fff6 	bl	800080c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <LoopForever+0x6>)
    LDR R1, [R0]
 8000822:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000824:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoopForever+0xa>)
    CMP R1, R2
 8000828:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800082a:	d105      	bne.n	8000838 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800082e:	4912      	ldr	r1, [pc, #72]	; (8000878 <LoopForever+0x12>)
    STR R1, [R0]
 8000830:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000834:	4912      	ldr	r1, [pc, #72]	; (8000880 <LoopForever+0x1a>)
    STR R1, [R0]
 8000836:	6001      	str	r1, [r0, #0]

08000838 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <LoopForever+0x1e>)
  ldr r1, =_edata
 800083a:	4913      	ldr	r1, [pc, #76]	; (8000888 <LoopForever+0x22>)
  ldr r2, =_sidata
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <LoopForever+0x26>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000850:	4c10      	ldr	r4, [pc, #64]	; (8000894 <LoopForever+0x2e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800085e:	f002 f845 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff fd9b 	bl	800039c <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   r0, =_estack
 8000868:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800086c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000870:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000874:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000878:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800087c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000880:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800088c:	080037fc 	.word	0x080037fc
  ldr r2, =_sbss
 8000890:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000894:	2000028c 	.word	0x2000028c

08000898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>
	...

0800089c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_Init+0x24>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_Init+0x24>)
 80008a6:	2110      	movs	r1, #16
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f809 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b2:	f7ff fe89 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_InitTick+0x5c>)
 80008ce:	681c      	ldr	r4, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x60>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0019      	movs	r1, r3
 80008d6:	23fa      	movs	r3, #250	; 0xfa
 80008d8:	0098      	lsls	r0, r3, #2
 80008da:	f7ff fc27 	bl	800012c <__udivsi3>
 80008de:	0003      	movs	r3, r0
 80008e0:	0019      	movs	r1, r3
 80008e2:	0020      	movs	r0, r4
 80008e4:	f7ff fc22 	bl	800012c <__udivsi3>
 80008e8:	0003      	movs	r3, r0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 f905 	bl	8000afa <HAL_SYSTICK_Config>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e00f      	b.n	8000918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d80b      	bhi.n	8000916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f8e2 	bl	8000ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_InitTick+0x64>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b003      	add	sp, #12
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	18d2      	adds	r2, r2, r3
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000008 	.word	0x20000008
 800094c:	2000011c 	.word	0x2000011c

08000950 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	2000011c 	.word	0x2000011c

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	0003      	movs	r3, r0
 8000972:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001a      	movs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	189b      	adds	r3, r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	0002      	movs	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b7f      	cmp	r3, #127	; 0x7f
 80009c0:	d828      	bhi.n	8000a14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c2:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <__NVIC_SetPriority+0xd4>)
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	33c0      	adds	r3, #192	; 0xc0
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	589b      	ldr	r3, [r3, r2]
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	0011      	movs	r1, r2
 80009d8:	2203      	movs	r2, #3
 80009da:	400a      	ands	r2, r1
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	21ff      	movs	r1, #255	; 0xff
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	401a      	ands	r2, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	2303      	movs	r3, #3
 80009fa:	4003      	ands	r3, r0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <__NVIC_SetPriority+0xd4>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	33c0      	adds	r3, #192	; 0xc0
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a12:	e031      	b.n	8000a78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <__NVIC_SetPriority+0xd8>)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	400b      	ands	r3, r1
 8000a20:	3b08      	subs	r3, #8
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3306      	adds	r3, #6
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <__NVIC_SetPriority+0xd8>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001c      	movs	r4, r3
 8000a64:	230f      	movs	r3, #15
 8000a66:	4023      	ands	r3, r4
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	3306      	adds	r3, #6
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	18c3      	adds	r3, r0, r3
 8000a74:	3304      	adds	r3, #4
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	045b      	lsls	r3, r3, #17
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d301      	bcc.n	8000aa0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e010      	b.n	8000ac2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SysTick_Config+0x44>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	425b      	negs	r3, r3
 8000aac:	2103      	movs	r1, #3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff ff7c 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x44>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	210f      	movs	r1, #15
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	1c02      	adds	r2, r0, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ff5d 	bl	80009ac <__NVIC_SetPriority>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ffbf 	bl	8000a88 <SysTick_Config>
 8000b0a:	0003      	movs	r3, r0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	603a      	str	r2, [r7, #0]
 8000b20:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b22:	2317      	movs	r3, #23
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000b2a:	2316      	movs	r3, #22
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000b32:	2315      	movs	r3, #21
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <HAL_FLASH_Program+0x120>)
 8000b3c:	7e1b      	ldrb	r3, [r3, #24]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <HAL_FLASH_Program+0x32>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e072      	b.n	8000c2c <HAL_FLASH_Program+0x118>
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <HAL_FLASH_Program+0x120>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b4c:	2317      	movs	r3, #23
 8000b4e:	18fe      	adds	r6, r7, r3
 8000b50:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <HAL_FLASH_Program+0x124>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f8ce 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000b5c:	2317      	movs	r3, #23
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d15c      	bne.n	8000c20 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d104      	bne.n	8000b76 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000b6c:	2315      	movs	r3, #21
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e00b      	b.n	8000b8e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d104      	bne.n	8000b86 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b7c:	2315      	movs	r3, #21
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2202      	movs	r2, #2
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e003      	b.n	8000b8e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b86:	2315      	movs	r3, #21
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b8e:	2316      	movs	r3, #22
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e039      	b.n	8000c0c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b98:	2116      	movs	r1, #22
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	005a      	lsls	r2, r3, #1
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	18d0      	adds	r0, r2, r3
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	001a      	movs	r2, r3
 8000bac:	3a20      	subs	r2, #32
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	db03      	blt.n	8000bba <HAL_FLASH_Program+0xa6>
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	40d1      	lsrs	r1, r2
 8000bb6:	000c      	movs	r4, r1
 8000bb8:	e008      	b.n	8000bcc <HAL_FLASH_Program+0xb8>
 8000bba:	2220      	movs	r2, #32
 8000bbc:	1ad2      	subs	r2, r2, r3
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	40d9      	lsrs	r1, r3
 8000bc8:	000c      	movs	r4, r1
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	40da      	lsrs	r2, r3
 8000bd0:	0015      	movs	r5, r2
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	f000 f871 	bl	8000cbc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bda:	2317      	movs	r3, #23
 8000bdc:	18fe      	adds	r6, r7, r3
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_FLASH_Program+0x124>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 f887 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000be6:	0003      	movs	r3, r0
 8000be8:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_FLASH_Program+0x128>)
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_FLASH_Program+0x128>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000bf6:	2317      	movs	r3, #23
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10e      	bne.n	8000c1e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000c00:	2116      	movs	r1, #22
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	3201      	adds	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	2316      	movs	r3, #22
 8000c0e:	18fa      	adds	r2, r7, r3
 8000c10:	2315      	movs	r3, #21
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3bd      	bcc.n	8000b98 <HAL_FLASH_Program+0x84>
 8000c1c:	e000      	b.n	8000c20 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000c1e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_FLASH_Program+0x120>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	761a      	strb	r2, [r3, #24]

  return status;
 8000c26:	2317      	movs	r3, #23
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b007      	add	sp, #28
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c34:	20000120 	.word	0x20000120
 8000c38:	0000c350 	.word	0x0000c350
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_FLASH_Unlock+0x40>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	4013      	ands	r3, r2
 8000c54:	d00d      	beq.n	8000c72 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_FLASH_Unlock+0x40>)
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_FLASH_Unlock+0x44>)
 8000c5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_FLASH_Unlock+0x40>)
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_FLASH_Unlock+0x48>)
 8000c60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_FLASH_Unlock+0x40>)
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d002      	beq.n	8000c72 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40022000 	.word	0x40022000
 8000c84:	45670123 	.word	0x45670123
 8000c88:	cdef89ab 	.word	0xcdef89ab

08000c8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_FLASH_Lock+0x18>)
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_FLASH_Lock+0x18>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_FLASH_GetError+0x10>)
 8000cae:	69db      	ldr	r3, [r3, #28]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000120 	.word	0x20000120

08000cbc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	1cbb      	adds	r3, r7, #2
 8000cc8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <FLASH_Program_HalfWord+0x30>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <FLASH_Program_HalfWord+0x34>)
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <FLASH_Program_HalfWord+0x34>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1cba      	adds	r2, r7, #2
 8000ce0:	8812      	ldrh	r2, [r2, #0]
 8000ce2:	801a      	strh	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000120 	.word	0x20000120
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fe28 	bl	8000950 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d04:	e00f      	b.n	8000d26 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	d00c      	beq.n	8000d26 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <FLASH_WaitForLastOperation+0x2e>
 8000d12:	f7ff fe1d 	bl	8000950 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d201      	bcs.n	8000d26 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e01f      	b.n	8000d66 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <FLASH_WaitForLastOperation+0x7c>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d0e9      	beq.n	8000d06 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <FLASH_WaitForLastOperation+0x7c>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2220      	movs	r2, #32
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b20      	cmp	r3, #32
 8000d3c:	d102      	bne.n	8000d44 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <FLASH_WaitForLastOperation+0x7c>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <FLASH_WaitForLastOperation+0x7c>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2210      	movs	r2, #16
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b10      	cmp	r3, #16
 8000d4e:	d005      	beq.n	8000d5c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <FLASH_WaitForLastOperation+0x7c>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2204      	movs	r2, #4
 8000d56:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d103      	bne.n	8000d64 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d5c:	f000 f80a 	bl	8000d74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40022000 	.word	0x40022000

08000d74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <FLASH_SetErrorCode+0x58>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	2210      	movs	r2, #16
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b10      	cmp	r3, #16
 8000d88:	d109      	bne.n	8000d9e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000d94:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2210      	movs	r2, #16
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <FLASH_SetErrorCode+0x58>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2204      	movs	r2, #4
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d109      	bne.n	8000dbe <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	2201      	movs	r2, #1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <FLASH_SetErrorCode+0x5c>)
 8000db4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2204      	movs	r2, #4
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <FLASH_SetErrorCode+0x58>)
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	60da      	str	r2, [r3, #12]
}  
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	20000120 	.word	0x20000120

08000dd4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <HAL_FLASHEx_Erase+0xe0>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d101      	bne.n	8000df6 <HAL_FLASHEx_Erase+0x22>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e05a      	b.n	8000eac <HAL_FLASHEx_Erase+0xd8>
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_FLASHEx_Erase+0xe0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d116      	bne.n	8000e32 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_FLASHEx_Erase+0xe4>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff ff74 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d147      	bne.n	8000ea0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000e10:	f000 f856 	bl	8000ec0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fc      	adds	r4, r7, r3
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_FLASHEx_Erase+0xe4>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff6a 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000e20:	0003      	movs	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_FLASHEx_Erase+0xe8>)
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_FLASHEx_Erase+0xe8>)
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	e036      	b.n	8000ea0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_FLASHEx_Erase+0xe4>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d130      	bne.n	8000ea0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4252      	negs	r2, r2
 8000e44:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	e01f      	b.n	8000e8e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 f84d 	bl	8000ef0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e56:	250f      	movs	r5, #15
 8000e58:	197c      	adds	r4, r7, r5
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_FLASHEx_Erase+0xe4>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff49 	bl	8000cf4 <FLASH_WaitForLastOperation>
 8000e62:	0003      	movs	r3, r0
 8000e64:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_FLASHEx_Erase+0xe8>)
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_FLASHEx_Erase+0xe8>)
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	438a      	bics	r2, r1
 8000e70:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000e72:	197b      	adds	r3, r7, r5
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	601a      	str	r2, [r3, #0]
            break;
 8000e80:	e00e      	b.n	8000ea0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	00d2      	lsls	r2, r2, #3
 8000e88:	4694      	mov	ip, r2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	029a      	lsls	r2, r3, #10
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3d6      	bcc.n	8000e4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_FLASHEx_Erase+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	761a      	strb	r2, [r3, #24]

  return status;
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b004      	add	sp, #16
 8000eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb4:	20000120 	.word	0x20000120
 8000eb8:	0000c350 	.word	0x0000c350
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <FLASH_MassErase+0x28>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <FLASH_MassErase+0x2c>)
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <FLASH_MassErase+0x2c>)
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <FLASH_MassErase+0x2c>)
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <FLASH_MassErase+0x2c>)
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	611a      	str	r2, [r3, #16]
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000120 	.word	0x20000120
 8000eec:	40022000 	.word	0x40022000

08000ef0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <FLASH_PageErase+0x34>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <FLASH_PageErase+0x38>)
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <FLASH_PageErase+0x38>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	430a      	orrs	r2, r1
 8000f08:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <FLASH_PageErase+0x38>)
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <FLASH_PageErase+0x38>)
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <FLASH_PageErase+0x38>)
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000120 	.word	0x20000120
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e14f      	b.n	80011dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x28>
 8000f52:	e140      	b.n	80011d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	2201      	movs	r2, #1
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d017      	beq.n	800100a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	4013      	ands	r3, r2
 8001012:	2b02      	cmp	r3, #2
 8001014:	d123      	bne.n	800105e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2207      	movs	r2, #7
 8001028:	4013      	ands	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2107      	movs	r1, #7
 8001042:	400b      	ands	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	6939      	ldr	r1, [r7, #16]
 800105c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d100      	bne.n	80010a0 <HAL_GPIO_Init+0x174>
 800109e:	e09a      	b.n	80011d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x2cc>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	589b      	ldr	r3, [r3, r2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2390      	movs	r3, #144	; 0x90
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x1e2>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a44      	ldr	r2, [pc, #272]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x1de>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a43      	ldr	r2, [pc, #268]	; (8001200 <HAL_GPIO_Init+0x2d4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x1da>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a42      	ldr	r2, [pc, #264]	; (8001204 <HAL_GPIO_Init+0x2d8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x1d6>
 80010fe:	2303      	movs	r3, #3
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x1e4>
 8001102:	2305      	movs	r3, #5
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x1e4>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x1e4>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x1e4>
 800110e:	2300      	movs	r3, #0
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	2103      	movs	r1, #3
 8001114:	400a      	ands	r2, r1
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x2cc>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	035b      	lsls	r3, r3, #13
 8001146:	4013      	ands	r3, r2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	039b      	lsls	r3, r3, #14
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	029b      	lsls	r3, r3, #10
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	025b      	lsls	r3, r3, #9
 80011c4:	4013      	ands	r3, r2
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	1e13      	subs	r3, r2, #0
 80011e6:	d000      	beq.n	80011ea <HAL_GPIO_Init+0x2be>
 80011e8:	e6a8      	b.n	8000f3c <HAL_GPIO_Init+0x10>
  } 
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	0008      	movs	r0, r1
 8001216:	0011      	movs	r1, r2
 8001218:	1cbb      	adds	r3, r7, #2
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	1c7b      	adds	r3, r7, #1
 8001220:	1c0a      	adds	r2, r1, #0
 8001222:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001224:	1c7b      	adds	r3, r7, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e305      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x1e>
 8001264:	e08d      	b.n	8001382 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001266:	4bc5      	ldr	r3, [pc, #788]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	220c      	movs	r2, #12
 800126c:	4013      	ands	r3, r2
 800126e:	2b04      	cmp	r3, #4
 8001270:	d00e      	beq.n	8001290 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001272:	4bc2      	ldr	r3, [pc, #776]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	220c      	movs	r2, #12
 8001278:	4013      	ands	r3, r2
 800127a:	2b08      	cmp	r3, #8
 800127c:	d116      	bne.n	80012ac <HAL_RCC_OscConfig+0x64>
 800127e:	4bbf      	ldr	r3, [pc, #764]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	401a      	ands	r2, r3
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	429a      	cmp	r2, r3
 800128e:	d10d      	bne.n	80012ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4bba      	ldr	r3, [pc, #744]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	029b      	lsls	r3, r3, #10
 8001298:	4013      	ands	r3, r2
 800129a:	d100      	bne.n	800129e <HAL_RCC_OscConfig+0x56>
 800129c:	e070      	b.n	8001380 <HAL_RCC_OscConfig+0x138>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d000      	beq.n	80012a8 <HAL_RCC_OscConfig+0x60>
 80012a6:	e06b      	b.n	8001380 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e2dc      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d107      	bne.n	80012c4 <HAL_RCC_OscConfig+0x7c>
 80012b4:	4bb1      	ldr	r3, [pc, #708]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4bb0      	ldr	r3, [pc, #704]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e02f      	b.n	8001324 <HAL_RCC_OscConfig+0xdc>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x9e>
 80012cc:	4bab      	ldr	r3, [pc, #684]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4baa      	ldr	r3, [pc, #680]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012d2:	49ab      	ldr	r1, [pc, #684]	; (8001580 <HAL_RCC_OscConfig+0x338>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	4ba8      	ldr	r3, [pc, #672]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4ba7      	ldr	r3, [pc, #668]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012de:	49a9      	ldr	r1, [pc, #676]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e01e      	b.n	8001324 <HAL_RCC_OscConfig+0xdc>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d10e      	bne.n	800130c <HAL_RCC_OscConfig+0xc4>
 80012ee:	4ba3      	ldr	r3, [pc, #652]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4ba2      	ldr	r3, [pc, #648]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	02c9      	lsls	r1, r1, #11
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	4b9f      	ldr	r3, [pc, #636]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0249      	lsls	r1, r1, #9
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xdc>
 800130c:	4b9b      	ldr	r3, [pc, #620]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b9a      	ldr	r3, [pc, #616]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001312:	499b      	ldr	r1, [pc, #620]	; (8001580 <HAL_RCC_OscConfig+0x338>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	4b98      	ldr	r3, [pc, #608]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b97      	ldr	r3, [pc, #604]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800131e:	4999      	ldr	r1, [pc, #612]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d014      	beq.n	8001356 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb10 	bl	8000950 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001336:	f7ff fb0b 	bl	8000950 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e28e      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001348:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	029b      	lsls	r3, r3, #10
 8001350:	4013      	ands	r3, r2
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0xee>
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fafb 	bl	8000950 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff faf6 	bl	8000950 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e279      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x118>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x146>
 800138c:	e06c      	b.n	8001468 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800138e:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	220c      	movs	r2, #12
 8001394:	4013      	ands	r3, r2
 8001396:	d00e      	beq.n	80013b6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001398:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	220c      	movs	r2, #12
 800139e:	4013      	ands	r3, r2
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d11f      	bne.n	80013e4 <HAL_RCC_OscConfig+0x19c>
 80013a4:	4b75      	ldr	r3, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	23c0      	movs	r3, #192	; 0xc0
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	401a      	ands	r2, r3
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d005      	beq.n	80013cc <HAL_RCC_OscConfig+0x184>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e24c      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	22f8      	movs	r2, #248	; 0xf8
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00da      	lsls	r2, r3, #3
 80013dc:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	e041      	b.n	8001468 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d024      	beq.n	8001436 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b63      	ldr	r3, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff faaa 	bl	8000950 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff faa5 	bl	8000950 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e228      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b59      	ldr	r3, [pc, #356]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d0f1      	beq.n	8001402 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	22f8      	movs	r2, #248	; 0xf8
 8001424:	4393      	bics	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	00da      	lsls	r2, r3, #3
 800142e:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e018      	b.n	8001468 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800143c:	2101      	movs	r1, #1
 800143e:	438a      	bics	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa85 	bl	8000950 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fa80 	bl	8000950 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e203      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d1f1      	bne.n	800144c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2208      	movs	r2, #8
 800146e:	4013      	ands	r3, r2
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fa63 	bl	8000950 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fa5e 	bl	8000950 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1e1      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0f1      	beq.n	8001490 <HAL_RCC_OscConfig+0x248>
 80014ac:	e018      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	438a      	bics	r2, r1
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fa49 	bl	8000950 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa44 	bl	8000950 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1c7      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f1      	bne.n	80014c4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	4013      	ands	r3, r2
 80014e8:	d100      	bne.n	80014ec <HAL_RCC_OscConfig+0x2a4>
 80014ea:	e0b5      	b.n	8001658 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ec:	201f      	movs	r0, #31
 80014ee:	183b      	adds	r3, r7, r0
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x334>)
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	055b      	lsls	r3, r3, #21
 80014fc:	4013      	ands	r3, r2
 80014fe:	d110      	bne.n	8001522 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0549      	lsls	r1, r1, #21
 800150a:	430a      	orrs	r2, r1
 800150c:	61da      	str	r2, [r3, #28]
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	055b      	lsls	r3, r3, #21
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800151c:	183b      	adds	r3, r7, r0
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_RCC_OscConfig+0x340>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d11a      	bne.n	8001564 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_RCC_OscConfig+0x340>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_RCC_OscConfig+0x340>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0049      	lsls	r1, r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153c:	f7ff fa08 	bl	8000950 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fa03 	bl	8000950 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e186      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_RCC_OscConfig+0x340>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10f      	bne.n	800158c <HAL_RCC_OscConfig+0x344>
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_RCC_OscConfig+0x334>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_RCC_OscConfig+0x334>)
 8001572:	2101      	movs	r1, #1
 8001574:	430a      	orrs	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
 8001578:	e036      	b.n	80015e8 <HAL_RCC_OscConfig+0x3a0>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40021000 	.word	0x40021000
 8001580:	fffeffff 	.word	0xfffeffff
 8001584:	fffbffff 	.word	0xfffbffff
 8001588:	40007000 	.word	0x40007000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <HAL_RCC_OscConfig+0x366>
 8001594:	4bb6      	ldr	r3, [pc, #728]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4bb5      	ldr	r3, [pc, #724]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	621a      	str	r2, [r3, #32]
 80015a0:	4bb3      	ldr	r3, [pc, #716]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	4bb2      	ldr	r3, [pc, #712]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	438a      	bics	r2, r1
 80015aa:	621a      	str	r2, [r3, #32]
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x3a0>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x388>
 80015b6:	4bae      	ldr	r3, [pc, #696]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	4bad      	ldr	r3, [pc, #692]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015bc:	2104      	movs	r1, #4
 80015be:	430a      	orrs	r2, r1
 80015c0:	621a      	str	r2, [r3, #32]
 80015c2:	4bab      	ldr	r3, [pc, #684]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	4baa      	ldr	r3, [pc, #680]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	621a      	str	r2, [r3, #32]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x3a0>
 80015d0:	4ba7      	ldr	r3, [pc, #668]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	4ba6      	ldr	r3, [pc, #664]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	438a      	bics	r2, r1
 80015da:	621a      	str	r2, [r3, #32]
 80015dc:	4ba4      	ldr	r3, [pc, #656]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	4ba3      	ldr	r3, [pc, #652]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80015e2:	2104      	movs	r1, #4
 80015e4:	438a      	bics	r2, r1
 80015e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d014      	beq.n	800161a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff f9ae 	bl	8000950 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e009      	b.n	800160e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff f9a9 	bl	8000950 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a9b      	ldr	r2, [pc, #620]	; (8001874 <HAL_RCC_OscConfig+0x62c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e12b      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b98      	ldr	r3, [pc, #608]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x3b2>
 8001618:	e013      	b.n	8001642 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f999 	bl	8000950 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e009      	b.n	8001638 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f994 	bl	8000950 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4a91      	ldr	r2, [pc, #580]	; (8001874 <HAL_RCC_OscConfig+0x62c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e116      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	4b8d      	ldr	r3, [pc, #564]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001642:	231f      	movs	r3, #31
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	4b87      	ldr	r3, [pc, #540]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001652:	4989      	ldr	r1, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x630>)
 8001654:	400a      	ands	r2, r1
 8001656:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2210      	movs	r2, #16
 800165e:	4013      	ands	r3, r2
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d12a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800166a:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800166c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166e:	4b80      	ldr	r3, [pc, #512]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001670:	2104      	movs	r1, #4
 8001672:	430a      	orrs	r2, r1
 8001674:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001676:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800167c:	2101      	movs	r1, #1
 800167e:	430a      	orrs	r2, r1
 8001680:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff f965 	bl	8000950 <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800168c:	f7ff f960 	bl	8000950 <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0e3      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800169e:	4b74      	ldr	r3, [pc, #464]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f1      	beq.n	800168c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016a8:	4b71      	ldr	r3, [pc, #452]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	22f8      	movs	r2, #248	; 0xf8
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
 80016be:	e034      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	3305      	adds	r3, #5
 80016c6:	d111      	bne.n	80016ec <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016c8:	4b69      	ldr	r3, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	438a      	bics	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016d4:	4b66      	ldr	r3, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	22f8      	movs	r2, #248	; 0xf8
 80016da:	4393      	bics	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	00da      	lsls	r2, r3, #3
 80016e4:	4b62      	ldr	r3, [pc, #392]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016e6:	430a      	orrs	r2, r1
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ea:	e01e      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016ec:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f0:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016f2:	2104      	movs	r1, #4
 80016f4:	430a      	orrs	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fc:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff f924 	bl	8000950 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800170e:	f7ff f91f 	bl	8000950 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0a2      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f1      	bne.n	800170e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d100      	bne.n	8001734 <HAL_RCC_OscConfig+0x4ec>
 8001732:	e097      	b.n	8001864 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	220c      	movs	r2, #12
 800173a:	4013      	ands	r3, r2
 800173c:	2b08      	cmp	r3, #8
 800173e:	d100      	bne.n	8001742 <HAL_RCC_OscConfig+0x4fa>
 8001740:	e06b      	b.n	800181a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d14c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b48      	ldr	r3, [pc, #288]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001750:	494a      	ldr	r1, [pc, #296]	; (800187c <HAL_RCC_OscConfig+0x634>)
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff f8fb 	bl	8000950 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f8f6 	bl	8000950 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e079      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	049b      	lsls	r3, r3, #18
 800177a:	4013      	ands	r3, r2
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177e:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	220f      	movs	r2, #15
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x638>)
 8001798:	4013      	ands	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	431a      	orrs	r2, r3
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	0449      	lsls	r1, r1, #17
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f8c9 	bl	8000950 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f8c4 	bl	8000950 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e047      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	049b      	lsls	r3, r3, #18
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x57c>
 80017e2:	e03f      	b.n	8001864 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 80017ea:	4924      	ldr	r1, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x634>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f8ae 	bl	8000950 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff f8a9 	bl	8000950 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e02c      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	049b      	lsls	r3, r3, #18
 8001814:	4013      	ands	r3, r2
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x5b2>
 8001818:	e024      	b.n	8001864 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e01f      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_OscConfig+0x628>)
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	401a      	ands	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	429a      	cmp	r2, r3
 8001840:	d10e      	bne.n	8001860 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	220f      	movs	r2, #15
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	23f0      	movs	r3, #240	; 0xf0
 8001854:	039b      	lsls	r3, r3, #14
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b008      	add	sp, #32
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	00001388 	.word	0x00001388
 8001878:	efffffff 	.word	0xefffffff
 800187c:	feffffff 	.word	0xfeffffff
 8001880:	ffc27fff 	.word	0xffc27fff

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b3      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d911      	bls.n	80018ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b58      	ldr	r3, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e09a      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d015      	beq.n	8001900 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d006      	beq.n	80018ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80018e4:	21e0      	movs	r1, #224	; 0xe0
 80018e6:	00c9      	lsls	r1, r1, #3
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	22f0      	movs	r2, #240	; 0xf0
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	4013      	ands	r3, r2
 800191c:	d114      	bne.n	8001948 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06e      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	4013      	ands	r3, r2
 8001934:	d108      	bne.n	8001948 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e062      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e05b      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2203      	movs	r2, #3
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195c:	f7fe fff8 	bl	8000950 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001964:	e009      	b.n	800197a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001966:	f7fe fff3 	bl	8000950 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x18c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e042      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	220c      	movs	r2, #12
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ec      	bne.n	8001966 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d211      	bcs.n	80019be <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4393      	bics	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x184>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e020      	b.n	8001a00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_RCC_ClockConfig+0x190>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019dc:	f000 f820 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019e0:	0001      	movs	r1, r0
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x188>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	220f      	movs	r2, #15
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x194>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	000a      	movs	r2, r1
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x198>)
 80019f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7fe ff63 	bl	80008c4 <HAL_InitTick>
  
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	00001388 	.word	0x00001388
 8001a14:	fffff8ff 	.word	0xfffff8ff
 8001a18:	08003788 	.word	0x08003788
 8001a1c:	20000000 	.word	0x20000000

08001a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	220c      	movs	r2, #12
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x30>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4e:	e02e      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a52:	613b      	str	r3, [r7, #16]
      break;
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	220f      	movs	r2, #15
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_RCC_GetSysClockFreq+0xac>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	23c0      	movs	r3, #192	; 0xc0
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	401a      	ands	r2, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a86:	f7fe fb51 	bl	800012c <__udivsi3>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4353      	muls	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a9a:	f7fe fb47 	bl	800012c <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4353      	muls	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
      break;
 8001aac:	e002      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ab0:	613b      	str	r3, [r7, #16]
      break;
 8001ab2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ab4:	693b      	ldr	r3, [r7, #16]
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b006      	add	sp, #24
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	007a1200 	.word	0x007a1200
 8001ac8:	080037a0 	.word	0x080037a0
 8001acc:	080037b0 	.word	0x080037b0

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	0001      	movs	r1, r0
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	2207      	movs	r2, #7
 8001af6:	4013      	ands	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	000b      	movs	r3, r1
}    
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08003798 	.word	0x08003798

08001b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e044      	b.n	8001bac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2278      	movs	r2, #120	; 0x78
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fd6b 	bl	8000610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2224      	movs	r2, #36	; 0x24
 8001b3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f8d0 	bl	8001cf8 <UART_SetConfig>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e024      	b.n	8001bac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fa03 	bl	8001f78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <HAL_UART_Init+0xa4>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	438a      	bics	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fa9b 	bl	80020e0 <UART_CheckIdleState>
 8001baa:	0003      	movs	r3, r0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	fffff7ff 	.word	0xfffff7ff

08001bb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d000      	beq.n	8001bd2 <HAL_UART_Transmit+0x1a>
 8001bd0:	e08d      	b.n	8001cee <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_UART_Transmit+0x28>
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e085      	b.n	8001cf0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d109      	bne.n	8001c04 <HAL_UART_Transmit+0x4c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e075      	b.n	8001cf0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2284      	movs	r2, #132	; 0x84
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c12:	f7fe fe9d 	bl	8000950 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1dba      	adds	r2, r7, #6
 8001c1e:	2150      	movs	r1, #80	; 0x50
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1dba      	adds	r2, r7, #6
 8001c28:	2152      	movs	r1, #82	; 0x52
 8001c2a:	8812      	ldrh	r2, [r2, #0]
 8001c2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d108      	bne.n	8001c4c <HAL_UART_Transmit+0x94>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e003      	b.n	8001c54 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c54:	e030      	b.n	8001cb8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	0013      	movs	r3, r2
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	f000 fae4 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e03c      	b.n	8001cf0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	05d2      	lsls	r2, r2, #23
 8001c86:	0dd2      	lsrs	r2, r2, #23
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	e008      	b.n	8001ca6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2252      	movs	r2, #82	; 0x52
 8001caa:	5a9b      	ldrh	r3, [r3, r2]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2252      	movs	r2, #82	; 0x52
 8001cb6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2252      	movs	r2, #82	; 0x52
 8001cbc:	5a9b      	ldrh	r3, [r3, r2]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1c8      	bne.n	8001c56 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	0013      	movs	r3, r2
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	f000 faad 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8001cd6:	1e03      	subs	r3, r0, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e005      	b.n	8001cf0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b008      	add	sp, #32
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d00:	231e      	movs	r3, #30
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a8d      	ldr	r2, [pc, #564]	; (8001f5c <UART_SetConfig+0x264>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a88      	ldr	r2, [pc, #544]	; (8001f60 <UART_SetConfig+0x268>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <UART_SetConfig+0x26c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a7b      	ldr	r2, [pc, #492]	; (8001f68 <UART_SetConfig+0x270>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d127      	bne.n	8001dce <UART_SetConfig+0xd6>
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <UART_SetConfig+0x274>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	2203      	movs	r2, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d00d      	beq.n	8001da6 <UART_SetConfig+0xae>
 8001d8a:	d81b      	bhi.n	8001dc4 <UART_SetConfig+0xcc>
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d014      	beq.n	8001dba <UART_SetConfig+0xc2>
 8001d90:	d818      	bhi.n	8001dc4 <UART_SetConfig+0xcc>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <UART_SetConfig+0xa4>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d00a      	beq.n	8001db0 <UART_SetConfig+0xb8>
 8001d9a:	e013      	b.n	8001dc4 <UART_SetConfig+0xcc>
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e021      	b.n	8001dea <UART_SetConfig+0xf2>
 8001da6:	231f      	movs	r3, #31
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2202      	movs	r2, #2
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e01c      	b.n	8001dea <UART_SetConfig+0xf2>
 8001db0:	231f      	movs	r3, #31
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2204      	movs	r2, #4
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e017      	b.n	8001dea <UART_SetConfig+0xf2>
 8001dba:	231f      	movs	r3, #31
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e012      	b.n	8001dea <UART_SetConfig+0xf2>
 8001dc4:	231f      	movs	r3, #31
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2210      	movs	r2, #16
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e00d      	b.n	8001dea <UART_SetConfig+0xf2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <UART_SetConfig+0x278>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d104      	bne.n	8001de2 <UART_SetConfig+0xea>
 8001dd8:	231f      	movs	r3, #31
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e003      	b.n	8001dea <UART_SetConfig+0xf2>
 8001de2:	231f      	movs	r3, #31
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2210      	movs	r2, #16
 8001de8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d15c      	bne.n	8001eb0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d015      	beq.n	8001e2c <UART_SetConfig+0x134>
 8001e00:	dc18      	bgt.n	8001e34 <UART_SetConfig+0x13c>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d00d      	beq.n	8001e22 <UART_SetConfig+0x12a>
 8001e06:	dc15      	bgt.n	8001e34 <UART_SetConfig+0x13c>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <UART_SetConfig+0x11a>
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d005      	beq.n	8001e1c <UART_SetConfig+0x124>
 8001e10:	e010      	b.n	8001e34 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff fe67 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001e16:	0003      	movs	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
        break;
 8001e1a:	e012      	b.n	8001e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <UART_SetConfig+0x27c>)
 8001e1e:	61bb      	str	r3, [r7, #24]
        break;
 8001e20:	e00f      	b.n	8001e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e22:	f7ff fdfd 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
        break;
 8001e2a:	e00a      	b.n	8001e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	61bb      	str	r3, [r7, #24]
        break;
 8001e32:	e006      	b.n	8001e42 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e38:	231e      	movs	r3, #30
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
        break;
 8001e40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d100      	bne.n	8001e4a <UART_SetConfig+0x152>
 8001e48:	e07a      	b.n	8001f40 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	005a      	lsls	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	18d2      	adds	r2, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f7fe f965 	bl	800012c <__udivsi3>
 8001e62:	0003      	movs	r3, r0
 8001e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d91c      	bls.n	8001ea6 <UART_SetConfig+0x1ae>
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d217      	bcs.n	8001ea6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	200e      	movs	r0, #14
 8001e7c:	183b      	adds	r3, r7, r0
 8001e7e:	210f      	movs	r1, #15
 8001e80:	438a      	bics	r2, r1
 8001e82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	183a      	adds	r2, r7, r0
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	183a      	adds	r2, r7, r0
 8001ea0:	8812      	ldrh	r2, [r2, #0]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	e04c      	b.n	8001f40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001ea6:	231e      	movs	r3, #30
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e047      	b.n	8001f40 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eb0:	231f      	movs	r3, #31
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d015      	beq.n	8001ee6 <UART_SetConfig+0x1ee>
 8001eba:	dc18      	bgt.n	8001eee <UART_SetConfig+0x1f6>
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00d      	beq.n	8001edc <UART_SetConfig+0x1e4>
 8001ec0:	dc15      	bgt.n	8001eee <UART_SetConfig+0x1f6>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <UART_SetConfig+0x1d4>
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d005      	beq.n	8001ed6 <UART_SetConfig+0x1de>
 8001eca:	e010      	b.n	8001eee <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f7ff fe0a 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	61bb      	str	r3, [r7, #24]
        break;
 8001ed4:	e012      	b.n	8001efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <UART_SetConfig+0x27c>)
 8001ed8:	61bb      	str	r3, [r7, #24]
        break;
 8001eda:	e00f      	b.n	8001efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001edc:	f7ff fda0 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	61bb      	str	r3, [r7, #24]
        break;
 8001ee4:	e00a      	b.n	8001efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	61bb      	str	r3, [r7, #24]
        break;
 8001eec:	e006      	b.n	8001efc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ef2:	231e      	movs	r3, #30
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
        break;
 8001efa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01e      	beq.n	8001f40 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	085a      	lsrs	r2, r3, #1
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	18d2      	adds	r2, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	f7fe f90a 	bl	800012c <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d90a      	bls.n	8001f38 <UART_SetConfig+0x240>
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d205      	bcs.n	8001f38 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e003      	b.n	8001f40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001f38:	231e      	movs	r3, #30
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001f4c:	231e      	movs	r3, #30
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b008      	add	sp, #32
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	efff69f3 	.word	0xefff69f3
 8001f60:	ffffcfff 	.word	0xffffcfff
 8001f64:	fffff4ff 	.word	0xfffff4ff
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40004400 	.word	0x40004400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a4a      	ldr	r2, [pc, #296]	; (80020bc <UART_AdvFeatureConfig+0x144>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a43      	ldr	r2, [pc, #268]	; (80020c0 <UART_AdvFeatureConfig+0x148>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00b      	beq.n	8001fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <UART_AdvFeatureConfig+0x14c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2208      	movs	r2, #8
 8001fec:	4013      	ands	r3, r2
 8001fee:	d00b      	beq.n	8002008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <UART_AdvFeatureConfig+0x150>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2210      	movs	r2, #16
 800200e:	4013      	ands	r3, r2
 8002010:	d00b      	beq.n	800202a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <UART_AdvFeatureConfig+0x154>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2220      	movs	r2, #32
 8002030:	4013      	ands	r3, r2
 8002032:	d00b      	beq.n	800204c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <UART_AdvFeatureConfig+0x158>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	4013      	ands	r3, r2
 8002054:	d01d      	beq.n	8002092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <UART_AdvFeatureConfig+0x15c>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	035b      	lsls	r3, r3, #13
 8002076:	429a      	cmp	r2, r3
 8002078:	d10b      	bne.n	8002092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <UART_AdvFeatureConfig+0x160>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	4013      	ands	r3, r2
 800209a:	d00b      	beq.n	80020b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <UART_AdvFeatureConfig+0x164>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	fffdffff 	.word	0xfffdffff
 80020c0:	fffeffff 	.word	0xfffeffff
 80020c4:	fffbffff 	.word	0xfffbffff
 80020c8:	ffff7fff 	.word	0xffff7fff
 80020cc:	ffffefff 	.word	0xffffefff
 80020d0:	ffffdfff 	.word	0xffffdfff
 80020d4:	ffefffff 	.word	0xffefffff
 80020d8:	ff9fffff 	.word	0xff9fffff
 80020dc:	fff7ffff 	.word	0xfff7ffff

080020e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b092      	sub	sp, #72	; 0x48
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2284      	movs	r2, #132	; 0x84
 80020ec:	2100      	movs	r1, #0
 80020ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020f0:	f7fe fc2e 	bl	8000950 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2208      	movs	r2, #8
 8002100:	4013      	ands	r3, r2
 8002102:	2b08      	cmp	r3, #8
 8002104:	d12c      	bne.n	8002160 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0391      	lsls	r1, r2, #14
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4a46      	ldr	r2, [pc, #280]	; (8002228 <UART_CheckIdleState+0x148>)
 8002110:	9200      	str	r2, [sp, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	f000 f88c 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d021      	beq.n	8002160 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211c:	f3ef 8310 	mrs	r3, PRIMASK
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
 8002126:	2301      	movs	r3, #1
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	f383 8810 	msr	PRIMASK, r3
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	438a      	bics	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002148:	f383 8810 	msr	PRIMASK, r3
}
 800214c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2278      	movs	r2, #120	; 0x78
 8002158:	2100      	movs	r1, #0
 800215a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e05f      	b.n	8002220 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	2b04      	cmp	r3, #4
 800216c:	d146      	bne.n	80021fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800216e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	03d1      	lsls	r1, r2, #15
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <UART_CheckIdleState+0x148>)
 8002178:	9200      	str	r2, [sp, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	f000 f858 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d03b      	beq.n	80021fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002184:	f3ef 8310 	mrs	r3, PRIMASK
 8002188:	60fb      	str	r3, [r7, #12]
  return(result);
 800218a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
 800218e:	2301      	movs	r3, #1
 8002190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f383 8810 	msr	PRIMASK, r3
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4921      	ldr	r1, [pc, #132]	; (800222c <UART_CheckIdleState+0x14c>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f383 8810 	msr	PRIMASK, r3
}
 80021b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80021bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
 80021c0:	2301      	movs	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f383 8810 	msr	PRIMASK, r3
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f383 8810 	msr	PRIMASK, r3
}
 80021e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	2120      	movs	r1, #32
 80021ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2278      	movs	r2, #120	; 0x78
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e011      	b.n	8002220 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	2120      	movs	r1, #32
 8002208:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2278      	movs	r2, #120	; 0x78
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b010      	add	sp, #64	; 0x40
 8002226:	bd80      	pop	{r7, pc}
 8002228:	01ffffff 	.word	0x01ffffff
 800222c:	fffffedf 	.word	0xfffffedf

08002230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002240:	e04b      	b.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3301      	adds	r3, #1
 8002246:	d048      	beq.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002248:	f7fe fb82 	bl	8000950 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	429a      	cmp	r2, r3
 8002256:	d302      	bcc.n	800225e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04b      	b.n	80022fa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2204      	movs	r2, #4
 800226a:	4013      	ands	r3, r2
 800226c:	d035      	beq.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	2b08      	cmp	r3, #8
 800227a:	d111      	bne.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2208      	movs	r2, #8
 8002282:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f83c 	bl	8002304 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2284      	movs	r2, #132	; 0x84
 8002290:	2108      	movs	r1, #8
 8002292:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2278      	movs	r2, #120	; 0x78
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e02c      	b.n	80022fa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	401a      	ands	r2, r3
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d112      	bne.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 f81f 	bl	8002304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2284      	movs	r2, #132	; 0x84
 80022ca:	2120      	movs	r1, #32
 80022cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2278      	movs	r2, #120	; 0x78
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e00f      	b.n	80022fa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	425a      	negs	r2, r3
 80022ea:	4153      	adcs	r3, r2
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	001a      	movs	r2, r3
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d0a4      	beq.n	8002242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08e      	sub	sp, #56	; 0x38
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230c:	f3ef 8310 	mrs	r3, PRIMASK
 8002310:	617b      	str	r3, [r7, #20]
  return(result);
 8002312:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
 8002316:	2301      	movs	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f383 8810 	msr	PRIMASK, r3
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4926      	ldr	r1, [pc, #152]	; (80023c8 <UART_EndRxTransfer+0xc4>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f383 8810 	msr	PRIMASK, r3
}
 800233c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	623b      	str	r3, [r7, #32]
  return(result);
 8002344:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
 8002348:	2301      	movs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f383 8810 	msr	PRIMASK, r3
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2101      	movs	r1, #1
 8002360:	438a      	bics	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	2b01      	cmp	r3, #1
 8002376:	d118      	bne.n	80023aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002378:	f3ef 8310 	mrs	r3, PRIMASK
 800237c:	60bb      	str	r3, [r7, #8]
  return(result);
 800237e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002382:	2301      	movs	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f383 8810 	msr	PRIMASK, r3
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2110      	movs	r1, #16
 800239a:	438a      	bics	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f383 8810 	msr	PRIMASK, r3
}
 80023a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	2120      	movs	r1, #32
 80023b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b00e      	add	sp, #56	; 0x38
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	fffffedf 	.word	0xfffffedf

080023cc <std>:
 80023cc:	2300      	movs	r3, #0
 80023ce:	b510      	push	{r4, lr}
 80023d0:	0004      	movs	r4, r0
 80023d2:	6003      	str	r3, [r0, #0]
 80023d4:	6043      	str	r3, [r0, #4]
 80023d6:	6083      	str	r3, [r0, #8]
 80023d8:	8181      	strh	r1, [r0, #12]
 80023da:	6643      	str	r3, [r0, #100]	; 0x64
 80023dc:	0019      	movs	r1, r3
 80023de:	81c2      	strh	r2, [r0, #14]
 80023e0:	6103      	str	r3, [r0, #16]
 80023e2:	6143      	str	r3, [r0, #20]
 80023e4:	6183      	str	r3, [r0, #24]
 80023e6:	2208      	movs	r2, #8
 80023e8:	305c      	adds	r0, #92	; 0x5c
 80023ea:	f000 fa23 	bl	8002834 <memset>
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <std+0x38>)
 80023f0:	6224      	str	r4, [r4, #32]
 80023f2:	6263      	str	r3, [r4, #36]	; 0x24
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <std+0x3c>)
 80023f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <std+0x40>)
 80023fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <std+0x44>)
 80023fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002400:	bd10      	pop	{r4, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	08002651 	.word	0x08002651
 8002408:	08002679 	.word	0x08002679
 800240c:	080026b1 	.word	0x080026b1
 8002410:	080026dd 	.word	0x080026dd

08002414 <stdio_exit_handler>:
 8002414:	b510      	push	{r4, lr}
 8002416:	4a03      	ldr	r2, [pc, #12]	; (8002424 <stdio_exit_handler+0x10>)
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <stdio_exit_handler+0x14>)
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <stdio_exit_handler+0x18>)
 800241c:	f000 f86c 	bl	80024f8 <_fwalk_sglue>
 8002420:	bd10      	pop	{r4, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	2000000c 	.word	0x2000000c
 8002428:	08003495 	.word	0x08003495
 800242c:	20000018 	.word	0x20000018

08002430 <cleanup_stdio>:
 8002430:	6841      	ldr	r1, [r0, #4]
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <cleanup_stdio+0x30>)
 8002434:	b510      	push	{r4, lr}
 8002436:	0004      	movs	r4, r0
 8002438:	4299      	cmp	r1, r3
 800243a:	d001      	beq.n	8002440 <cleanup_stdio+0x10>
 800243c:	f001 f82a 	bl	8003494 <_fflush_r>
 8002440:	68a1      	ldr	r1, [r4, #8]
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <cleanup_stdio+0x34>)
 8002444:	4299      	cmp	r1, r3
 8002446:	d002      	beq.n	800244e <cleanup_stdio+0x1e>
 8002448:	0020      	movs	r0, r4
 800244a:	f001 f823 	bl	8003494 <_fflush_r>
 800244e:	68e1      	ldr	r1, [r4, #12]
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <cleanup_stdio+0x38>)
 8002452:	4299      	cmp	r1, r3
 8002454:	d002      	beq.n	800245c <cleanup_stdio+0x2c>
 8002456:	0020      	movs	r0, r4
 8002458:	f001 f81c 	bl	8003494 <_fflush_r>
 800245c:	bd10      	pop	{r4, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	20000140 	.word	0x20000140
 8002464:	200001a8 	.word	0x200001a8
 8002468:	20000210 	.word	0x20000210

0800246c <global_stdio_init.part.0>:
 800246c:	b510      	push	{r4, lr}
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <global_stdio_init.part.0+0x28>)
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <global_stdio_init.part.0+0x2c>)
 8002472:	2104      	movs	r1, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4809      	ldr	r0, [pc, #36]	; (800249c <global_stdio_init.part.0+0x30>)
 8002478:	2200      	movs	r2, #0
 800247a:	f7ff ffa7 	bl	80023cc <std>
 800247e:	2201      	movs	r2, #1
 8002480:	2109      	movs	r1, #9
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <global_stdio_init.part.0+0x34>)
 8002484:	f7ff ffa2 	bl	80023cc <std>
 8002488:	2202      	movs	r2, #2
 800248a:	2112      	movs	r1, #18
 800248c:	4805      	ldr	r0, [pc, #20]	; (80024a4 <global_stdio_init.part.0+0x38>)
 800248e:	f7ff ff9d 	bl	80023cc <std>
 8002492:	bd10      	pop	{r4, pc}
 8002494:	20000278 	.word	0x20000278
 8002498:	08002415 	.word	0x08002415
 800249c:	20000140 	.word	0x20000140
 80024a0:	200001a8 	.word	0x200001a8
 80024a4:	20000210 	.word	0x20000210

080024a8 <__sfp_lock_acquire>:
 80024a8:	b510      	push	{r4, lr}
 80024aa:	4802      	ldr	r0, [pc, #8]	; (80024b4 <__sfp_lock_acquire+0xc>)
 80024ac:	f000 fa42 	bl	8002934 <__retarget_lock_acquire_recursive>
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000281 	.word	0x20000281

080024b8 <__sfp_lock_release>:
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <__sfp_lock_release+0xc>)
 80024bc:	f000 fa3b 	bl	8002936 <__retarget_lock_release_recursive>
 80024c0:	bd10      	pop	{r4, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	20000281 	.word	0x20000281

080024c8 <__sinit>:
 80024c8:	b510      	push	{r4, lr}
 80024ca:	0004      	movs	r4, r0
 80024cc:	f7ff ffec 	bl	80024a8 <__sfp_lock_acquire>
 80024d0:	6a23      	ldr	r3, [r4, #32]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <__sinit+0x14>
 80024d6:	f7ff ffef 	bl	80024b8 <__sfp_lock_release>
 80024da:	bd10      	pop	{r4, pc}
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__sinit+0x28>)
 80024de:	6223      	str	r3, [r4, #32]
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__sinit+0x2c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f6      	bne.n	80024d6 <__sinit+0xe>
 80024e8:	f7ff ffc0 	bl	800246c <global_stdio_init.part.0>
 80024ec:	e7f3      	b.n	80024d6 <__sinit+0xe>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	08002431 	.word	0x08002431
 80024f4:	20000278 	.word	0x20000278

080024f8 <_fwalk_sglue>:
 80024f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024fa:	0014      	movs	r4, r2
 80024fc:	2600      	movs	r6, #0
 80024fe:	9000      	str	r0, [sp, #0]
 8002500:	9101      	str	r1, [sp, #4]
 8002502:	68a5      	ldr	r5, [r4, #8]
 8002504:	6867      	ldr	r7, [r4, #4]
 8002506:	3f01      	subs	r7, #1
 8002508:	d504      	bpl.n	8002514 <_fwalk_sglue+0x1c>
 800250a:	6824      	ldr	r4, [r4, #0]
 800250c:	2c00      	cmp	r4, #0
 800250e:	d1f8      	bne.n	8002502 <_fwalk_sglue+0xa>
 8002510:	0030      	movs	r0, r6
 8002512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002514:	89ab      	ldrh	r3, [r5, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d908      	bls.n	800252c <_fwalk_sglue+0x34>
 800251a:	220e      	movs	r2, #14
 800251c:	5eab      	ldrsh	r3, [r5, r2]
 800251e:	3301      	adds	r3, #1
 8002520:	d004      	beq.n	800252c <_fwalk_sglue+0x34>
 8002522:	0029      	movs	r1, r5
 8002524:	9800      	ldr	r0, [sp, #0]
 8002526:	9b01      	ldr	r3, [sp, #4]
 8002528:	4798      	blx	r3
 800252a:	4306      	orrs	r6, r0
 800252c:	3568      	adds	r5, #104	; 0x68
 800252e:	e7ea      	b.n	8002506 <_fwalk_sglue+0xe>

08002530 <iprintf>:
 8002530:	b40f      	push	{r0, r1, r2, r3}
 8002532:	b507      	push	{r0, r1, r2, lr}
 8002534:	4905      	ldr	r1, [pc, #20]	; (800254c <iprintf+0x1c>)
 8002536:	ab04      	add	r3, sp, #16
 8002538:	6808      	ldr	r0, [r1, #0]
 800253a:	cb04      	ldmia	r3!, {r2}
 800253c:	6881      	ldr	r1, [r0, #8]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	f000 fc82 	bl	8002e48 <_vfiprintf_r>
 8002544:	b003      	add	sp, #12
 8002546:	bc08      	pop	{r3}
 8002548:	b004      	add	sp, #16
 800254a:	4718      	bx	r3
 800254c:	20000064 	.word	0x20000064

08002550 <_puts_r>:
 8002550:	6a03      	ldr	r3, [r0, #32]
 8002552:	b570      	push	{r4, r5, r6, lr}
 8002554:	0005      	movs	r5, r0
 8002556:	000e      	movs	r6, r1
 8002558:	6884      	ldr	r4, [r0, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <_puts_r+0x12>
 800255e:	f7ff ffb3 	bl	80024c8 <__sinit>
 8002562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002564:	07db      	lsls	r3, r3, #31
 8002566:	d405      	bmi.n	8002574 <_puts_r+0x24>
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	059b      	lsls	r3, r3, #22
 800256c:	d402      	bmi.n	8002574 <_puts_r+0x24>
 800256e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002570:	f000 f9e0 	bl	8002934 <__retarget_lock_acquire_recursive>
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	071b      	lsls	r3, r3, #28
 8002578:	d502      	bpl.n	8002580 <_puts_r+0x30>
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11f      	bne.n	80025c0 <_puts_r+0x70>
 8002580:	0021      	movs	r1, r4
 8002582:	0028      	movs	r0, r5
 8002584:	f000 f8f2 	bl	800276c <__swsetup_r>
 8002588:	2800      	cmp	r0, #0
 800258a:	d019      	beq.n	80025c0 <_puts_r+0x70>
 800258c:	2501      	movs	r5, #1
 800258e:	426d      	negs	r5, r5
 8002590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002592:	07db      	lsls	r3, r3, #31
 8002594:	d405      	bmi.n	80025a2 <_puts_r+0x52>
 8002596:	89a3      	ldrh	r3, [r4, #12]
 8002598:	059b      	lsls	r3, r3, #22
 800259a:	d402      	bmi.n	80025a2 <_puts_r+0x52>
 800259c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800259e:	f000 f9ca 	bl	8002936 <__retarget_lock_release_recursive>
 80025a2:	0028      	movs	r0, r5
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
 80025a6:	3601      	adds	r6, #1
 80025a8:	60a3      	str	r3, [r4, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da04      	bge.n	80025b8 <_puts_r+0x68>
 80025ae:	69a2      	ldr	r2, [r4, #24]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dc16      	bgt.n	80025e2 <_puts_r+0x92>
 80025b4:	290a      	cmp	r1, #10
 80025b6:	d014      	beq.n	80025e2 <_puts_r+0x92>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	6022      	str	r2, [r4, #0]
 80025be:	7019      	strb	r1, [r3, #0]
 80025c0:	68a3      	ldr	r3, [r4, #8]
 80025c2:	7831      	ldrb	r1, [r6, #0]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	2900      	cmp	r1, #0
 80025c8:	d1ed      	bne.n	80025a6 <_puts_r+0x56>
 80025ca:	60a3      	str	r3, [r4, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da0f      	bge.n	80025f0 <_puts_r+0xa0>
 80025d0:	0028      	movs	r0, r5
 80025d2:	0022      	movs	r2, r4
 80025d4:	310a      	adds	r1, #10
 80025d6:	f000 f887 	bl	80026e8 <__swbuf_r>
 80025da:	250a      	movs	r5, #10
 80025dc:	3001      	adds	r0, #1
 80025de:	d1d7      	bne.n	8002590 <_puts_r+0x40>
 80025e0:	e7d4      	b.n	800258c <_puts_r+0x3c>
 80025e2:	0022      	movs	r2, r4
 80025e4:	0028      	movs	r0, r5
 80025e6:	f000 f87f 	bl	80026e8 <__swbuf_r>
 80025ea:	3001      	adds	r0, #1
 80025ec:	d1e8      	bne.n	80025c0 <_puts_r+0x70>
 80025ee:	e7cd      	b.n	800258c <_puts_r+0x3c>
 80025f0:	250a      	movs	r5, #10
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	6022      	str	r2, [r4, #0]
 80025f8:	701d      	strb	r5, [r3, #0]
 80025fa:	e7c9      	b.n	8002590 <_puts_r+0x40>

080025fc <puts>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	4b03      	ldr	r3, [pc, #12]	; (800260c <puts+0x10>)
 8002600:	0001      	movs	r1, r0
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f7ff ffa4 	bl	8002550 <_puts_r>
 8002608:	bd10      	pop	{r4, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	20000064 	.word	0x20000064

08002610 <siprintf>:
 8002610:	b40e      	push	{r1, r2, r3}
 8002612:	b500      	push	{lr}
 8002614:	490b      	ldr	r1, [pc, #44]	; (8002644 <siprintf+0x34>)
 8002616:	b09c      	sub	sp, #112	; 0x70
 8002618:	ab1d      	add	r3, sp, #116	; 0x74
 800261a:	9002      	str	r0, [sp, #8]
 800261c:	9006      	str	r0, [sp, #24]
 800261e:	9107      	str	r1, [sp, #28]
 8002620:	9104      	str	r1, [sp, #16]
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <siprintf+0x38>)
 8002624:	4909      	ldr	r1, [pc, #36]	; (800264c <siprintf+0x3c>)
 8002626:	cb04      	ldmia	r3!, {r2}
 8002628:	9105      	str	r1, [sp, #20]
 800262a:	6800      	ldr	r0, [r0, #0]
 800262c:	a902      	add	r1, sp, #8
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	f000 fae2 	bl	8002bf8 <_svfiprintf_r>
 8002634:	2200      	movs	r2, #0
 8002636:	9b02      	ldr	r3, [sp, #8]
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	b01c      	add	sp, #112	; 0x70
 800263c:	bc08      	pop	{r3}
 800263e:	b003      	add	sp, #12
 8002640:	4718      	bx	r3
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	7fffffff 	.word	0x7fffffff
 8002648:	20000064 	.word	0x20000064
 800264c:	ffff0208 	.word	0xffff0208

08002650 <__sread>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	000c      	movs	r4, r1
 8002654:	250e      	movs	r5, #14
 8002656:	5f49      	ldrsh	r1, [r1, r5]
 8002658:	f000 f91a 	bl	8002890 <_read_r>
 800265c:	2800      	cmp	r0, #0
 800265e:	db03      	blt.n	8002668 <__sread+0x18>
 8002660:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002662:	181b      	adds	r3, r3, r0
 8002664:	6563      	str	r3, [r4, #84]	; 0x54
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	4a02      	ldr	r2, [pc, #8]	; (8002674 <__sread+0x24>)
 800266c:	4013      	ands	r3, r2
 800266e:	81a3      	strh	r3, [r4, #12]
 8002670:	e7f9      	b.n	8002666 <__sread+0x16>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	ffffefff 	.word	0xffffefff

08002678 <__swrite>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	001f      	movs	r7, r3
 800267c:	898b      	ldrh	r3, [r1, #12]
 800267e:	0005      	movs	r5, r0
 8002680:	000c      	movs	r4, r1
 8002682:	0016      	movs	r6, r2
 8002684:	05db      	lsls	r3, r3, #23
 8002686:	d505      	bpl.n	8002694 <__swrite+0x1c>
 8002688:	230e      	movs	r3, #14
 800268a:	5ec9      	ldrsh	r1, [r1, r3]
 800268c:	2200      	movs	r2, #0
 800268e:	2302      	movs	r3, #2
 8002690:	f000 f8ea 	bl	8002868 <_lseek_r>
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <__swrite+0x34>)
 8002698:	0028      	movs	r0, r5
 800269a:	4013      	ands	r3, r2
 800269c:	81a3      	strh	r3, [r4, #12]
 800269e:	0032      	movs	r2, r6
 80026a0:	230e      	movs	r3, #14
 80026a2:	5ee1      	ldrsh	r1, [r4, r3]
 80026a4:	003b      	movs	r3, r7
 80026a6:	f000 f907 	bl	80028b8 <_write_r>
 80026aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ac:	ffffefff 	.word	0xffffefff

080026b0 <__sseek>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	000c      	movs	r4, r1
 80026b4:	250e      	movs	r5, #14
 80026b6:	5f49      	ldrsh	r1, [r1, r5]
 80026b8:	f000 f8d6 	bl	8002868 <_lseek_r>
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	1c42      	adds	r2, r0, #1
 80026c0:	d103      	bne.n	80026ca <__sseek+0x1a>
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <__sseek+0x28>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0152      	lsls	r2, r2, #5
 80026ce:	4313      	orrs	r3, r2
 80026d0:	81a3      	strh	r3, [r4, #12]
 80026d2:	6560      	str	r0, [r4, #84]	; 0x54
 80026d4:	e7f8      	b.n	80026c8 <__sseek+0x18>
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	ffffefff 	.word	0xffffefff

080026dc <__sclose>:
 80026dc:	b510      	push	{r4, lr}
 80026de:	230e      	movs	r3, #14
 80026e0:	5ec9      	ldrsh	r1, [r1, r3]
 80026e2:	f000 f8af 	bl	8002844 <_close_r>
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <__swbuf_r>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	0006      	movs	r6, r0
 80026ec:	000d      	movs	r5, r1
 80026ee:	0014      	movs	r4, r2
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d004      	beq.n	80026fe <__swbuf_r+0x16>
 80026f4:	6a03      	ldr	r3, [r0, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <__swbuf_r+0x16>
 80026fa:	f7ff fee5 	bl	80024c8 <__sinit>
 80026fe:	69a3      	ldr	r3, [r4, #24]
 8002700:	60a3      	str	r3, [r4, #8]
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	071b      	lsls	r3, r3, #28
 8002706:	d528      	bpl.n	800275a <__swbuf_r+0x72>
 8002708:	6923      	ldr	r3, [r4, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d025      	beq.n	800275a <__swbuf_r+0x72>
 800270e:	6923      	ldr	r3, [r4, #16]
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	b2ef      	uxtb	r7, r5
 8002714:	1ac0      	subs	r0, r0, r3
 8002716:	6963      	ldr	r3, [r4, #20]
 8002718:	b2ed      	uxtb	r5, r5
 800271a:	4283      	cmp	r3, r0
 800271c:	dc05      	bgt.n	800272a <__swbuf_r+0x42>
 800271e:	0021      	movs	r1, r4
 8002720:	0030      	movs	r0, r6
 8002722:	f000 feb7 	bl	8003494 <_fflush_r>
 8002726:	2800      	cmp	r0, #0
 8002728:	d11d      	bne.n	8002766 <__swbuf_r+0x7e>
 800272a:	68a3      	ldr	r3, [r4, #8]
 800272c:	3001      	adds	r0, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	60a3      	str	r3, [r4, #8]
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	6022      	str	r2, [r4, #0]
 8002738:	701f      	strb	r7, [r3, #0]
 800273a:	6963      	ldr	r3, [r4, #20]
 800273c:	4283      	cmp	r3, r0
 800273e:	d004      	beq.n	800274a <__swbuf_r+0x62>
 8002740:	89a3      	ldrh	r3, [r4, #12]
 8002742:	07db      	lsls	r3, r3, #31
 8002744:	d507      	bpl.n	8002756 <__swbuf_r+0x6e>
 8002746:	2d0a      	cmp	r5, #10
 8002748:	d105      	bne.n	8002756 <__swbuf_r+0x6e>
 800274a:	0021      	movs	r1, r4
 800274c:	0030      	movs	r0, r6
 800274e:	f000 fea1 	bl	8003494 <_fflush_r>
 8002752:	2800      	cmp	r0, #0
 8002754:	d107      	bne.n	8002766 <__swbuf_r+0x7e>
 8002756:	0028      	movs	r0, r5
 8002758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800275a:	0021      	movs	r1, r4
 800275c:	0030      	movs	r0, r6
 800275e:	f000 f805 	bl	800276c <__swsetup_r>
 8002762:	2800      	cmp	r0, #0
 8002764:	d0d3      	beq.n	800270e <__swbuf_r+0x26>
 8002766:	2501      	movs	r5, #1
 8002768:	426d      	negs	r5, r5
 800276a:	e7f4      	b.n	8002756 <__swbuf_r+0x6e>

0800276c <__swsetup_r>:
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <__swsetup_r+0xc4>)
 800276e:	b570      	push	{r4, r5, r6, lr}
 8002770:	0005      	movs	r5, r0
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	000c      	movs	r4, r1
 8002776:	2800      	cmp	r0, #0
 8002778:	d004      	beq.n	8002784 <__swsetup_r+0x18>
 800277a:	6a03      	ldr	r3, [r0, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <__swsetup_r+0x18>
 8002780:	f7ff fea2 	bl	80024c8 <__sinit>
 8002784:	230c      	movs	r3, #12
 8002786:	5ee2      	ldrsh	r2, [r4, r3]
 8002788:	b293      	uxth	r3, r2
 800278a:	0711      	lsls	r1, r2, #28
 800278c:	d423      	bmi.n	80027d6 <__swsetup_r+0x6a>
 800278e:	06d9      	lsls	r1, r3, #27
 8002790:	d407      	bmi.n	80027a2 <__swsetup_r+0x36>
 8002792:	2309      	movs	r3, #9
 8002794:	2001      	movs	r0, #1
 8002796:	602b      	str	r3, [r5, #0]
 8002798:	3337      	adds	r3, #55	; 0x37
 800279a:	4313      	orrs	r3, r2
 800279c:	81a3      	strh	r3, [r4, #12]
 800279e:	4240      	negs	r0, r0
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	075b      	lsls	r3, r3, #29
 80027a4:	d513      	bpl.n	80027ce <__swsetup_r+0x62>
 80027a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027a8:	2900      	cmp	r1, #0
 80027aa:	d008      	beq.n	80027be <__swsetup_r+0x52>
 80027ac:	0023      	movs	r3, r4
 80027ae:	3344      	adds	r3, #68	; 0x44
 80027b0:	4299      	cmp	r1, r3
 80027b2:	d002      	beq.n	80027ba <__swsetup_r+0x4e>
 80027b4:	0028      	movs	r0, r5
 80027b6:	f000 f8bf 	bl	8002938 <_free_r>
 80027ba:	2300      	movs	r3, #0
 80027bc:	6363      	str	r3, [r4, #52]	; 0x34
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	4393      	bics	r3, r2
 80027c4:	81a3      	strh	r3, [r4, #12]
 80027c6:	2300      	movs	r3, #0
 80027c8:	6063      	str	r3, [r4, #4]
 80027ca:	6923      	ldr	r3, [r4, #16]
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	2308      	movs	r3, #8
 80027d0:	89a2      	ldrh	r2, [r4, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	81a3      	strh	r3, [r4, #12]
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <__swsetup_r+0x88>
 80027dc:	21a0      	movs	r1, #160	; 0xa0
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	0089      	lsls	r1, r1, #2
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	400b      	ands	r3, r1
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <__swsetup_r+0x88>
 80027ec:	0021      	movs	r1, r4
 80027ee:	0028      	movs	r0, r5
 80027f0:	f000 fea4 	bl	800353c <__smakebuf_r>
 80027f4:	220c      	movs	r2, #12
 80027f6:	5ea3      	ldrsh	r3, [r4, r2]
 80027f8:	2001      	movs	r0, #1
 80027fa:	001a      	movs	r2, r3
 80027fc:	b299      	uxth	r1, r3
 80027fe:	4002      	ands	r2, r0
 8002800:	4203      	tst	r3, r0
 8002802:	d00f      	beq.n	8002824 <__swsetup_r+0xb8>
 8002804:	2200      	movs	r2, #0
 8002806:	60a2      	str	r2, [r4, #8]
 8002808:	6962      	ldr	r2, [r4, #20]
 800280a:	4252      	negs	r2, r2
 800280c:	61a2      	str	r2, [r4, #24]
 800280e:	2000      	movs	r0, #0
 8002810:	6922      	ldr	r2, [r4, #16]
 8002812:	4282      	cmp	r2, r0
 8002814:	d1c4      	bne.n	80027a0 <__swsetup_r+0x34>
 8002816:	0609      	lsls	r1, r1, #24
 8002818:	d5c2      	bpl.n	80027a0 <__swsetup_r+0x34>
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	4313      	orrs	r3, r2
 800281e:	81a3      	strh	r3, [r4, #12]
 8002820:	3801      	subs	r0, #1
 8002822:	e7bd      	b.n	80027a0 <__swsetup_r+0x34>
 8002824:	0788      	lsls	r0, r1, #30
 8002826:	d400      	bmi.n	800282a <__swsetup_r+0xbe>
 8002828:	6962      	ldr	r2, [r4, #20]
 800282a:	60a2      	str	r2, [r4, #8]
 800282c:	e7ef      	b.n	800280e <__swsetup_r+0xa2>
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	20000064 	.word	0x20000064

08002834 <memset>:
 8002834:	0003      	movs	r3, r0
 8002836:	1882      	adds	r2, r0, r2
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	7019      	strb	r1, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_close_r>:
 8002844:	2300      	movs	r3, #0
 8002846:	b570      	push	{r4, r5, r6, lr}
 8002848:	4d06      	ldr	r5, [pc, #24]	; (8002864 <_close_r+0x20>)
 800284a:	0004      	movs	r4, r0
 800284c:	0008      	movs	r0, r1
 800284e:	602b      	str	r3, [r5, #0]
 8002850:	f7fd ff7a 	bl	8000748 <_close>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	d103      	bne.n	8002860 <_close_r+0x1c>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d000      	beq.n	8002860 <_close_r+0x1c>
 800285e:	6023      	str	r3, [r4, #0]
 8002860:	bd70      	pop	{r4, r5, r6, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	2000027c 	.word	0x2000027c

08002868 <_lseek_r>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	0004      	movs	r4, r0
 800286c:	0008      	movs	r0, r1
 800286e:	0011      	movs	r1, r2
 8002870:	001a      	movs	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	4d05      	ldr	r5, [pc, #20]	; (800288c <_lseek_r+0x24>)
 8002876:	602b      	str	r3, [r5, #0]
 8002878:	f7fd ff87 	bl	800078a <_lseek>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d103      	bne.n	8002888 <_lseek_r+0x20>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d000      	beq.n	8002888 <_lseek_r+0x20>
 8002886:	6023      	str	r3, [r4, #0]
 8002888:	bd70      	pop	{r4, r5, r6, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	2000027c 	.word	0x2000027c

08002890 <_read_r>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	0004      	movs	r4, r0
 8002894:	0008      	movs	r0, r1
 8002896:	0011      	movs	r1, r2
 8002898:	001a      	movs	r2, r3
 800289a:	2300      	movs	r3, #0
 800289c:	4d05      	ldr	r5, [pc, #20]	; (80028b4 <_read_r+0x24>)
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f7fd ff19 	bl	80006d6 <_read>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d103      	bne.n	80028b0 <_read_r+0x20>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d000      	beq.n	80028b0 <_read_r+0x20>
 80028ae:	6023      	str	r3, [r4, #0]
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	2000027c 	.word	0x2000027c

080028b8 <_write_r>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	0004      	movs	r4, r0
 80028bc:	0008      	movs	r0, r1
 80028be:	0011      	movs	r1, r2
 80028c0:	001a      	movs	r2, r3
 80028c2:	2300      	movs	r3, #0
 80028c4:	4d05      	ldr	r5, [pc, #20]	; (80028dc <_write_r+0x24>)
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	f7fd ff22 	bl	8000710 <_write>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d103      	bne.n	80028d8 <_write_r+0x20>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d000      	beq.n	80028d8 <_write_r+0x20>
 80028d6:	6023      	str	r3, [r4, #0]
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	2000027c 	.word	0x2000027c

080028e0 <__errno>:
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <__errno+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	20000064 	.word	0x20000064

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4d0d      	ldr	r5, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	2600      	movs	r6, #0
 80028fe:	f000 fef1 	bl	80036e4 <_init>
 8002902:	4c0a      	ldr	r4, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4d0a      	ldr	r5, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	00b3      	lsls	r3, r6, #2
 8002912:	58eb      	ldr	r3, [r5, r3]
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	00b3      	lsls	r3, r6, #2
 800291c:	58eb      	ldr	r3, [r5, r3]
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	080037f4 	.word	0x080037f4
 8002928:	080037f4 	.word	0x080037f4
 800292c:	080037f8 	.word	0x080037f8
 8002930:	080037f4 	.word	0x080037f4

08002934 <__retarget_lock_acquire_recursive>:
 8002934:	4770      	bx	lr

08002936 <__retarget_lock_release_recursive>:
 8002936:	4770      	bx	lr

08002938 <_free_r>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	0005      	movs	r5, r0
 800293c:	2900      	cmp	r1, #0
 800293e:	d010      	beq.n	8002962 <_free_r+0x2a>
 8002940:	1f0c      	subs	r4, r1, #4
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da00      	bge.n	800294a <_free_r+0x12>
 8002948:	18e4      	adds	r4, r4, r3
 800294a:	0028      	movs	r0, r5
 800294c:	f000 f8e2 	bl	8002b14 <__malloc_lock>
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <_free_r+0x90>)
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <_free_r+0x2c>
 8002958:	6063      	str	r3, [r4, #4]
 800295a:	6014      	str	r4, [r2, #0]
 800295c:	0028      	movs	r0, r5
 800295e:	f000 f8e1 	bl	8002b24 <__malloc_unlock>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	42a3      	cmp	r3, r4
 8002966:	d908      	bls.n	800297a <_free_r+0x42>
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	1821      	adds	r1, r4, r0
 800296c:	428b      	cmp	r3, r1
 800296e:	d1f3      	bne.n	8002958 <_free_r+0x20>
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	1809      	adds	r1, r1, r0
 8002976:	6021      	str	r1, [r4, #0]
 8002978:	e7ee      	b.n	8002958 <_free_r+0x20>
 800297a:	001a      	movs	r2, r3
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <_free_r+0x4e>
 8002982:	42a3      	cmp	r3, r4
 8002984:	d9f9      	bls.n	800297a <_free_r+0x42>
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	1850      	adds	r0, r2, r1
 800298a:	42a0      	cmp	r0, r4
 800298c:	d10b      	bne.n	80029a6 <_free_r+0x6e>
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	1809      	adds	r1, r1, r0
 8002992:	1850      	adds	r0, r2, r1
 8002994:	6011      	str	r1, [r2, #0]
 8002996:	4283      	cmp	r3, r0
 8002998:	d1e0      	bne.n	800295c <_free_r+0x24>
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	1841      	adds	r1, r0, r1
 80029a0:	6011      	str	r1, [r2, #0]
 80029a2:	6053      	str	r3, [r2, #4]
 80029a4:	e7da      	b.n	800295c <_free_r+0x24>
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	d902      	bls.n	80029b0 <_free_r+0x78>
 80029aa:	230c      	movs	r3, #12
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	e7d5      	b.n	800295c <_free_r+0x24>
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	1821      	adds	r1, r4, r0
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d103      	bne.n	80029c0 <_free_r+0x88>
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	1809      	adds	r1, r1, r0
 80029be:	6021      	str	r1, [r4, #0]
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	6054      	str	r4, [r2, #4]
 80029c4:	e7ca      	b.n	800295c <_free_r+0x24>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000284 	.word	0x20000284

080029cc <sbrk_aligned>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4e0f      	ldr	r6, [pc, #60]	; (8002a0c <sbrk_aligned+0x40>)
 80029d0:	000d      	movs	r5, r1
 80029d2:	6831      	ldr	r1, [r6, #0]
 80029d4:	0004      	movs	r4, r0
 80029d6:	2900      	cmp	r1, #0
 80029d8:	d102      	bne.n	80029e0 <sbrk_aligned+0x14>
 80029da:	f000 fe25 	bl	8003628 <_sbrk_r>
 80029de:	6030      	str	r0, [r6, #0]
 80029e0:	0029      	movs	r1, r5
 80029e2:	0020      	movs	r0, r4
 80029e4:	f000 fe20 	bl	8003628 <_sbrk_r>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d00a      	beq.n	8002a02 <sbrk_aligned+0x36>
 80029ec:	2303      	movs	r3, #3
 80029ee:	1cc5      	adds	r5, r0, #3
 80029f0:	439d      	bics	r5, r3
 80029f2:	42a8      	cmp	r0, r5
 80029f4:	d007      	beq.n	8002a06 <sbrk_aligned+0x3a>
 80029f6:	1a29      	subs	r1, r5, r0
 80029f8:	0020      	movs	r0, r4
 80029fa:	f000 fe15 	bl	8003628 <_sbrk_r>
 80029fe:	3001      	adds	r0, #1
 8002a00:	d101      	bne.n	8002a06 <sbrk_aligned+0x3a>
 8002a02:	2501      	movs	r5, #1
 8002a04:	426d      	negs	r5, r5
 8002a06:	0028      	movs	r0, r5
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000288 	.word	0x20000288

08002a10 <_malloc_r>:
 8002a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a12:	2203      	movs	r2, #3
 8002a14:	1ccb      	adds	r3, r1, #3
 8002a16:	4393      	bics	r3, r2
 8002a18:	3308      	adds	r3, #8
 8002a1a:	0006      	movs	r6, r0
 8002a1c:	001f      	movs	r7, r3
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d238      	bcs.n	8002a94 <_malloc_r+0x84>
 8002a22:	270c      	movs	r7, #12
 8002a24:	42b9      	cmp	r1, r7
 8002a26:	d837      	bhi.n	8002a98 <_malloc_r+0x88>
 8002a28:	0030      	movs	r0, r6
 8002a2a:	f000 f873 	bl	8002b14 <__malloc_lock>
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <_malloc_r+0x100>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	001c      	movs	r4, r3
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	d133      	bne.n	8002aa2 <_malloc_r+0x92>
 8002a3a:	0039      	movs	r1, r7
 8002a3c:	0030      	movs	r0, r6
 8002a3e:	f7ff ffc5 	bl	80029cc <sbrk_aligned>
 8002a42:	0004      	movs	r4, r0
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d15e      	bne.n	8002b06 <_malloc_r+0xf6>
 8002a48:	9b00      	ldr	r3, [sp, #0]
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	0025      	movs	r5, r4
 8002a4e:	2d00      	cmp	r5, #0
 8002a50:	d14e      	bne.n	8002af0 <_malloc_r+0xe0>
 8002a52:	2c00      	cmp	r4, #0
 8002a54:	d051      	beq.n	8002afa <_malloc_r+0xea>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	0029      	movs	r1, r5
 8002a5a:	18e3      	adds	r3, r4, r3
 8002a5c:	0030      	movs	r0, r6
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	f000 fde2 	bl	8003628 <_sbrk_r>
 8002a64:	9b01      	ldr	r3, [sp, #4]
 8002a66:	4283      	cmp	r3, r0
 8002a68:	d147      	bne.n	8002afa <_malloc_r+0xea>
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	0030      	movs	r0, r6
 8002a6e:	1aff      	subs	r7, r7, r3
 8002a70:	0039      	movs	r1, r7
 8002a72:	f7ff ffab 	bl	80029cc <sbrk_aligned>
 8002a76:	3001      	adds	r0, #1
 8002a78:	d03f      	beq.n	8002afa <_malloc_r+0xea>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	19db      	adds	r3, r3, r7
 8002a7e:	6023      	str	r3, [r4, #0]
 8002a80:	9b00      	ldr	r3, [sp, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d040      	beq.n	8002b0a <_malloc_r+0xfa>
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	42a2      	cmp	r2, r4
 8002a8c:	d133      	bne.n	8002af6 <_malloc_r+0xe6>
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	e014      	b.n	8002abe <_malloc_r+0xae>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	dac5      	bge.n	8002a24 <_malloc_r+0x14>
 8002a98:	230c      	movs	r3, #12
 8002a9a:	2500      	movs	r5, #0
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	0028      	movs	r0, r5
 8002aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aa2:	6821      	ldr	r1, [r4, #0]
 8002aa4:	1bc9      	subs	r1, r1, r7
 8002aa6:	d420      	bmi.n	8002aea <_malloc_r+0xda>
 8002aa8:	290b      	cmp	r1, #11
 8002aaa:	d918      	bls.n	8002ade <_malloc_r+0xce>
 8002aac:	19e2      	adds	r2, r4, r7
 8002aae:	6027      	str	r7, [r4, #0]
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	d112      	bne.n	8002ada <_malloc_r+0xca>
 8002ab4:	9b00      	ldr	r3, [sp, #0]
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	6011      	str	r1, [r2, #0]
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	0030      	movs	r0, r6
 8002ac0:	0025      	movs	r5, r4
 8002ac2:	f000 f82f 	bl	8002b24 <__malloc_unlock>
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	350b      	adds	r5, #11
 8002aca:	1d23      	adds	r3, r4, #4
 8002acc:	4395      	bics	r5, r2
 8002ace:	1aea      	subs	r2, r5, r3
 8002ad0:	429d      	cmp	r5, r3
 8002ad2:	d0e4      	beq.n	8002a9e <_malloc_r+0x8e>
 8002ad4:	1b5b      	subs	r3, r3, r5
 8002ad6:	50a3      	str	r3, [r4, r2]
 8002ad8:	e7e1      	b.n	8002a9e <_malloc_r+0x8e>
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	e7ec      	b.n	8002ab8 <_malloc_r+0xa8>
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	d1d5      	bne.n	8002a90 <_malloc_r+0x80>
 8002ae4:	9b00      	ldr	r3, [sp, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e7e9      	b.n	8002abe <_malloc_r+0xae>
 8002aea:	0023      	movs	r3, r4
 8002aec:	6864      	ldr	r4, [r4, #4]
 8002aee:	e7a2      	b.n	8002a36 <_malloc_r+0x26>
 8002af0:	002c      	movs	r4, r5
 8002af2:	686d      	ldr	r5, [r5, #4]
 8002af4:	e7ab      	b.n	8002a4e <_malloc_r+0x3e>
 8002af6:	0013      	movs	r3, r2
 8002af8:	e7c4      	b.n	8002a84 <_malloc_r+0x74>
 8002afa:	230c      	movs	r3, #12
 8002afc:	0030      	movs	r0, r6
 8002afe:	6033      	str	r3, [r6, #0]
 8002b00:	f000 f810 	bl	8002b24 <__malloc_unlock>
 8002b04:	e7cb      	b.n	8002a9e <_malloc_r+0x8e>
 8002b06:	6027      	str	r7, [r4, #0]
 8002b08:	e7d9      	b.n	8002abe <_malloc_r+0xae>
 8002b0a:	605b      	str	r3, [r3, #4]
 8002b0c:	deff      	udf	#255	; 0xff
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000284 	.word	0x20000284

08002b14 <__malloc_lock>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4802      	ldr	r0, [pc, #8]	; (8002b20 <__malloc_lock+0xc>)
 8002b18:	f7ff ff0c 	bl	8002934 <__retarget_lock_acquire_recursive>
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000280 	.word	0x20000280

08002b24 <__malloc_unlock>:
 8002b24:	b510      	push	{r4, lr}
 8002b26:	4802      	ldr	r0, [pc, #8]	; (8002b30 <__malloc_unlock+0xc>)
 8002b28:	f7ff ff05 	bl	8002936 <__retarget_lock_release_recursive>
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000280 	.word	0x20000280

08002b34 <__ssputs_r>:
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b085      	sub	sp, #20
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	9203      	str	r2, [sp, #12]
 8002b3c:	688e      	ldr	r6, [r1, #8]
 8002b3e:	9a01      	ldr	r2, [sp, #4]
 8002b40:	0007      	movs	r7, r0
 8002b42:	000c      	movs	r4, r1
 8002b44:	680b      	ldr	r3, [r1, #0]
 8002b46:	4296      	cmp	r6, r2
 8002b48:	d831      	bhi.n	8002bae <__ssputs_r+0x7a>
 8002b4a:	898a      	ldrh	r2, [r1, #12]
 8002b4c:	2190      	movs	r1, #144	; 0x90
 8002b4e:	00c9      	lsls	r1, r1, #3
 8002b50:	420a      	tst	r2, r1
 8002b52:	d029      	beq.n	8002ba8 <__ssputs_r+0x74>
 8002b54:	2003      	movs	r0, #3
 8002b56:	6921      	ldr	r1, [r4, #16]
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	6963      	ldr	r3, [r4, #20]
 8002b5e:	4343      	muls	r3, r0
 8002b60:	0fdd      	lsrs	r5, r3, #31
 8002b62:	18ed      	adds	r5, r5, r3
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	9802      	ldr	r0, [sp, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	181b      	adds	r3, r3, r0
 8002b6c:	106d      	asrs	r5, r5, #1
 8002b6e:	42ab      	cmp	r3, r5
 8002b70:	d900      	bls.n	8002b74 <__ssputs_r+0x40>
 8002b72:	001d      	movs	r5, r3
 8002b74:	0552      	lsls	r2, r2, #21
 8002b76:	d529      	bpl.n	8002bcc <__ssputs_r+0x98>
 8002b78:	0029      	movs	r1, r5
 8002b7a:	0038      	movs	r0, r7
 8002b7c:	f7ff ff48 	bl	8002a10 <_malloc_r>
 8002b80:	1e06      	subs	r6, r0, #0
 8002b82:	d02d      	beq.n	8002be0 <__ssputs_r+0xac>
 8002b84:	9a02      	ldr	r2, [sp, #8]
 8002b86:	6921      	ldr	r1, [r4, #16]
 8002b88:	f000 fd6b 	bl	8003662 <memcpy>
 8002b8c:	89a2      	ldrh	r2, [r4, #12]
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <__ssputs_r+0xc0>)
 8002b90:	401a      	ands	r2, r3
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	4313      	orrs	r3, r2
 8002b96:	81a3      	strh	r3, [r4, #12]
 8002b98:	9b02      	ldr	r3, [sp, #8]
 8002b9a:	6126      	str	r6, [r4, #16]
 8002b9c:	18f6      	adds	r6, r6, r3
 8002b9e:	6026      	str	r6, [r4, #0]
 8002ba0:	6165      	str	r5, [r4, #20]
 8002ba2:	9e01      	ldr	r6, [sp, #4]
 8002ba4:	1aed      	subs	r5, r5, r3
 8002ba6:	60a5      	str	r5, [r4, #8]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	429e      	cmp	r6, r3
 8002bac:	d900      	bls.n	8002bb0 <__ssputs_r+0x7c>
 8002bae:	9e01      	ldr	r6, [sp, #4]
 8002bb0:	0032      	movs	r2, r6
 8002bb2:	9903      	ldr	r1, [sp, #12]
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	f000 fcff 	bl	80035b8 <memmove>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	68a3      	ldr	r3, [r4, #8]
 8002bbe:	1b9b      	subs	r3, r3, r6
 8002bc0:	60a3      	str	r3, [r4, #8]
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	199b      	adds	r3, r3, r6
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	b005      	add	sp, #20
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bcc:	002a      	movs	r2, r5
 8002bce:	0038      	movs	r0, r7
 8002bd0:	f000 fd50 	bl	8003674 <_realloc_r>
 8002bd4:	1e06      	subs	r6, r0, #0
 8002bd6:	d1df      	bne.n	8002b98 <__ssputs_r+0x64>
 8002bd8:	0038      	movs	r0, r7
 8002bda:	6921      	ldr	r1, [r4, #16]
 8002bdc:	f7ff feac 	bl	8002938 <_free_r>
 8002be0:	230c      	movs	r3, #12
 8002be2:	2001      	movs	r0, #1
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	89a2      	ldrh	r2, [r4, #12]
 8002be8:	3334      	adds	r3, #52	; 0x34
 8002bea:	4313      	orrs	r3, r2
 8002bec:	81a3      	strh	r3, [r4, #12]
 8002bee:	4240      	negs	r0, r0
 8002bf0:	e7ea      	b.n	8002bc8 <__ssputs_r+0x94>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	fffffb7f 	.word	0xfffffb7f

08002bf8 <_svfiprintf_r>:
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	b0a1      	sub	sp, #132	; 0x84
 8002bfc:	9003      	str	r0, [sp, #12]
 8002bfe:	001d      	movs	r5, r3
 8002c00:	898b      	ldrh	r3, [r1, #12]
 8002c02:	000f      	movs	r7, r1
 8002c04:	0016      	movs	r6, r2
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	d511      	bpl.n	8002c2e <_svfiprintf_r+0x36>
 8002c0a:	690b      	ldr	r3, [r1, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10e      	bne.n	8002c2e <_svfiprintf_r+0x36>
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	f7ff fefd 	bl	8002a10 <_malloc_r>
 8002c16:	6038      	str	r0, [r7, #0]
 8002c18:	6138      	str	r0, [r7, #16]
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d105      	bne.n	8002c2a <_svfiprintf_r+0x32>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	9a03      	ldr	r2, [sp, #12]
 8002c22:	3801      	subs	r0, #1
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	b021      	add	sp, #132	; 0x84
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	2340      	movs	r3, #64	; 0x40
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	ac08      	add	r4, sp, #32
 8002c32:	6163      	str	r3, [r4, #20]
 8002c34:	3320      	adds	r3, #32
 8002c36:	7663      	strb	r3, [r4, #25]
 8002c38:	3310      	adds	r3, #16
 8002c3a:	76a3      	strb	r3, [r4, #26]
 8002c3c:	9507      	str	r5, [sp, #28]
 8002c3e:	0035      	movs	r5, r6
 8002c40:	782b      	ldrb	r3, [r5, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_svfiprintf_r+0x52>
 8002c46:	2b25      	cmp	r3, #37	; 0x25
 8002c48:	d148      	bne.n	8002cdc <_svfiprintf_r+0xe4>
 8002c4a:	1bab      	subs	r3, r5, r6
 8002c4c:	9305      	str	r3, [sp, #20]
 8002c4e:	42b5      	cmp	r5, r6
 8002c50:	d00b      	beq.n	8002c6a <_svfiprintf_r+0x72>
 8002c52:	0032      	movs	r2, r6
 8002c54:	0039      	movs	r1, r7
 8002c56:	9803      	ldr	r0, [sp, #12]
 8002c58:	f7ff ff6c 	bl	8002b34 <__ssputs_r>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d100      	bne.n	8002c62 <_svfiprintf_r+0x6a>
 8002c60:	e0af      	b.n	8002dc2 <_svfiprintf_r+0x1ca>
 8002c62:	6963      	ldr	r3, [r4, #20]
 8002c64:	9a05      	ldr	r2, [sp, #20]
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	6163      	str	r3, [r4, #20]
 8002c6a:	782b      	ldrb	r3, [r5, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d100      	bne.n	8002c72 <_svfiprintf_r+0x7a>
 8002c70:	e0a7      	b.n	8002dc2 <_svfiprintf_r+0x1ca>
 8002c72:	2201      	movs	r2, #1
 8002c74:	2300      	movs	r3, #0
 8002c76:	4252      	negs	r2, r2
 8002c78:	6062      	str	r2, [r4, #4]
 8002c7a:	a904      	add	r1, sp, #16
 8002c7c:	3254      	adds	r2, #84	; 0x54
 8002c7e:	1852      	adds	r2, r2, r1
 8002c80:	1c6e      	adds	r6, r5, #1
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	60e3      	str	r3, [r4, #12]
 8002c86:	60a3      	str	r3, [r4, #8]
 8002c88:	7013      	strb	r3, [r2, #0]
 8002c8a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c8c:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <_svfiprintf_r+0x1ec>)
 8002c8e:	2205      	movs	r2, #5
 8002c90:	0018      	movs	r0, r3
 8002c92:	7831      	ldrb	r1, [r6, #0]
 8002c94:	9305      	str	r3, [sp, #20]
 8002c96:	f000 fcd9 	bl	800364c <memchr>
 8002c9a:	1c75      	adds	r5, r6, #1
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d11f      	bne.n	8002ce0 <_svfiprintf_r+0xe8>
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	06d3      	lsls	r3, r2, #27
 8002ca4:	d504      	bpl.n	8002cb0 <_svfiprintf_r+0xb8>
 8002ca6:	2353      	movs	r3, #83	; 0x53
 8002ca8:	a904      	add	r1, sp, #16
 8002caa:	185b      	adds	r3, r3, r1
 8002cac:	2120      	movs	r1, #32
 8002cae:	7019      	strb	r1, [r3, #0]
 8002cb0:	0713      	lsls	r3, r2, #28
 8002cb2:	d504      	bpl.n	8002cbe <_svfiprintf_r+0xc6>
 8002cb4:	2353      	movs	r3, #83	; 0x53
 8002cb6:	a904      	add	r1, sp, #16
 8002cb8:	185b      	adds	r3, r3, r1
 8002cba:	212b      	movs	r1, #43	; 0x2b
 8002cbc:	7019      	strb	r1, [r3, #0]
 8002cbe:	7833      	ldrb	r3, [r6, #0]
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d016      	beq.n	8002cf2 <_svfiprintf_r+0xfa>
 8002cc4:	0035      	movs	r5, r6
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	200a      	movs	r0, #10
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	782a      	ldrb	r2, [r5, #0]
 8002cce:	1c6e      	adds	r6, r5, #1
 8002cd0:	3a30      	subs	r2, #48	; 0x30
 8002cd2:	2a09      	cmp	r2, #9
 8002cd4:	d94e      	bls.n	8002d74 <_svfiprintf_r+0x17c>
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	d111      	bne.n	8002cfe <_svfiprintf_r+0x106>
 8002cda:	e017      	b.n	8002d0c <_svfiprintf_r+0x114>
 8002cdc:	3501      	adds	r5, #1
 8002cde:	e7af      	b.n	8002c40 <_svfiprintf_r+0x48>
 8002ce0:	9b05      	ldr	r3, [sp, #20]
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	1ac0      	subs	r0, r0, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4083      	lsls	r3, r0
 8002cea:	4313      	orrs	r3, r2
 8002cec:	002e      	movs	r6, r5
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	e7cc      	b.n	8002c8c <_svfiprintf_r+0x94>
 8002cf2:	9b07      	ldr	r3, [sp, #28]
 8002cf4:	1d19      	adds	r1, r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	9107      	str	r1, [sp, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db01      	blt.n	8002d02 <_svfiprintf_r+0x10a>
 8002cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d00:	e004      	b.n	8002d0c <_svfiprintf_r+0x114>
 8002d02:	425b      	negs	r3, r3
 8002d04:	60e3      	str	r3, [r4, #12]
 8002d06:	2302      	movs	r3, #2
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	782b      	ldrb	r3, [r5, #0]
 8002d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d10:	d10a      	bne.n	8002d28 <_svfiprintf_r+0x130>
 8002d12:	786b      	ldrb	r3, [r5, #1]
 8002d14:	2b2a      	cmp	r3, #42	; 0x2a
 8002d16:	d135      	bne.n	8002d84 <_svfiprintf_r+0x18c>
 8002d18:	9b07      	ldr	r3, [sp, #28]
 8002d1a:	3502      	adds	r5, #2
 8002d1c:	1d1a      	adds	r2, r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	9207      	str	r2, [sp, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db2b      	blt.n	8002d7e <_svfiprintf_r+0x186>
 8002d26:	9309      	str	r3, [sp, #36]	; 0x24
 8002d28:	4e2f      	ldr	r6, [pc, #188]	; (8002de8 <_svfiprintf_r+0x1f0>)
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	0030      	movs	r0, r6
 8002d2e:	7829      	ldrb	r1, [r5, #0]
 8002d30:	f000 fc8c 	bl	800364c <memchr>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d006      	beq.n	8002d46 <_svfiprintf_r+0x14e>
 8002d38:	2340      	movs	r3, #64	; 0x40
 8002d3a:	1b80      	subs	r0, r0, r6
 8002d3c:	4083      	lsls	r3, r0
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	3501      	adds	r5, #1
 8002d42:	4313      	orrs	r3, r2
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	7829      	ldrb	r1, [r5, #0]
 8002d48:	2206      	movs	r2, #6
 8002d4a:	4828      	ldr	r0, [pc, #160]	; (8002dec <_svfiprintf_r+0x1f4>)
 8002d4c:	1c6e      	adds	r6, r5, #1
 8002d4e:	7621      	strb	r1, [r4, #24]
 8002d50:	f000 fc7c 	bl	800364c <memchr>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d03c      	beq.n	8002dd2 <_svfiprintf_r+0x1da>
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <_svfiprintf_r+0x1f8>)
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d125      	bne.n	8002daa <_svfiprintf_r+0x1b2>
 8002d5e:	2207      	movs	r2, #7
 8002d60:	9b07      	ldr	r3, [sp, #28]
 8002d62:	3307      	adds	r3, #7
 8002d64:	4393      	bics	r3, r2
 8002d66:	3308      	adds	r3, #8
 8002d68:	9307      	str	r3, [sp, #28]
 8002d6a:	6963      	ldr	r3, [r4, #20]
 8002d6c:	9a04      	ldr	r2, [sp, #16]
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	6163      	str	r3, [r4, #20]
 8002d72:	e764      	b.n	8002c3e <_svfiprintf_r+0x46>
 8002d74:	4343      	muls	r3, r0
 8002d76:	0035      	movs	r5, r6
 8002d78:	2101      	movs	r1, #1
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	e7a6      	b.n	8002ccc <_svfiprintf_r+0xd4>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	425b      	negs	r3, r3
 8002d82:	e7d0      	b.n	8002d26 <_svfiprintf_r+0x12e>
 8002d84:	2300      	movs	r3, #0
 8002d86:	200a      	movs	r0, #10
 8002d88:	001a      	movs	r2, r3
 8002d8a:	3501      	adds	r5, #1
 8002d8c:	6063      	str	r3, [r4, #4]
 8002d8e:	7829      	ldrb	r1, [r5, #0]
 8002d90:	1c6e      	adds	r6, r5, #1
 8002d92:	3930      	subs	r1, #48	; 0x30
 8002d94:	2909      	cmp	r1, #9
 8002d96:	d903      	bls.n	8002da0 <_svfiprintf_r+0x1a8>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0c5      	beq.n	8002d28 <_svfiprintf_r+0x130>
 8002d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d9e:	e7c3      	b.n	8002d28 <_svfiprintf_r+0x130>
 8002da0:	4342      	muls	r2, r0
 8002da2:	0035      	movs	r5, r6
 8002da4:	2301      	movs	r3, #1
 8002da6:	1852      	adds	r2, r2, r1
 8002da8:	e7f1      	b.n	8002d8e <_svfiprintf_r+0x196>
 8002daa:	aa07      	add	r2, sp, #28
 8002dac:	9200      	str	r2, [sp, #0]
 8002dae:	0021      	movs	r1, r4
 8002db0:	003a      	movs	r2, r7
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_svfiprintf_r+0x1fc>)
 8002db4:	9803      	ldr	r0, [sp, #12]
 8002db6:	e000      	b.n	8002dba <_svfiprintf_r+0x1c2>
 8002db8:	bf00      	nop
 8002dba:	9004      	str	r0, [sp, #16]
 8002dbc:	9b04      	ldr	r3, [sp, #16]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	d1d3      	bne.n	8002d6a <_svfiprintf_r+0x172>
 8002dc2:	89bb      	ldrh	r3, [r7, #12]
 8002dc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002dc6:	065b      	lsls	r3, r3, #25
 8002dc8:	d400      	bmi.n	8002dcc <_svfiprintf_r+0x1d4>
 8002dca:	e72c      	b.n	8002c26 <_svfiprintf_r+0x2e>
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4240      	negs	r0, r0
 8002dd0:	e729      	b.n	8002c26 <_svfiprintf_r+0x2e>
 8002dd2:	aa07      	add	r2, sp, #28
 8002dd4:	9200      	str	r2, [sp, #0]
 8002dd6:	0021      	movs	r1, r4
 8002dd8:	003a      	movs	r2, r7
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <_svfiprintf_r+0x1fc>)
 8002ddc:	9803      	ldr	r0, [sp, #12]
 8002dde:	f000 f9bf 	bl	8003160 <_printf_i>
 8002de2:	e7ea      	b.n	8002dba <_svfiprintf_r+0x1c2>
 8002de4:	080037c0 	.word	0x080037c0
 8002de8:	080037c6 	.word	0x080037c6
 8002dec:	080037ca 	.word	0x080037ca
 8002df0:	00000000 	.word	0x00000000
 8002df4:	08002b35 	.word	0x08002b35

08002df8 <__sfputc_r>:
 8002df8:	6893      	ldr	r3, [r2, #8]
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da04      	bge.n	8002e0e <__sfputc_r+0x16>
 8002e04:	6994      	ldr	r4, [r2, #24]
 8002e06:	42a3      	cmp	r3, r4
 8002e08:	db07      	blt.n	8002e1a <__sfputc_r+0x22>
 8002e0a:	290a      	cmp	r1, #10
 8002e0c:	d005      	beq.n	8002e1a <__sfputc_r+0x22>
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	1c58      	adds	r0, r3, #1
 8002e12:	6010      	str	r0, [r2, #0]
 8002e14:	7019      	strb	r1, [r3, #0]
 8002e16:	0008      	movs	r0, r1
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	f7ff fc65 	bl	80026e8 <__swbuf_r>
 8002e1e:	0001      	movs	r1, r0
 8002e20:	e7f9      	b.n	8002e16 <__sfputc_r+0x1e>

08002e22 <__sfputs_r>:
 8002e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e24:	0006      	movs	r6, r0
 8002e26:	000f      	movs	r7, r1
 8002e28:	0014      	movs	r4, r2
 8002e2a:	18d5      	adds	r5, r2, r3
 8002e2c:	42ac      	cmp	r4, r5
 8002e2e:	d101      	bne.n	8002e34 <__sfputs_r+0x12>
 8002e30:	2000      	movs	r0, #0
 8002e32:	e007      	b.n	8002e44 <__sfputs_r+0x22>
 8002e34:	7821      	ldrb	r1, [r4, #0]
 8002e36:	003a      	movs	r2, r7
 8002e38:	0030      	movs	r0, r6
 8002e3a:	f7ff ffdd 	bl	8002df8 <__sfputc_r>
 8002e3e:	3401      	adds	r4, #1
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d1f3      	bne.n	8002e2c <__sfputs_r+0xa>
 8002e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e48 <_vfiprintf_r>:
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b0a1      	sub	sp, #132	; 0x84
 8002e4c:	000f      	movs	r7, r1
 8002e4e:	0015      	movs	r5, r2
 8002e50:	001e      	movs	r6, r3
 8002e52:	9003      	str	r0, [sp, #12]
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d004      	beq.n	8002e62 <_vfiprintf_r+0x1a>
 8002e58:	6a03      	ldr	r3, [r0, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <_vfiprintf_r+0x1a>
 8002e5e:	f7ff fb33 	bl	80024c8 <__sinit>
 8002e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e64:	07db      	lsls	r3, r3, #31
 8002e66:	d405      	bmi.n	8002e74 <_vfiprintf_r+0x2c>
 8002e68:	89bb      	ldrh	r3, [r7, #12]
 8002e6a:	059b      	lsls	r3, r3, #22
 8002e6c:	d402      	bmi.n	8002e74 <_vfiprintf_r+0x2c>
 8002e6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e70:	f7ff fd60 	bl	8002934 <__retarget_lock_acquire_recursive>
 8002e74:	89bb      	ldrh	r3, [r7, #12]
 8002e76:	071b      	lsls	r3, r3, #28
 8002e78:	d502      	bpl.n	8002e80 <_vfiprintf_r+0x38>
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <_vfiprintf_r+0x60>
 8002e80:	0039      	movs	r1, r7
 8002e82:	9803      	ldr	r0, [sp, #12]
 8002e84:	f7ff fc72 	bl	800276c <__swsetup_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d00d      	beq.n	8002ea8 <_vfiprintf_r+0x60>
 8002e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e8e:	07db      	lsls	r3, r3, #31
 8002e90:	d503      	bpl.n	8002e9a <_vfiprintf_r+0x52>
 8002e92:	2001      	movs	r0, #1
 8002e94:	4240      	negs	r0, r0
 8002e96:	b021      	add	sp, #132	; 0x84
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9a:	89bb      	ldrh	r3, [r7, #12]
 8002e9c:	059b      	lsls	r3, r3, #22
 8002e9e:	d4f8      	bmi.n	8002e92 <_vfiprintf_r+0x4a>
 8002ea0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ea2:	f7ff fd48 	bl	8002936 <__retarget_lock_release_recursive>
 8002ea6:	e7f4      	b.n	8002e92 <_vfiprintf_r+0x4a>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	ac08      	add	r4, sp, #32
 8002eac:	6163      	str	r3, [r4, #20]
 8002eae:	3320      	adds	r3, #32
 8002eb0:	7663      	strb	r3, [r4, #25]
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	76a3      	strb	r3, [r4, #26]
 8002eb6:	9607      	str	r6, [sp, #28]
 8002eb8:	002e      	movs	r6, r5
 8002eba:	7833      	ldrb	r3, [r6, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <_vfiprintf_r+0x7c>
 8002ec0:	2b25      	cmp	r3, #37	; 0x25
 8002ec2:	d148      	bne.n	8002f56 <_vfiprintf_r+0x10e>
 8002ec4:	1b73      	subs	r3, r6, r5
 8002ec6:	9305      	str	r3, [sp, #20]
 8002ec8:	42ae      	cmp	r6, r5
 8002eca:	d00b      	beq.n	8002ee4 <_vfiprintf_r+0x9c>
 8002ecc:	002a      	movs	r2, r5
 8002ece:	0039      	movs	r1, r7
 8002ed0:	9803      	ldr	r0, [sp, #12]
 8002ed2:	f7ff ffa6 	bl	8002e22 <__sfputs_r>
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	d100      	bne.n	8002edc <_vfiprintf_r+0x94>
 8002eda:	e0af      	b.n	800303c <_vfiprintf_r+0x1f4>
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	9a05      	ldr	r2, [sp, #20]
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	6163      	str	r3, [r4, #20]
 8002ee4:	7833      	ldrb	r3, [r6, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d100      	bne.n	8002eec <_vfiprintf_r+0xa4>
 8002eea:	e0a7      	b.n	800303c <_vfiprintf_r+0x1f4>
 8002eec:	2201      	movs	r2, #1
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4252      	negs	r2, r2
 8002ef2:	6062      	str	r2, [r4, #4]
 8002ef4:	a904      	add	r1, sp, #16
 8002ef6:	3254      	adds	r2, #84	; 0x54
 8002ef8:	1852      	adds	r2, r2, r1
 8002efa:	1c75      	adds	r5, r6, #1
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	60e3      	str	r3, [r4, #12]
 8002f00:	60a3      	str	r3, [r4, #8]
 8002f02:	7013      	strb	r3, [r2, #0]
 8002f04:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <_vfiprintf_r+0x224>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	7829      	ldrb	r1, [r5, #0]
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	f000 fb9c 	bl	800364c <memchr>
 8002f14:	1c6e      	adds	r6, r5, #1
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d11f      	bne.n	8002f5a <_vfiprintf_r+0x112>
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	06d3      	lsls	r3, r2, #27
 8002f1e:	d504      	bpl.n	8002f2a <_vfiprintf_r+0xe2>
 8002f20:	2353      	movs	r3, #83	; 0x53
 8002f22:	a904      	add	r1, sp, #16
 8002f24:	185b      	adds	r3, r3, r1
 8002f26:	2120      	movs	r1, #32
 8002f28:	7019      	strb	r1, [r3, #0]
 8002f2a:	0713      	lsls	r3, r2, #28
 8002f2c:	d504      	bpl.n	8002f38 <_vfiprintf_r+0xf0>
 8002f2e:	2353      	movs	r3, #83	; 0x53
 8002f30:	a904      	add	r1, sp, #16
 8002f32:	185b      	adds	r3, r3, r1
 8002f34:	212b      	movs	r1, #43	; 0x2b
 8002f36:	7019      	strb	r1, [r3, #0]
 8002f38:	782b      	ldrb	r3, [r5, #0]
 8002f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3c:	d016      	beq.n	8002f6c <_vfiprintf_r+0x124>
 8002f3e:	002e      	movs	r6, r5
 8002f40:	2100      	movs	r1, #0
 8002f42:	200a      	movs	r0, #10
 8002f44:	68e3      	ldr	r3, [r4, #12]
 8002f46:	7832      	ldrb	r2, [r6, #0]
 8002f48:	1c75      	adds	r5, r6, #1
 8002f4a:	3a30      	subs	r2, #48	; 0x30
 8002f4c:	2a09      	cmp	r2, #9
 8002f4e:	d94e      	bls.n	8002fee <_vfiprintf_r+0x1a6>
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d111      	bne.n	8002f78 <_vfiprintf_r+0x130>
 8002f54:	e017      	b.n	8002f86 <_vfiprintf_r+0x13e>
 8002f56:	3601      	adds	r6, #1
 8002f58:	e7af      	b.n	8002eba <_vfiprintf_r+0x72>
 8002f5a:	9b05      	ldr	r3, [sp, #20]
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	1ac0      	subs	r0, r0, r3
 8002f60:	2301      	movs	r3, #1
 8002f62:	4083      	lsls	r3, r0
 8002f64:	4313      	orrs	r3, r2
 8002f66:	0035      	movs	r5, r6
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	e7cc      	b.n	8002f06 <_vfiprintf_r+0xbe>
 8002f6c:	9b07      	ldr	r3, [sp, #28]
 8002f6e:	1d19      	adds	r1, r3, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	9107      	str	r1, [sp, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db01      	blt.n	8002f7c <_vfiprintf_r+0x134>
 8002f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f7a:	e004      	b.n	8002f86 <_vfiprintf_r+0x13e>
 8002f7c:	425b      	negs	r3, r3
 8002f7e:	60e3      	str	r3, [r4, #12]
 8002f80:	2302      	movs	r3, #2
 8002f82:	4313      	orrs	r3, r2
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	7833      	ldrb	r3, [r6, #0]
 8002f88:	2b2e      	cmp	r3, #46	; 0x2e
 8002f8a:	d10a      	bne.n	8002fa2 <_vfiprintf_r+0x15a>
 8002f8c:	7873      	ldrb	r3, [r6, #1]
 8002f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f90:	d135      	bne.n	8002ffe <_vfiprintf_r+0x1b6>
 8002f92:	9b07      	ldr	r3, [sp, #28]
 8002f94:	3602      	adds	r6, #2
 8002f96:	1d1a      	adds	r2, r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	9207      	str	r2, [sp, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db2b      	blt.n	8002ff8 <_vfiprintf_r+0x1b0>
 8002fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa2:	4d33      	ldr	r5, [pc, #204]	; (8003070 <_vfiprintf_r+0x228>)
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	0028      	movs	r0, r5
 8002fa8:	7831      	ldrb	r1, [r6, #0]
 8002faa:	f000 fb4f 	bl	800364c <memchr>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d006      	beq.n	8002fc0 <_vfiprintf_r+0x178>
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	1b40      	subs	r0, r0, r5
 8002fb6:	4083      	lsls	r3, r0
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	3601      	adds	r6, #1
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	7831      	ldrb	r1, [r6, #0]
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	482b      	ldr	r0, [pc, #172]	; (8003074 <_vfiprintf_r+0x22c>)
 8002fc6:	1c75      	adds	r5, r6, #1
 8002fc8:	7621      	strb	r1, [r4, #24]
 8002fca:	f000 fb3f 	bl	800364c <memchr>
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d043      	beq.n	800305a <_vfiprintf_r+0x212>
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <_vfiprintf_r+0x230>)
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d125      	bne.n	8003024 <_vfiprintf_r+0x1dc>
 8002fd8:	2207      	movs	r2, #7
 8002fda:	9b07      	ldr	r3, [sp, #28]
 8002fdc:	3307      	adds	r3, #7
 8002fde:	4393      	bics	r3, r2
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	9307      	str	r3, [sp, #28]
 8002fe4:	6963      	ldr	r3, [r4, #20]
 8002fe6:	9a04      	ldr	r2, [sp, #16]
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	6163      	str	r3, [r4, #20]
 8002fec:	e764      	b.n	8002eb8 <_vfiprintf_r+0x70>
 8002fee:	4343      	muls	r3, r0
 8002ff0:	002e      	movs	r6, r5
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	189b      	adds	r3, r3, r2
 8002ff6:	e7a6      	b.n	8002f46 <_vfiprintf_r+0xfe>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	425b      	negs	r3, r3
 8002ffc:	e7d0      	b.n	8002fa0 <_vfiprintf_r+0x158>
 8002ffe:	2300      	movs	r3, #0
 8003000:	200a      	movs	r0, #10
 8003002:	001a      	movs	r2, r3
 8003004:	3601      	adds	r6, #1
 8003006:	6063      	str	r3, [r4, #4]
 8003008:	7831      	ldrb	r1, [r6, #0]
 800300a:	1c75      	adds	r5, r6, #1
 800300c:	3930      	subs	r1, #48	; 0x30
 800300e:	2909      	cmp	r1, #9
 8003010:	d903      	bls.n	800301a <_vfiprintf_r+0x1d2>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0c5      	beq.n	8002fa2 <_vfiprintf_r+0x15a>
 8003016:	9209      	str	r2, [sp, #36]	; 0x24
 8003018:	e7c3      	b.n	8002fa2 <_vfiprintf_r+0x15a>
 800301a:	4342      	muls	r2, r0
 800301c:	002e      	movs	r6, r5
 800301e:	2301      	movs	r3, #1
 8003020:	1852      	adds	r2, r2, r1
 8003022:	e7f1      	b.n	8003008 <_vfiprintf_r+0x1c0>
 8003024:	aa07      	add	r2, sp, #28
 8003026:	9200      	str	r2, [sp, #0]
 8003028:	0021      	movs	r1, r4
 800302a:	003a      	movs	r2, r7
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <_vfiprintf_r+0x234>)
 800302e:	9803      	ldr	r0, [sp, #12]
 8003030:	e000      	b.n	8003034 <_vfiprintf_r+0x1ec>
 8003032:	bf00      	nop
 8003034:	9004      	str	r0, [sp, #16]
 8003036:	9b04      	ldr	r3, [sp, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	d1d3      	bne.n	8002fe4 <_vfiprintf_r+0x19c>
 800303c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303e:	07db      	lsls	r3, r3, #31
 8003040:	d405      	bmi.n	800304e <_vfiprintf_r+0x206>
 8003042:	89bb      	ldrh	r3, [r7, #12]
 8003044:	059b      	lsls	r3, r3, #22
 8003046:	d402      	bmi.n	800304e <_vfiprintf_r+0x206>
 8003048:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800304a:	f7ff fc74 	bl	8002936 <__retarget_lock_release_recursive>
 800304e:	89bb      	ldrh	r3, [r7, #12]
 8003050:	065b      	lsls	r3, r3, #25
 8003052:	d500      	bpl.n	8003056 <_vfiprintf_r+0x20e>
 8003054:	e71d      	b.n	8002e92 <_vfiprintf_r+0x4a>
 8003056:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003058:	e71d      	b.n	8002e96 <_vfiprintf_r+0x4e>
 800305a:	aa07      	add	r2, sp, #28
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	0021      	movs	r1, r4
 8003060:	003a      	movs	r2, r7
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <_vfiprintf_r+0x234>)
 8003064:	9803      	ldr	r0, [sp, #12]
 8003066:	f000 f87b 	bl	8003160 <_printf_i>
 800306a:	e7e3      	b.n	8003034 <_vfiprintf_r+0x1ec>
 800306c:	080037c0 	.word	0x080037c0
 8003070:	080037c6 	.word	0x080037c6
 8003074:	080037ca 	.word	0x080037ca
 8003078:	00000000 	.word	0x00000000
 800307c:	08002e23 	.word	0x08002e23

08003080 <_printf_common>:
 8003080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003082:	0016      	movs	r6, r2
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	688a      	ldr	r2, [r1, #8]
 8003088:	690b      	ldr	r3, [r1, #16]
 800308a:	000c      	movs	r4, r1
 800308c:	9000      	str	r0, [sp, #0]
 800308e:	4293      	cmp	r3, r2
 8003090:	da00      	bge.n	8003094 <_printf_common+0x14>
 8003092:	0013      	movs	r3, r2
 8003094:	0022      	movs	r2, r4
 8003096:	6033      	str	r3, [r6, #0]
 8003098:	3243      	adds	r2, #67	; 0x43
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	2a00      	cmp	r2, #0
 800309e:	d001      	beq.n	80030a4 <_printf_common+0x24>
 80030a0:	3301      	adds	r3, #1
 80030a2:	6033      	str	r3, [r6, #0]
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	069b      	lsls	r3, r3, #26
 80030a8:	d502      	bpl.n	80030b0 <_printf_common+0x30>
 80030aa:	6833      	ldr	r3, [r6, #0]
 80030ac:	3302      	adds	r3, #2
 80030ae:	6033      	str	r3, [r6, #0]
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	2306      	movs	r3, #6
 80030b4:	0015      	movs	r5, r2
 80030b6:	401d      	ands	r5, r3
 80030b8:	421a      	tst	r2, r3
 80030ba:	d027      	beq.n	800310c <_printf_common+0x8c>
 80030bc:	0023      	movs	r3, r4
 80030be:	3343      	adds	r3, #67	; 0x43
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	1e5a      	subs	r2, r3, #1
 80030c4:	4193      	sbcs	r3, r2
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	0692      	lsls	r2, r2, #26
 80030ca:	d430      	bmi.n	800312e <_printf_common+0xae>
 80030cc:	0022      	movs	r2, r4
 80030ce:	9901      	ldr	r1, [sp, #4]
 80030d0:	9800      	ldr	r0, [sp, #0]
 80030d2:	9d08      	ldr	r5, [sp, #32]
 80030d4:	3243      	adds	r2, #67	; 0x43
 80030d6:	47a8      	blx	r5
 80030d8:	3001      	adds	r0, #1
 80030da:	d025      	beq.n	8003128 <_printf_common+0xa8>
 80030dc:	2206      	movs	r2, #6
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	2500      	movs	r5, #0
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d105      	bne.n	80030f4 <_printf_common+0x74>
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	68e5      	ldr	r5, [r4, #12]
 80030ec:	1aed      	subs	r5, r5, r3
 80030ee:	43eb      	mvns	r3, r5
 80030f0:	17db      	asrs	r3, r3, #31
 80030f2:	401d      	ands	r5, r3
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	6922      	ldr	r2, [r4, #16]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd01      	ble.n	8003100 <_printf_common+0x80>
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	18ed      	adds	r5, r5, r3
 8003100:	2600      	movs	r6, #0
 8003102:	42b5      	cmp	r5, r6
 8003104:	d120      	bne.n	8003148 <_printf_common+0xc8>
 8003106:	2000      	movs	r0, #0
 8003108:	e010      	b.n	800312c <_printf_common+0xac>
 800310a:	3501      	adds	r5, #1
 800310c:	68e3      	ldr	r3, [r4, #12]
 800310e:	6832      	ldr	r2, [r6, #0]
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	42ab      	cmp	r3, r5
 8003114:	ddd2      	ble.n	80030bc <_printf_common+0x3c>
 8003116:	0022      	movs	r2, r4
 8003118:	2301      	movs	r3, #1
 800311a:	9901      	ldr	r1, [sp, #4]
 800311c:	9800      	ldr	r0, [sp, #0]
 800311e:	9f08      	ldr	r7, [sp, #32]
 8003120:	3219      	adds	r2, #25
 8003122:	47b8      	blx	r7
 8003124:	3001      	adds	r0, #1
 8003126:	d1f0      	bne.n	800310a <_printf_common+0x8a>
 8003128:	2001      	movs	r0, #1
 800312a:	4240      	negs	r0, r0
 800312c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800312e:	2030      	movs	r0, #48	; 0x30
 8003130:	18e1      	adds	r1, r4, r3
 8003132:	3143      	adds	r1, #67	; 0x43
 8003134:	7008      	strb	r0, [r1, #0]
 8003136:	0021      	movs	r1, r4
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	3145      	adds	r1, #69	; 0x45
 800313c:	7809      	ldrb	r1, [r1, #0]
 800313e:	18a2      	adds	r2, r4, r2
 8003140:	3243      	adds	r2, #67	; 0x43
 8003142:	3302      	adds	r3, #2
 8003144:	7011      	strb	r1, [r2, #0]
 8003146:	e7c1      	b.n	80030cc <_printf_common+0x4c>
 8003148:	0022      	movs	r2, r4
 800314a:	2301      	movs	r3, #1
 800314c:	9901      	ldr	r1, [sp, #4]
 800314e:	9800      	ldr	r0, [sp, #0]
 8003150:	9f08      	ldr	r7, [sp, #32]
 8003152:	321a      	adds	r2, #26
 8003154:	47b8      	blx	r7
 8003156:	3001      	adds	r0, #1
 8003158:	d0e6      	beq.n	8003128 <_printf_common+0xa8>
 800315a:	3601      	adds	r6, #1
 800315c:	e7d1      	b.n	8003102 <_printf_common+0x82>
	...

08003160 <_printf_i>:
 8003160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003162:	b08b      	sub	sp, #44	; 0x2c
 8003164:	9206      	str	r2, [sp, #24]
 8003166:	000a      	movs	r2, r1
 8003168:	3243      	adds	r2, #67	; 0x43
 800316a:	9307      	str	r3, [sp, #28]
 800316c:	9005      	str	r0, [sp, #20]
 800316e:	9204      	str	r2, [sp, #16]
 8003170:	7e0a      	ldrb	r2, [r1, #24]
 8003172:	000c      	movs	r4, r1
 8003174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003176:	2a78      	cmp	r2, #120	; 0x78
 8003178:	d809      	bhi.n	800318e <_printf_i+0x2e>
 800317a:	2a62      	cmp	r2, #98	; 0x62
 800317c:	d80b      	bhi.n	8003196 <_printf_i+0x36>
 800317e:	2a00      	cmp	r2, #0
 8003180:	d100      	bne.n	8003184 <_printf_i+0x24>
 8003182:	e0be      	b.n	8003302 <_printf_i+0x1a2>
 8003184:	497c      	ldr	r1, [pc, #496]	; (8003378 <_printf_i+0x218>)
 8003186:	9103      	str	r1, [sp, #12]
 8003188:	2a58      	cmp	r2, #88	; 0x58
 800318a:	d100      	bne.n	800318e <_printf_i+0x2e>
 800318c:	e093      	b.n	80032b6 <_printf_i+0x156>
 800318e:	0026      	movs	r6, r4
 8003190:	3642      	adds	r6, #66	; 0x42
 8003192:	7032      	strb	r2, [r6, #0]
 8003194:	e022      	b.n	80031dc <_printf_i+0x7c>
 8003196:	0010      	movs	r0, r2
 8003198:	3863      	subs	r0, #99	; 0x63
 800319a:	2815      	cmp	r0, #21
 800319c:	d8f7      	bhi.n	800318e <_printf_i+0x2e>
 800319e:	f7fc ffbb 	bl	8000118 <__gnu_thumb1_case_shi>
 80031a2:	0016      	.short	0x0016
 80031a4:	fff6001f 	.word	0xfff6001f
 80031a8:	fff6fff6 	.word	0xfff6fff6
 80031ac:	001ffff6 	.word	0x001ffff6
 80031b0:	fff6fff6 	.word	0xfff6fff6
 80031b4:	fff6fff6 	.word	0xfff6fff6
 80031b8:	003600a3 	.word	0x003600a3
 80031bc:	fff60083 	.word	0xfff60083
 80031c0:	00b4fff6 	.word	0x00b4fff6
 80031c4:	0036fff6 	.word	0x0036fff6
 80031c8:	fff6fff6 	.word	0xfff6fff6
 80031cc:	0087      	.short	0x0087
 80031ce:	0026      	movs	r6, r4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	3642      	adds	r6, #66	; 0x42
 80031d4:	1d11      	adds	r1, r2, #4
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	7033      	strb	r3, [r6, #0]
 80031dc:	2301      	movs	r3, #1
 80031de:	e0a2      	b.n	8003326 <_printf_i+0x1c6>
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	6809      	ldr	r1, [r1, #0]
 80031e4:	1d02      	adds	r2, r0, #4
 80031e6:	060d      	lsls	r5, r1, #24
 80031e8:	d50b      	bpl.n	8003202 <_printf_i+0xa2>
 80031ea:	6805      	ldr	r5, [r0, #0]
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	da03      	bge.n	80031fa <_printf_i+0x9a>
 80031f2:	232d      	movs	r3, #45	; 0x2d
 80031f4:	9a04      	ldr	r2, [sp, #16]
 80031f6:	426d      	negs	r5, r5
 80031f8:	7013      	strb	r3, [r2, #0]
 80031fa:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <_printf_i+0x218>)
 80031fc:	270a      	movs	r7, #10
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	e01b      	b.n	800323a <_printf_i+0xda>
 8003202:	6805      	ldr	r5, [r0, #0]
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	0649      	lsls	r1, r1, #25
 8003208:	d5f1      	bpl.n	80031ee <_printf_i+0x8e>
 800320a:	b22d      	sxth	r5, r5
 800320c:	e7ef      	b.n	80031ee <_printf_i+0x8e>
 800320e:	680d      	ldr	r5, [r1, #0]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	1d08      	adds	r0, r1, #4
 8003214:	6018      	str	r0, [r3, #0]
 8003216:	062e      	lsls	r6, r5, #24
 8003218:	d501      	bpl.n	800321e <_printf_i+0xbe>
 800321a:	680d      	ldr	r5, [r1, #0]
 800321c:	e003      	b.n	8003226 <_printf_i+0xc6>
 800321e:	066d      	lsls	r5, r5, #25
 8003220:	d5fb      	bpl.n	800321a <_printf_i+0xba>
 8003222:	680d      	ldr	r5, [r1, #0]
 8003224:	b2ad      	uxth	r5, r5
 8003226:	4b54      	ldr	r3, [pc, #336]	; (8003378 <_printf_i+0x218>)
 8003228:	2708      	movs	r7, #8
 800322a:	9303      	str	r3, [sp, #12]
 800322c:	2a6f      	cmp	r2, #111	; 0x6f
 800322e:	d000      	beq.n	8003232 <_printf_i+0xd2>
 8003230:	3702      	adds	r7, #2
 8003232:	0023      	movs	r3, r4
 8003234:	2200      	movs	r2, #0
 8003236:	3343      	adds	r3, #67	; 0x43
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	6863      	ldr	r3, [r4, #4]
 800323c:	60a3      	str	r3, [r4, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db03      	blt.n	800324a <_printf_i+0xea>
 8003242:	2104      	movs	r1, #4
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	438a      	bics	r2, r1
 8003248:	6022      	str	r2, [r4, #0]
 800324a:	2d00      	cmp	r5, #0
 800324c:	d102      	bne.n	8003254 <_printf_i+0xf4>
 800324e:	9e04      	ldr	r6, [sp, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <_printf_i+0x10e>
 8003254:	9e04      	ldr	r6, [sp, #16]
 8003256:	0028      	movs	r0, r5
 8003258:	0039      	movs	r1, r7
 800325a:	f7fc ffed 	bl	8000238 <__aeabi_uidivmod>
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	3e01      	subs	r6, #1
 8003262:	5c5b      	ldrb	r3, [r3, r1]
 8003264:	7033      	strb	r3, [r6, #0]
 8003266:	002b      	movs	r3, r5
 8003268:	0005      	movs	r5, r0
 800326a:	429f      	cmp	r7, r3
 800326c:	d9f3      	bls.n	8003256 <_printf_i+0xf6>
 800326e:	2f08      	cmp	r7, #8
 8003270:	d109      	bne.n	8003286 <_printf_i+0x126>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	07db      	lsls	r3, r3, #31
 8003276:	d506      	bpl.n	8003286 <_printf_i+0x126>
 8003278:	6862      	ldr	r2, [r4, #4]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	dc02      	bgt.n	8003286 <_printf_i+0x126>
 8003280:	2330      	movs	r3, #48	; 0x30
 8003282:	3e01      	subs	r6, #1
 8003284:	7033      	strb	r3, [r6, #0]
 8003286:	9b04      	ldr	r3, [sp, #16]
 8003288:	1b9b      	subs	r3, r3, r6
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	9b07      	ldr	r3, [sp, #28]
 800328e:	0021      	movs	r1, r4
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	9805      	ldr	r0, [sp, #20]
 8003294:	9b06      	ldr	r3, [sp, #24]
 8003296:	aa09      	add	r2, sp, #36	; 0x24
 8003298:	f7ff fef2 	bl	8003080 <_printf_common>
 800329c:	3001      	adds	r0, #1
 800329e:	d147      	bne.n	8003330 <_printf_i+0x1d0>
 80032a0:	2001      	movs	r0, #1
 80032a2:	4240      	negs	r0, r0
 80032a4:	b00b      	add	sp, #44	; 0x2c
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a8:	2220      	movs	r2, #32
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	6022      	str	r2, [r4, #0]
 80032b0:	2278      	movs	r2, #120	; 0x78
 80032b2:	4932      	ldr	r1, [pc, #200]	; (800337c <_printf_i+0x21c>)
 80032b4:	9103      	str	r1, [sp, #12]
 80032b6:	0021      	movs	r1, r4
 80032b8:	3145      	adds	r1, #69	; 0x45
 80032ba:	700a      	strb	r2, [r1, #0]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	c920      	ldmia	r1!, {r5}
 80032c2:	0610      	lsls	r0, r2, #24
 80032c4:	d402      	bmi.n	80032cc <_printf_i+0x16c>
 80032c6:	0650      	lsls	r0, r2, #25
 80032c8:	d500      	bpl.n	80032cc <_printf_i+0x16c>
 80032ca:	b2ad      	uxth	r5, r5
 80032cc:	6019      	str	r1, [r3, #0]
 80032ce:	07d3      	lsls	r3, r2, #31
 80032d0:	d502      	bpl.n	80032d8 <_printf_i+0x178>
 80032d2:	2320      	movs	r3, #32
 80032d4:	4313      	orrs	r3, r2
 80032d6:	6023      	str	r3, [r4, #0]
 80032d8:	2710      	movs	r7, #16
 80032da:	2d00      	cmp	r5, #0
 80032dc:	d1a9      	bne.n	8003232 <_printf_i+0xd2>
 80032de:	2220      	movs	r2, #32
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	4393      	bics	r3, r2
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	e7a4      	b.n	8003232 <_printf_i+0xd2>
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	680d      	ldr	r5, [r1, #0]
 80032ec:	1d10      	adds	r0, r2, #4
 80032ee:	6949      	ldr	r1, [r1, #20]
 80032f0:	6018      	str	r0, [r3, #0]
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	062e      	lsls	r6, r5, #24
 80032f6:	d501      	bpl.n	80032fc <_printf_i+0x19c>
 80032f8:	6019      	str	r1, [r3, #0]
 80032fa:	e002      	b.n	8003302 <_printf_i+0x1a2>
 80032fc:	066d      	lsls	r5, r5, #25
 80032fe:	d5fb      	bpl.n	80032f8 <_printf_i+0x198>
 8003300:	8019      	strh	r1, [r3, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	9e04      	ldr	r6, [sp, #16]
 8003306:	6123      	str	r3, [r4, #16]
 8003308:	e7c0      	b.n	800328c <_printf_i+0x12c>
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	1d11      	adds	r1, r2, #4
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	6816      	ldr	r6, [r2, #0]
 8003312:	2100      	movs	r1, #0
 8003314:	0030      	movs	r0, r6
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	f000 f998 	bl	800364c <memchr>
 800331c:	2800      	cmp	r0, #0
 800331e:	d001      	beq.n	8003324 <_printf_i+0x1c4>
 8003320:	1b80      	subs	r0, r0, r6
 8003322:	6060      	str	r0, [r4, #4]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	6123      	str	r3, [r4, #16]
 8003328:	2300      	movs	r3, #0
 800332a:	9a04      	ldr	r2, [sp, #16]
 800332c:	7013      	strb	r3, [r2, #0]
 800332e:	e7ad      	b.n	800328c <_printf_i+0x12c>
 8003330:	0032      	movs	r2, r6
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	9906      	ldr	r1, [sp, #24]
 8003336:	9805      	ldr	r0, [sp, #20]
 8003338:	9d07      	ldr	r5, [sp, #28]
 800333a:	47a8      	blx	r5
 800333c:	3001      	adds	r0, #1
 800333e:	d0af      	beq.n	80032a0 <_printf_i+0x140>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	079b      	lsls	r3, r3, #30
 8003344:	d415      	bmi.n	8003372 <_printf_i+0x212>
 8003346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003348:	68e0      	ldr	r0, [r4, #12]
 800334a:	4298      	cmp	r0, r3
 800334c:	daaa      	bge.n	80032a4 <_printf_i+0x144>
 800334e:	0018      	movs	r0, r3
 8003350:	e7a8      	b.n	80032a4 <_printf_i+0x144>
 8003352:	0022      	movs	r2, r4
 8003354:	2301      	movs	r3, #1
 8003356:	9906      	ldr	r1, [sp, #24]
 8003358:	9805      	ldr	r0, [sp, #20]
 800335a:	9e07      	ldr	r6, [sp, #28]
 800335c:	3219      	adds	r2, #25
 800335e:	47b0      	blx	r6
 8003360:	3001      	adds	r0, #1
 8003362:	d09d      	beq.n	80032a0 <_printf_i+0x140>
 8003364:	3501      	adds	r5, #1
 8003366:	68e3      	ldr	r3, [r4, #12]
 8003368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	42ab      	cmp	r3, r5
 800336e:	dcf0      	bgt.n	8003352 <_printf_i+0x1f2>
 8003370:	e7e9      	b.n	8003346 <_printf_i+0x1e6>
 8003372:	2500      	movs	r5, #0
 8003374:	e7f7      	b.n	8003366 <_printf_i+0x206>
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	080037d1 	.word	0x080037d1
 800337c:	080037e2 	.word	0x080037e2

08003380 <__sflush_r>:
 8003380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003382:	898b      	ldrh	r3, [r1, #12]
 8003384:	0005      	movs	r5, r0
 8003386:	000c      	movs	r4, r1
 8003388:	071a      	lsls	r2, r3, #28
 800338a:	d45c      	bmi.n	8003446 <__sflush_r+0xc6>
 800338c:	684a      	ldr	r2, [r1, #4]
 800338e:	2a00      	cmp	r2, #0
 8003390:	dc04      	bgt.n	800339c <__sflush_r+0x1c>
 8003392:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003394:	2a00      	cmp	r2, #0
 8003396:	dc01      	bgt.n	800339c <__sflush_r+0x1c>
 8003398:	2000      	movs	r0, #0
 800339a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800339c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800339e:	2f00      	cmp	r7, #0
 80033a0:	d0fa      	beq.n	8003398 <__sflush_r+0x18>
 80033a2:	2200      	movs	r2, #0
 80033a4:	2080      	movs	r0, #128	; 0x80
 80033a6:	682e      	ldr	r6, [r5, #0]
 80033a8:	602a      	str	r2, [r5, #0]
 80033aa:	001a      	movs	r2, r3
 80033ac:	0140      	lsls	r0, r0, #5
 80033ae:	6a21      	ldr	r1, [r4, #32]
 80033b0:	4002      	ands	r2, r0
 80033b2:	4203      	tst	r3, r0
 80033b4:	d034      	beq.n	8003420 <__sflush_r+0xa0>
 80033b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	075b      	lsls	r3, r3, #29
 80033bc:	d506      	bpl.n	80033cc <__sflush_r+0x4c>
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	1ac0      	subs	r0, r0, r3
 80033c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <__sflush_r+0x4c>
 80033c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ca:	1ac0      	subs	r0, r0, r3
 80033cc:	0002      	movs	r2, r0
 80033ce:	2300      	movs	r3, #0
 80033d0:	0028      	movs	r0, r5
 80033d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80033d4:	6a21      	ldr	r1, [r4, #32]
 80033d6:	47b8      	blx	r7
 80033d8:	89a2      	ldrh	r2, [r4, #12]
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	d106      	bne.n	80033ec <__sflush_r+0x6c>
 80033de:	6829      	ldr	r1, [r5, #0]
 80033e0:	291d      	cmp	r1, #29
 80033e2:	d82c      	bhi.n	800343e <__sflush_r+0xbe>
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <__sflush_r+0x110>)
 80033e6:	410b      	asrs	r3, r1
 80033e8:	07db      	lsls	r3, r3, #31
 80033ea:	d428      	bmi.n	800343e <__sflush_r+0xbe>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6063      	str	r3, [r4, #4]
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	04d2      	lsls	r2, r2, #19
 80033f6:	d505      	bpl.n	8003404 <__sflush_r+0x84>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <__sflush_r+0x82>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d100      	bne.n	8003404 <__sflush_r+0x84>
 8003402:	6560      	str	r0, [r4, #84]	; 0x54
 8003404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003406:	602e      	str	r6, [r5, #0]
 8003408:	2900      	cmp	r1, #0
 800340a:	d0c5      	beq.n	8003398 <__sflush_r+0x18>
 800340c:	0023      	movs	r3, r4
 800340e:	3344      	adds	r3, #68	; 0x44
 8003410:	4299      	cmp	r1, r3
 8003412:	d002      	beq.n	800341a <__sflush_r+0x9a>
 8003414:	0028      	movs	r0, r5
 8003416:	f7ff fa8f 	bl	8002938 <_free_r>
 800341a:	2000      	movs	r0, #0
 800341c:	6360      	str	r0, [r4, #52]	; 0x34
 800341e:	e7bc      	b.n	800339a <__sflush_r+0x1a>
 8003420:	2301      	movs	r3, #1
 8003422:	0028      	movs	r0, r5
 8003424:	47b8      	blx	r7
 8003426:	1c43      	adds	r3, r0, #1
 8003428:	d1c6      	bne.n	80033b8 <__sflush_r+0x38>
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0c3      	beq.n	80033b8 <__sflush_r+0x38>
 8003430:	2b1d      	cmp	r3, #29
 8003432:	d001      	beq.n	8003438 <__sflush_r+0xb8>
 8003434:	2b16      	cmp	r3, #22
 8003436:	d101      	bne.n	800343c <__sflush_r+0xbc>
 8003438:	602e      	str	r6, [r5, #0]
 800343a:	e7ad      	b.n	8003398 <__sflush_r+0x18>
 800343c:	89a2      	ldrh	r2, [r4, #12]
 800343e:	2340      	movs	r3, #64	; 0x40
 8003440:	4313      	orrs	r3, r2
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	e7a9      	b.n	800339a <__sflush_r+0x1a>
 8003446:	690e      	ldr	r6, [r1, #16]
 8003448:	2e00      	cmp	r6, #0
 800344a:	d0a5      	beq.n	8003398 <__sflush_r+0x18>
 800344c:	680f      	ldr	r7, [r1, #0]
 800344e:	600e      	str	r6, [r1, #0]
 8003450:	1bba      	subs	r2, r7, r6
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	079b      	lsls	r3, r3, #30
 8003458:	d100      	bne.n	800345c <__sflush_r+0xdc>
 800345a:	694a      	ldr	r2, [r1, #20]
 800345c:	60a2      	str	r2, [r4, #8]
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dd99      	ble.n	8003398 <__sflush_r+0x18>
 8003464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003466:	0032      	movs	r2, r6
 8003468:	001f      	movs	r7, r3
 800346a:	0028      	movs	r0, r5
 800346c:	9b01      	ldr	r3, [sp, #4]
 800346e:	6a21      	ldr	r1, [r4, #32]
 8003470:	47b8      	blx	r7
 8003472:	2800      	cmp	r0, #0
 8003474:	dc06      	bgt.n	8003484 <__sflush_r+0x104>
 8003476:	2340      	movs	r3, #64	; 0x40
 8003478:	2001      	movs	r0, #1
 800347a:	89a2      	ldrh	r2, [r4, #12]
 800347c:	4240      	negs	r0, r0
 800347e:	4313      	orrs	r3, r2
 8003480:	81a3      	strh	r3, [r4, #12]
 8003482:	e78a      	b.n	800339a <__sflush_r+0x1a>
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	1836      	adds	r6, r6, r0
 8003488:	1a1b      	subs	r3, r3, r0
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	e7e7      	b.n	800345e <__sflush_r+0xde>
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	dfbffffe 	.word	0xdfbffffe

08003494 <_fflush_r>:
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	0005      	movs	r5, r0
 800349a:	000c      	movs	r4, r1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <_fflush_r+0x12>
 80034a0:	2500      	movs	r5, #0
 80034a2:	0028      	movs	r0, r5
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d004      	beq.n	80034b4 <_fflush_r+0x20>
 80034aa:	6a03      	ldr	r3, [r0, #32]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <_fflush_r+0x20>
 80034b0:	f7ff f80a 	bl	80024c8 <__sinit>
 80034b4:	220c      	movs	r2, #12
 80034b6:	5ea3      	ldrsh	r3, [r4, r2]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f1      	beq.n	80034a0 <_fflush_r+0xc>
 80034bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034be:	07d2      	lsls	r2, r2, #31
 80034c0:	d404      	bmi.n	80034cc <_fflush_r+0x38>
 80034c2:	059b      	lsls	r3, r3, #22
 80034c4:	d402      	bmi.n	80034cc <_fflush_r+0x38>
 80034c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c8:	f7ff fa34 	bl	8002934 <__retarget_lock_acquire_recursive>
 80034cc:	0028      	movs	r0, r5
 80034ce:	0021      	movs	r1, r4
 80034d0:	f7ff ff56 	bl	8003380 <__sflush_r>
 80034d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034d6:	0005      	movs	r5, r0
 80034d8:	07db      	lsls	r3, r3, #31
 80034da:	d4e2      	bmi.n	80034a2 <_fflush_r+0xe>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	059b      	lsls	r3, r3, #22
 80034e0:	d4df      	bmi.n	80034a2 <_fflush_r+0xe>
 80034e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e4:	f7ff fa27 	bl	8002936 <__retarget_lock_release_recursive>
 80034e8:	e7db      	b.n	80034a2 <_fflush_r+0xe>
	...

080034ec <__swhatbuf_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	000e      	movs	r6, r1
 80034f0:	001d      	movs	r5, r3
 80034f2:	230e      	movs	r3, #14
 80034f4:	5ec9      	ldrsh	r1, [r1, r3]
 80034f6:	0014      	movs	r4, r2
 80034f8:	b096      	sub	sp, #88	; 0x58
 80034fa:	2900      	cmp	r1, #0
 80034fc:	da0c      	bge.n	8003518 <__swhatbuf_r+0x2c>
 80034fe:	89b2      	ldrh	r2, [r6, #12]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	0011      	movs	r1, r2
 8003504:	4019      	ands	r1, r3
 8003506:	421a      	tst	r2, r3
 8003508:	d013      	beq.n	8003532 <__swhatbuf_r+0x46>
 800350a:	2100      	movs	r1, #0
 800350c:	3b40      	subs	r3, #64	; 0x40
 800350e:	2000      	movs	r0, #0
 8003510:	6029      	str	r1, [r5, #0]
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	b016      	add	sp, #88	; 0x58
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	466a      	mov	r2, sp
 800351a:	f000 f861 	bl	80035e0 <_fstat_r>
 800351e:	2800      	cmp	r0, #0
 8003520:	dbed      	blt.n	80034fe <__swhatbuf_r+0x12>
 8003522:	23f0      	movs	r3, #240	; 0xf0
 8003524:	9901      	ldr	r1, [sp, #4]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	4019      	ands	r1, r3
 800352a:	4b03      	ldr	r3, [pc, #12]	; (8003538 <__swhatbuf_r+0x4c>)
 800352c:	18c9      	adds	r1, r1, r3
 800352e:	424b      	negs	r3, r1
 8003530:	4159      	adcs	r1, r3
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	e7ea      	b.n	800350e <__swhatbuf_r+0x22>
 8003538:	ffffe000 	.word	0xffffe000

0800353c <__smakebuf_r>:
 800353c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800353e:	2602      	movs	r6, #2
 8003540:	898b      	ldrh	r3, [r1, #12]
 8003542:	0005      	movs	r5, r0
 8003544:	000c      	movs	r4, r1
 8003546:	4233      	tst	r3, r6
 8003548:	d006      	beq.n	8003558 <__smakebuf_r+0x1c>
 800354a:	0023      	movs	r3, r4
 800354c:	3347      	adds	r3, #71	; 0x47
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	2301      	movs	r3, #1
 8003554:	6163      	str	r3, [r4, #20]
 8003556:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003558:	466a      	mov	r2, sp
 800355a:	ab01      	add	r3, sp, #4
 800355c:	f7ff ffc6 	bl	80034ec <__swhatbuf_r>
 8003560:	9900      	ldr	r1, [sp, #0]
 8003562:	0007      	movs	r7, r0
 8003564:	0028      	movs	r0, r5
 8003566:	f7ff fa53 	bl	8002a10 <_malloc_r>
 800356a:	2800      	cmp	r0, #0
 800356c:	d108      	bne.n	8003580 <__smakebuf_r+0x44>
 800356e:	220c      	movs	r2, #12
 8003570:	5ea3      	ldrsh	r3, [r4, r2]
 8003572:	059a      	lsls	r2, r3, #22
 8003574:	d4ef      	bmi.n	8003556 <__smakebuf_r+0x1a>
 8003576:	2203      	movs	r2, #3
 8003578:	4393      	bics	r3, r2
 800357a:	431e      	orrs	r6, r3
 800357c:	81a6      	strh	r6, [r4, #12]
 800357e:	e7e4      	b.n	800354a <__smakebuf_r+0xe>
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	89a2      	ldrh	r2, [r4, #12]
 8003584:	6020      	str	r0, [r4, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	81a3      	strh	r3, [r4, #12]
 800358a:	9b00      	ldr	r3, [sp, #0]
 800358c:	6120      	str	r0, [r4, #16]
 800358e:	6163      	str	r3, [r4, #20]
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <__smakebuf_r+0x74>
 8003596:	0028      	movs	r0, r5
 8003598:	230e      	movs	r3, #14
 800359a:	5ee1      	ldrsh	r1, [r4, r3]
 800359c:	f000 f832 	bl	8003604 <_isatty_r>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d005      	beq.n	80035b0 <__smakebuf_r+0x74>
 80035a4:	2303      	movs	r3, #3
 80035a6:	89a2      	ldrh	r2, [r4, #12]
 80035a8:	439a      	bics	r2, r3
 80035aa:	3b02      	subs	r3, #2
 80035ac:	4313      	orrs	r3, r2
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	433b      	orrs	r3, r7
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	e7ce      	b.n	8003556 <__smakebuf_r+0x1a>

080035b8 <memmove>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4288      	cmp	r0, r1
 80035bc:	d902      	bls.n	80035c4 <memmove+0xc>
 80035be:	188b      	adds	r3, r1, r2
 80035c0:	4298      	cmp	r0, r3
 80035c2:	d303      	bcc.n	80035cc <memmove+0x14>
 80035c4:	2300      	movs	r3, #0
 80035c6:	e007      	b.n	80035d8 <memmove+0x20>
 80035c8:	5c8b      	ldrb	r3, [r1, r2]
 80035ca:	5483      	strb	r3, [r0, r2]
 80035cc:	3a01      	subs	r2, #1
 80035ce:	d2fb      	bcs.n	80035c8 <memmove+0x10>
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	5ccc      	ldrb	r4, [r1, r3]
 80035d4:	54c4      	strb	r4, [r0, r3]
 80035d6:	3301      	adds	r3, #1
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1fa      	bne.n	80035d2 <memmove+0x1a>
 80035dc:	e7f8      	b.n	80035d0 <memmove+0x18>
	...

080035e0 <_fstat_r>:
 80035e0:	2300      	movs	r3, #0
 80035e2:	b570      	push	{r4, r5, r6, lr}
 80035e4:	4d06      	ldr	r5, [pc, #24]	; (8003600 <_fstat_r+0x20>)
 80035e6:	0004      	movs	r4, r0
 80035e8:	0008      	movs	r0, r1
 80035ea:	0011      	movs	r1, r2
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f7fd f8b5 	bl	800075c <_fstat>
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	d103      	bne.n	80035fe <_fstat_r+0x1e>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d000      	beq.n	80035fe <_fstat_r+0x1e>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	2000027c 	.word	0x2000027c

08003604 <_isatty_r>:
 8003604:	2300      	movs	r3, #0
 8003606:	b570      	push	{r4, r5, r6, lr}
 8003608:	4d06      	ldr	r5, [pc, #24]	; (8003624 <_isatty_r+0x20>)
 800360a:	0004      	movs	r4, r0
 800360c:	0008      	movs	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd f8b2 	bl	8000778 <_isatty>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d103      	bne.n	8003620 <_isatty_r+0x1c>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d000      	beq.n	8003620 <_isatty_r+0x1c>
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	2000027c 	.word	0x2000027c

08003628 <_sbrk_r>:
 8003628:	2300      	movs	r3, #0
 800362a:	b570      	push	{r4, r5, r6, lr}
 800362c:	4d06      	ldr	r5, [pc, #24]	; (8003648 <_sbrk_r+0x20>)
 800362e:	0004      	movs	r4, r0
 8003630:	0008      	movs	r0, r1
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	f7fd f8b4 	bl	80007a0 <_sbrk>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d103      	bne.n	8003644 <_sbrk_r+0x1c>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <_sbrk_r+0x1c>
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	2000027c 	.word	0x2000027c

0800364c <memchr>:
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	1882      	adds	r2, r0, r2
 8003650:	4290      	cmp	r0, r2
 8003652:	d101      	bne.n	8003658 <memchr+0xc>
 8003654:	2000      	movs	r0, #0
 8003656:	4770      	bx	lr
 8003658:	7803      	ldrb	r3, [r0, #0]
 800365a:	428b      	cmp	r3, r1
 800365c:	d0fb      	beq.n	8003656 <memchr+0xa>
 800365e:	3001      	adds	r0, #1
 8003660:	e7f6      	b.n	8003650 <memchr+0x4>

08003662 <memcpy>:
 8003662:	2300      	movs	r3, #0
 8003664:	b510      	push	{r4, lr}
 8003666:	429a      	cmp	r2, r3
 8003668:	d100      	bne.n	800366c <memcpy+0xa>
 800366a:	bd10      	pop	{r4, pc}
 800366c:	5ccc      	ldrb	r4, [r1, r3]
 800366e:	54c4      	strb	r4, [r0, r3]
 8003670:	3301      	adds	r3, #1
 8003672:	e7f8      	b.n	8003666 <memcpy+0x4>

08003674 <_realloc_r>:
 8003674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003676:	0007      	movs	r7, r0
 8003678:	000e      	movs	r6, r1
 800367a:	0014      	movs	r4, r2
 800367c:	2900      	cmp	r1, #0
 800367e:	d105      	bne.n	800368c <_realloc_r+0x18>
 8003680:	0011      	movs	r1, r2
 8003682:	f7ff f9c5 	bl	8002a10 <_malloc_r>
 8003686:	0005      	movs	r5, r0
 8003688:	0028      	movs	r0, r5
 800368a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800368c:	2a00      	cmp	r2, #0
 800368e:	d103      	bne.n	8003698 <_realloc_r+0x24>
 8003690:	f7ff f952 	bl	8002938 <_free_r>
 8003694:	0025      	movs	r5, r4
 8003696:	e7f7      	b.n	8003688 <_realloc_r+0x14>
 8003698:	f000 f81b 	bl	80036d2 <_malloc_usable_size_r>
 800369c:	9001      	str	r0, [sp, #4]
 800369e:	4284      	cmp	r4, r0
 80036a0:	d803      	bhi.n	80036aa <_realloc_r+0x36>
 80036a2:	0035      	movs	r5, r6
 80036a4:	0843      	lsrs	r3, r0, #1
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d3ee      	bcc.n	8003688 <_realloc_r+0x14>
 80036aa:	0021      	movs	r1, r4
 80036ac:	0038      	movs	r0, r7
 80036ae:	f7ff f9af 	bl	8002a10 <_malloc_r>
 80036b2:	1e05      	subs	r5, r0, #0
 80036b4:	d0e8      	beq.n	8003688 <_realloc_r+0x14>
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	0022      	movs	r2, r4
 80036ba:	429c      	cmp	r4, r3
 80036bc:	d900      	bls.n	80036c0 <_realloc_r+0x4c>
 80036be:	001a      	movs	r2, r3
 80036c0:	0031      	movs	r1, r6
 80036c2:	0028      	movs	r0, r5
 80036c4:	f7ff ffcd 	bl	8003662 <memcpy>
 80036c8:	0031      	movs	r1, r6
 80036ca:	0038      	movs	r0, r7
 80036cc:	f7ff f934 	bl	8002938 <_free_r>
 80036d0:	e7da      	b.n	8003688 <_realloc_r+0x14>

080036d2 <_malloc_usable_size_r>:
 80036d2:	1f0b      	subs	r3, r1, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1f18      	subs	r0, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da01      	bge.n	80036e0 <_malloc_usable_size_r+0xe>
 80036dc:	580b      	ldr	r3, [r1, r0]
 80036de:	18c0      	adds	r0, r0, r3
 80036e0:	4770      	bx	lr
	...

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
